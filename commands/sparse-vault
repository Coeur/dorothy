#!/usr/bin/env bash

function sparse_vault() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helpers for working with macOS sparse vaults (encrypted DMGs).

			USAGE:
			sparse-vault mount|open <path>

			    Mounts an existing sparse vault.

			sparse-vault unmount|eject <path>

			    Unmount an existing sparse vault.

			sparse-vault create|make <path>
			  [--name=...]  # Volume name
			  [--size=...]  # Examples: MAXSIZE, 100g, 1t
			  [--type=<sparseimage|sparsebundle>]

			    Creates a new sparse vault.
			    Note that the extension of ".<type>" appended onto the <path>.

			    Use [--type=sparseimage] for a single file.
			    Use [--type=sparsebundle] for a directory style file, made up of dozens of block files.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' path='' name='' size='' type=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'create' | 'make') action='create' ;;
		'mount' | 'open') action='mount' ;;
		'unmount' | 'eject') action='unmount' ;;
		'--path='*) path="${item#*--path=}" ;;
		'--name='*) name="${item#*--name=}" ;;
		'--size='*) size="${item#*--size=}" ;;
		'--type='*) type="${item#*--type=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			elif test -z "$path"; then
				path="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure valid action
	local actions=(
		'mount'
		'unmount'
		'create'
	)
	action="$(
		choose-option --required \
			--question='which action to perform?' \
			--filter="$action" -- "${actions[@]}"
	)"

	# adjustments: path
	path="$(
		ask --required \
			--question='Enter its path.' \
			--default="$path"
	)"
	path="$(fs-absolute -- "$path")"

	# adjustments: create
	if test "$action" = 'create'; then
		name="$(
			ask --required --confirm \
				--question='Enter the volume name.' \
				--default="$name"
		)"
		size="$(
			ask --required --confirm \
				--question='Enter its maximum size. E.g. MAXSIZE|100g|1t' \
				--default="$size"
		)"
		type="$(
			choose-option \
				--question='Enter its type.' \
				--filter="$type" -- sparseimage sparsebundle
		)"
	fi

	# =====================================
	# Helpers

	function get_macos_version {
		sw_vers -productVersion | awk -F '.' '{print $2}'
	}

	# =====================================
	# Actions

	function act_mount {
		eval-helper --quiet \
			--pending="$(echo-style --bold="Compacting...")" \
			--success="$(echo-style --success="Compacted.")" \
			--failure="$(echo-style --error="Failed to compact.")" \
			-- hdiutil compact "$path"

		eval-helper --quiet \
			--pending="$(echo-style --bold="Mounting...")" \
			--success="$(echo-style --success="Mounted.")" \
			--failure="$(echo-style --error="Failed to mount.")" \
			-- hdiutil mount "$path"
	}

	function act_create {
		local args=(
			'-encryption' 'AES-256'
			'-size' "$size"
			'-volname' "$name"
		)
		if test "$(get_macos_version)" -ge 13; then
			args+=('-fs' 'APFS')
		else
			args+=('-fs' 'Journaled HFS+')
		fi
		if test "$type" = 'sparseimage'; then
			args+=('-type' 'SPARSE')
			if [[ $path != *'.sparseimage' ]]; then
				path="${path}.sparseimage"
			fi
		else
			args+=('-type' 'SPARSEBUNDLE')
			if [[ $path != *'.sparsebundle' ]]; then
				path="${path}.sparsebundle"
			fi
		fi

		eval-helper --quiet \
			--pending="$(echo-style --bold="Creating...")" \
			--success="$(echo-style --success="Created.")" \
			--failure="$(echo-style --error="Failed to create.")" \
			-- hdiutil create "${args[@]}" "$path"

		eval-helper --quiet \
			--pending="$(echo-style --bold="Mounting...")" \
			--success="$(echo-style --success="Mounted.")" \
			--failure="$(echo-style --error="Failed to mount.")" \
			-- hdiutil mount "$path"
	}

	function act_unmount {
		eval-helper --quiet \
			--pending="$(echo-style --bold="Unmounting...")" \
			--success="$(echo-style --success="Unmount.")" \
			--failure="$(echo-style --error="Failed to unmount.")" \
			-- hdiutil unmount "$path"
	}

	# =====================================
	# Act

	if test "$(type -t "act_$action")" = 'function'; then
		"act_$action"
	else
		echo-style --error="Action [$action] not yet implemented." >/dev/stderr
		return 78 # ENOSYS 78 Function not implemented
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	sparse_vault "$@"
fi
