#!/usr/bin/env bash

function ask() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/tty.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Prompt the user for an input value in a clean and robust way.

			USAGE:
			ask [...options]

			OPTIONS:
			--question=<string>
			    Specifies the question that the prompt will be answering.

			--default=<value>
				Specifies the default value if no user specified value is entered.

			--confirm
			    Specifies that the prompt should confirm the value before continuing.

			--password
			    Specifies that the prompt should hide the value when entering by using password mode.

			--required
			    Specifies that the prompt should not continue until a value is provided.

			--timeout=<seconds>
			    Specifies a custom timeout value in seconds.

			--flag=<string> -- <...args>
			    Specifies a flag to search the arguments for, to set a default value.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item args=() option_question='' option_default='' option_password='no' option_required='no' option_confirm='no' option_timeout='' option_flag=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--question='*) option_question="${item#*--question=}" ;;
		'--default='*) option_default="${item#*--default=}" ;;
		'--timeout='*) option_timeout="${item#*--timeout=}" ;;
		'--flag='*) option_flag="${item#*--flag=}" ;;
		'--no-password'* | '--password'*)
			option_password="$(get-flag-value password --missing="$option_password" -- "$item" | echo-affirmative)"
			;;
		'--no-required'* | '--required'*)
			option_required="$(get-flag-value required --missing="$option_required" -- "$item" | echo-affirmative)"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value confirm --missing="$option_confirm" -- "$item" | echo-affirmative)"
			;;
		'--')
			args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# prepare flags
	local result read_flags=('-r')
	if test -n "$option_default"; then
		result="$option_default"
	elif test -n "$option_flag"; then
		result="$(get-flag-value "$option_flag" -- "${args[@]}")"
	else
		result=''
	fi

	# helpers
	local asked='no'
	function on_timeout {
		if is-value "$result"; then
			echo-style --notice="Ask timed out, using fallback value: " --code="$result" >/dev/stderr
			sleep 5
			echo "$result"
			return 0
		elif test "$option_required" = 'no'; then
			echo-style --notice='Ask timed out, as the field was optional will use no value.' >/dev/stderr
			sleep 5
			return 0
		else
			echo-style --notice='Ask timed out, with no fallback.' >/dev/stderr
			sleep 5
			return 62 # Timer expired
		fi
	}
	function ask {
		local ec
		tty_auto
		asked='yes' # not lcoal
		if test -n "${1-}"; then
			echo "$1" >/dev/tty
		fi
		while true; do
			ec=0 && read "${read_flags[@]}" -t 300 -r -p "> " result || ec="$?"
			if test "$ec" -gt 128; then
				return 62 # Timer expired
			fi
			if is-value "$result"; then
				break
			elif test "$option_required" = 'no'; then
				result=''
				break
			fi
		done
		validate
	}
	function validate {
		local ec choice choices=()
		if is-value "$result"; then
			# we have a value, so go for it
			if test "$option_confirm" != 'yes'; then
				echo "$result"
				return 0
			fi
			# proceed with confirm
			if test "$asked" = 'yes'; then
				if test "$option_password" = 'yes'; then
					choices+=('existing' 'use the entered password')
				else
					choices+=('existing' "use the entered value: [$result]")
				fi
			else
				if test "$option_password" = 'yes'; then
					choices+=('existing' 'use the preconfigured password')
				else
					choices+=('existing' "use the preconfigured value: [$result]")
				fi
			fi
		fi
		if test "$asked" = 'yes'; then
			choices+=('custom' 'redo the entered value')
		else
			choices+=('custom' 'enter a value')
		fi
		if test "$option_required" = 'no'; then
			choices+=('none' 'use no value')
		fi

		# as need to confirm, adjust the timeout
		if test -z "$option_timeout" && (is-value "$result" || test "$option_required" = 'no'); then
			# timeout of one minute for confirms of existing values, or optional values
			option_timeout=60
		fi

		# ask
		ec=0 && choice="$(choose-option \
			--timeout="$option_timeout" \
			--question="$option_question" \
			--label -- "${choices[@]}")" || ec="$?"

		# check
		if test "$ec" -eq 62; then
			echo-style --error="Choose timed out: $ec" >/dev/stderr
			on_timeout
			return "$?"
		elif test "$ec" -ne 0; then
			echo-style --error="Choose failed: $ec" >/dev/stderr
			sleep 5
			return "$ec"
		fi

		# handle
		if test "$choice" = 'existing'; then
			# done, sucess
			echo "$result"
			return 0
		elif test "$choice" = 'custom'; then
			# ask
			ec=0 && ask "$option_question" || ec="$?"

			# check for failure
			if test "$ec" -ne 0; then
				# timeout probably
				on_timeout
				return "$?"
			fi

			# done, success
			return 0
		elif test "$choice" = 'none'; then
			# done, sucess
			echo
			return 0
		else
			# unknown error
			echo-style --error="Invalid choice: $choice" >/dev/stderr
			sleep 5
			return 14 # EFAULT 14 Bad address
		fi
	}

	# act
	validate
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	ask "$@"
fi
