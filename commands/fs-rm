#!/usr/bin/env bash

function fs-rm() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	# @todo add user,group,owner settings

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Remove the paths from the file system, with some safety checks in place.

			USAGE:
			fs-rm [...options] [--] ...<path>

			OPTIONS:
			--no-confirm
			    If specified, skip confirms.

			--sudo
			    If specified, use sudo when removing the files.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item paths=() quiet='no' confirm='yes' sudo='no'
	quiet="$(echo-quiet "$quiet" -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--no-confirm'* | '--confirm'*)
			confirm="$(get-flag-value confirm --missing="$confirm" -- "$item" | echo-affirmative)"
			;;
		'--no-sudo'* | '--sudo'*)
			sudo="$(get-flag-value sudo --missing="$sudo" -- "$item" | echo-affirmative)"
			;;
		'--')
			paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) paths+=("$item") ;;
		esac
	done

	# check
	if test "${#paths[@]}" -eq 0; then
		help "No <paths> were provided."
	fi

	# =====================================
	# Dependencies

	setup-util-dust --quiet

	# =====================================
	# Action

	function maybe_sudo {
		if test "$sudo" = 'yes'; then
			sudo-helper --inherit -- "$@"
		else
			"$@"
		fi
	}

	function do_confirm_trim {
		local path="$1"

		# note its structure and size
		echo
		maybe_sudo eval-helper --no-quiet --wrap -- ls -la "$path"
		echo

		# confirm their removal
		confirm --positive --ppid=$$ -- "$(
			echo-style --notice='Trim empty directories?' --bold=" $path " --notice="?"
		)"
	}
	function do_confirm_removal {
		local path="$1"

		# note its structure and size
		echo
		maybe_sudo eval-helper --no-quiet --wrap -- ls -la "$path"
		echo
		maybe_sudo eval-helper --no-quiet --wrap -- dust --no-percent-bars "$path"
		echo
		maybe_sudo eval-helper --no-quiet --wrap -- dust --no-percent-bars --filecount "$path"
		echo

		# confirm their removal
		confirm --positive --ppid=$$ -- "$(
			echo-style --warning='Confirm removal of non-empty' --bold=" $path " --warning="?"
		)"
	}

	function act {
		local path="$1"
		export title conclusion=''
		path="$(fs-absolute -- "$path" || echo-quote "$path")"
		title="fs-rm $path"
		if test "$quiet" != 'yes'; then
			echo-segment --h2="$title"
			conclusion="$(
				echo-style --red="failed to remove."
			)"
			function on_return {
				local ec="$?"
				if test "$ec" -eq 0; then
					echo-segment --g2="$title" " $conclusion"
				else
					echo-segment --e2="$title" " $conclusion"
				fi
				trap - RETURN EXIT
				return "$ec"
			}
			trap on_return RETURN EXIT # RETURN is success, EXIT is exceptions
		fi

		# is the path missing
		if test ! -e "$path"; then
			conclusion="$(
				echo-style --green="was previously removed."
			)"
			return 0
		fi
		# path exists

		# delete empty directories
		if test "$confirm" = 'no' || do_confirm_trim "$path"; then
			maybe_sudo find "$path" -empty -type d -delete || :
			if test ! -e "$path"; then
				conclusion="$(
					echo-style --green="was only empty directories, it has been removed."
				)"
				return 0
			fi
		fi
		# there are leftovers

		# confirm and remove, or no confirm and remove
		if test "$confirm" = 'no' || do_confirm_removal "$path"; then
			maybe_sudo rm -rfv "$path" || :
			# || : as we detect successful removal below
		fi

		# fail if not removed
		if test -e "$path"; then
			conclusion="$(
				echo-style --red="has non-empty files, it has been kept."
			)"
			return 66 # Directory not empty
		fi

		# success if removed
		conclusion="$(
			echo-style --green="had non-empty files, it was manually removed."
		)"
	}

	# act with wrapping of success
	local path
	for path in "${paths[@]}"; do
		act "$path"
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	fs-rm "$@"
fi
