#!/usr/bin/env bash

function setup_util_devel() (
	source "$DOROTHY/sources/bash.bash"

	if is-apt; then
		setup-util --optional --name='APT Essentials' "$@" \
			APT='apt-transport-https' APT='ca-certificates'
	fi
	if is-apk; then
		setup-util --optional --name='APK Essentials' "$@" \
			APK='ca-certificates'
	fi
	if is-dnf; then
		setup-util --optional --name='DNF Essentials' "$@" \
			DNF='dnf-plugins-core'
	fi

	# essentials
	setup-util-coreutils
	setup-util-moreutils --optional

	# gcc, etc.
	# https://super-unix.com/unixlinux/the-fedora-equivalent-of-the-debian-build-essential-package/
	# https://stackoverflow.com/a/58680740/130638
	# xcode is macos's equivalent
	# https://packages.debian.org/sid/amd64/build-essential/filelist (no bins...)
	setup-util --optional --name='Build Essentials' "$@" \
		APK='build-base' \
		APT='build-essential' \
		AUR='base-devel' \
		DNF_GROUP='Development Tools' \
		DNF_GROUP='Development Libraries' \
		RPM='make' RPM='automake' RPM='gcc' RPM='gcc-c++' RPM='kernel-devel' \
		VOID='base-devel' \
		ZYPPER='devel_basis' ZYPPER_TYPE='pattern'

	# https://apple.stackexchange.com/a/362837
	# https://packages.debian.org/sid/amd64/clang/filelist
	# /usr/bin/asan_symbolize
	# /usr/bin/clang
	# /usr/bin/clang++
	setup-util --optional --cli='clang' "$@" \
		APK='clang' \
		APT='clang' \
		AUR='clang' \
		BREW='llvm' \
		RPM='clang' \
		VOID='clang' \
		ZYPPER='clang'

	# https://packages.debian.org/sid/amd64/make/filelist
	# /usr/bin/gmake
	# /usr/bin/make
	# /usr/bin/make-first-existing-target
	setup-util --optional --cli='make' "$@" \
		APK='make' \
		APT='make' \
		VOID='make' \
		ZYPPER='make'

	# https://packages.debian.org/sid/amd64/cmake/filelist
	# /usr/bin/cmake
	# /usr/bin/cpack
	# /usr/bin/ctest
	setup-util --optional --cli='cmake' "$@" \
		APK='cmake' \
		APT='cmake' \
		AUR='cmake' \
		BREW='cmake' \
		RPM='cmake' \
		VOID='cmake' \
		ZYPPER='cmake'

	# https://packages.debian.org/sid/amd64/llvm/filelist
	# /usr/bin/bugpoint
	# /usr/bin/dsymutil
	# /usr/bin/llc
	# /usr/bin/llvm-PerfectShuffle
	# /usr/bin/llvm-addr2line
	# /usr/bin/llvm-ar
	# /usr/bin/llvm-as
	# /usr/bin/llvm-bcanalyzer
	# /usr/bin/llvm-c-test
	# /usr/bin/llvm-cat
	# /usr/bin/llvm-cfi-verify
	# /usr/bin/llvm-config
	# /usr/bin/llvm-cov
	# /usr/bin/llvm-cvtres
	# /usr/bin/llvm-cxxdump
	# /usr/bin/llvm-cxxfilt
	# /usr/bin/llvm-diff
	# /usr/bin/llvm-dis
	# /usr/bin/llvm-dlltool
	# /usr/bin/llvm-dwarfdump
	# /usr/bin/llvm-dwp
	# /usr/bin/llvm-exegesis
	# /usr/bin/llvm-extract
	# /usr/bin/llvm-lib
	# /usr/bin/llvm-link
	# /usr/bin/llvm-lto
	# /usr/bin/llvm-lto2
	# /usr/bin/llvm-mc
	# /usr/bin/llvm-mca
	# /usr/bin/llvm-modextract
	# /usr/bin/llvm-mt
	# /usr/bin/llvm-nm
	# /usr/bin/llvm-objcopy
	# /usr/bin/llvm-objdump
	# /usr/bin/llvm-opt-report
	# /usr/bin/llvm-pdbutil
	# /usr/bin/llvm-profdata
	# /usr/bin/llvm-ranlib
	# /usr/bin/llvm-rc
	# /usr/bin/llvm-readelf
	# /usr/bin/llvm-readobj
	# /usr/bin/llvm-reduce
	# /usr/bin/llvm-rtdyld
	# /usr/bin/llvm-size
	# /usr/bin/llvm-split
	# /usr/bin/llvm-stress
	# /usr/bin/llvm-strings
	# /usr/bin/llvm-strip
	# /usr/bin/llvm-symbolizer
	# /usr/bin/llvm-tblgen
	# /usr/bin/llvm-undname
	# /usr/bin/llvm-xray
	# /usr/bin/obj2yaml
	# /usr/bin/opt
	# /usr/bin/sanstats
	# /usr/bin/verify-uselistorder
	# /usr/bin/yaml2obj
	setup-util --optional --cli='llc' "$@" \
		APK='llvm' \
		APT='llvm' \
		AUR='llvm' \
		BREW='llvm' \
		RPM='llvm' \
		VOID='llvm' \
		ZYPPER='llvm'

	# no apk
	# https://packages.debian.org/sid/amd64/pkg-config/filelist (no bins...)
	setup-util --optional --cli='pkg-config' "$@" \
		APT='pkg-config' \
		AUR='pkg-config' \
		BREW='pkg-config' \
		RPM='pkg-config' \
		VOID='pkg-config' \
		ZYPPER='pkg-config'

	# https://packages.debian.org/sid/amd64/libssl-dev/filelist (no bins...)
	setup-util --optional --name='openssl/libssl' "$@" \
		APK='openssl' \
		APT='libssl-dev' \
		AUR='openssl' \
		BREW='openssl' \
		RPM='openssl-devel' \
		VOID='openssl' \
		ZYPPER='openssl'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_devel "$@"
fi
