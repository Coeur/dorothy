#!/usr/bin/env bash

# https://rsteube.github.io/carapace-bin/installation.html

# https://github.com/rsteube/carapace-bin/releases
# carapace-bin_0.28.0_linux_386.apk
# carapace-bin_0.28.0_linux_386.deb
# carapace-bin_0.28.0_linux_386.rpm
# carapace-bin_0.28.0_linux_386.termux.deb
# carapace-bin_0.28.0_linux_amd64.apk
# carapace-bin_0.28.0_linux_amd64.deb
# carapace-bin_0.28.0_linux_amd64.rpm
# carapace-bin_0.28.0_linux_amd64.termux.deb
# carapace-bin_0.28.0_linux_arm64.apk
# carapace-bin_0.28.0_linux_arm64.deb
# carapace-bin_0.28.0_linux_arm64.rpm
# carapace-bin_0.28.0_linux_arm64.termux.deb
# carapace-bin_darwin_amd64.tar.gz
# carapace-bin_darwin_arm64.tar.gz
# carapace-bin_linux_386.tar.gz
# carapace-bin_linux_amd64.tar.gz
# carapace-bin_linux_arm64.tar.gz
# carapace-bin_windows_386.zip
# carapace-bin_windows_amd64.zip
# carapace-bin_windows_arm64.zip

# https://repology.org/project/carapace/versions

function setup_util_carapace() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance
	if is-needle --quiet "$@" && ! is-needle --upgrade "$@" && ! is-needle --uninstall "$@" && command-exists carapace; then
		return 0
	fi

	# setup
	local arch options=(
		--cli='carapace'
		"$@"
		AUR='carapace-bin' # ARCH
		APT_REPO='deb [trusted=yes] https://apt.fury.io/rsteube/ /'
		APT='carapace-bin'
		BREW_TAP='rsteube/homebrew-tap'
		BREW='rsteube/tap/carapace'
		NIX='carapace'
		VOID='carapace'
		WINGET='rsteube.Carapace'
		YUM_REPO="$(
			cat <<-EOF
				[fury]
				name=Gemfury Private Repo
				baseurl=https://yum.fury.io/rsteube/
				enabled=1
				gpgcheck=0
			EOF
		)"
		YUM='carapace-bin'
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug="${2:-"rsteube/carapace-bin"}" \
			--release='latest' \
			--asset-filter="$(echo-escape-regex -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$@")"
			DOWNLOAD_UNZIP_FILTER='carapace'
		)
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_UNZIP_FILTER='gum'
		)
	}
	function add_apk_option {
		options+=(
			APK="$(get_github_asset_url "$1")"
		)
	}
	function add_deb_option {
		options+=(
			DEB="$(get_github_asset_url "$1")"
		)
	}
	function add_rpm_option {
		options+=(
			RPM="$(get_github_asset_url "$1")"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '_darwin_arm64.tar.gz'
		elif test "$arch" = 'x64'; then
			add_download_option '_darwin_amd64.tar.gz'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_download_option '_windows_arm64.zip'
		elif test "$arch" = 'x64'; then
			add_download_option '_windows_amd64.zip'
		elif test "$arch" = 'x32'; then
			add_download_option '_windows_386.zip'
		fi
	else
		if test "$arch" = 'a64'; then
			add_apk_option '_linux_arm64.apk'
			add_deb_option '_linux_arm64.deb'
			add_rpm_option '_linux_arm64.rpm'
			add_download_option '_linux_arm64.tar.gz'
		elif test "$arch" = 'x64'; then
			add_apk_option '_linux_amd64.apk'
			add_deb_option '_linux_amd64.deb'
			add_rpm_option '_linux_amd64.rpm'
			add_download_option '_linux_amd64.tar.gz'
		elif test "$arch" = 'x32'; then
			add_apk_option '_linux_386.apk'
			add_deb_option '_linux_386.deb'
			add_rpm_option '_linux_386.rpm'
			add_download_option '_linux_386.tar.gz'
		fi
	fi
	setup-util "${options[@]}"

	# if installed
	if command-exists carapace; then
		# ensure nushell configuration works
		if command-exists nu; then
			setup-util-nu --quiet
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_carapace "$@"
fi
