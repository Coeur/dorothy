#!/usr/bin/env bash

function setup_utils() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-utils [...options] [-- ...<util>]

			OPTIONS:
			<util>
			    Specific utility to setup.

			--configure
			    Prompt for which utilities you wish to setup, and update [SETUP_UTILS] accordingly.

			All other options are forwarded to the utility installer.
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item args=() utils=() reconfigure='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--configure') reconfigure='yes' ;;
		'--')
			utils+=("$@")
			shift $#
			break
			;;
		*) args+=("$item") ;;
		esac
	done

	# =====================================
	# Configuration

	# if args, don't use config
	if test "${#utils[@]}" -eq 0; then
		# dependencies
		require_array 'mapfile'

		# no args, so use configuration
		source "$DOROTHY/sources/config.bash"

		# setup.bash provides:
		local SETUP_UTILS=()
		load_dorothy_config 'setup.bash'

		# if reconfiguring, prompt the user which ones
		local options file __basename name
		if test "$reconfigure" = 'yes'; then
			options=()
			for file in "$DOROTHY/commands/setup-util-"*; do
				__basename="$(basename "$file")"
				name="${__basename#*setup-util-}"
				options+=("$name")
			done
			mapfile -t utils < <(
				choose-option --multi \
					--question="Which utilities to install?" \
					--defaults="$(echo-lines -- "${SETUP_UTILS[@]}")" \
					-- "${options[@]}"
			)

			# save
			update_dorothy_user_config 'setup.bash' -- \
				--field='SETUP_UTILS' --array="$(echo-lines -- "${utils[@]}")"
		else
			utils=("${SETUP_UTILS[@]}")
		fi
	fi

	# check
	if test "${#utils[@]}" -eq 0; then
		echo-style --notice='No utilities provided, to configure some use:' $'\n' \
			'   ' --code='setup-utils --configure'
		return 0
	fi

	# =====================================
	# Action

	local item cmd
	echo-segment --h1="Setup ${#utils[@]} utilities"
	for item in "${utils[@]}"; do
		if test -n "$item"; then
			cmd="setup-util-${item}"
			if command-exists "$cmd"; then
				"$cmd" "${args[@]}" || : # don't fail everything if one fails
			else
				# can't use -EOF, as we want to print spacing
				{
					echo-style --e1="Unable to install [$item], as [$cmd] doesn't exist." $'\n' \
						$'\n' \
						--red="You can create the missing command by running:" $'\n' \
						$'\n' \
						--dim="    touch $DOROTHY/user/$cmd" $'\n' \
						--dim="    edit $DOROTHY/user/$cmd" $'\n' \
						--dim="    open https://github.com/bevry/dorothy/discussions/73" $'\n' \
						$'\n' \
						--red="Once the command is created, re-run your prior command."
					return 1
				} >/dev/stderr
			fi
		fi
	done
	echo-segment --g1="Setup ${#utils[@]} utilities"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_utils "$@"
fi
