#!/usr/bin/env bash

# sudo a command helpering environment and path
# https://stackoverflow.com/q/257616/130638

function sudo_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Run a command as root, be it via sudo or doas, or neither if not needed.

			USAGE:
			sudo-helper [...options] -- <command> [...args]
			sudo-helper --local

			OPTIONS:

			--user=<user>
			    specify a user to run the command as

			--group=<group>
			    specify a group to run the command as

			--inherit
			    if enabled, inherit environment variables include PATH.

			--local
			    update sudo configuration to enable access to /usr/local variables

			--reason=<reason>
			    if a prompt is required for your sudo/root/login password, this reason will be used to explain why sudo was required.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item cmd=() inherit='no' user='' group='' reason='' option_local=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-inherit'* | '--inherit'*)
			inherit="$(get-flag-value inherit --missing="$inherit" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-local'* | '--local'*)
			option_local="$(get-flag-value local --missing="$option_local" -- "$item" | echo-affirmative --stdin)"
			;;
		'--user='*) user="${item#*--user=}" ;;
		'--group='*) group="${item#*--group=}" ;;
		'--reason='*) reason="${item#*--reason=}" ;;
		'--')
			cmd+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# local
	if test -n "$option_local"; then
		# dependencies
		setup-util-sd --quiet

		# paths
		local system_paths sudoers_line cron_system_line cron_user_line
		system_paths="$(print_line "$PATH" | sd "$HOME/.+?:" '')"
		sudoers_line="Defaults	secure_path=\"$system_paths\"" # $HOME paths do not make sense for root operation
		cron_system_line="PATH=\"$system_paths\""             # $HOME paths do not make sense for root operation
		cron_user_line="PATH=\"$system_paths\""               # $HOME paths fails to apply

		# sudoers
		config-edit --sudoers --line="$sudoers_line" --needle='secure_path' --add="$option_local"
		echo

		# cron
		config-edit --cron-system --line="$cron_system_line" --needle='PATH=' --add="$option_local"
		config-edit --cron-user --line="$cron_user_line" --needle='PATH=' --add="$option_local"

		# done
		return 0
	fi

	# check
	if test "${#cmd[@]}" -eq 0; then
		help 'No <command> was provided.'
	fi

	# =====================================
	# Action

	# https://man.openbsd.org/doas
	# https://man.archlinux.org/man/doas.1.en

	# sudo
	# https://manpages.ubuntu.com/manpages/xenial/man8/sudo.8.html
	# -E, --preserve-env
	#    preserve user environment when running command
	# -H, --set-home
	#    set HOME variable to target user's home dir
	# -i, --login
	#    Run the shell specified by the target user's password database entry as a login shell.

	local run=() home=''
	if command-exists sudo; then
		run+=('sudo')

		if test -n "$user"; then
			run+=("--user=$user")
			# should coincide with setup-environment-commands
			if test -d /Users; then
				home="/Users/$user"
			elif test -d '/home'; then
				home="/home/$user"
			elif test -d "/$user"; then
				HOME="/$user"
			fi
		elif test -n "$HOME"; then
			home="$HOME"
		fi

		if test -n "$group"; then
			run+=("--group=$group")
		fi

		if test -n "$home"; then
			if is-missing "$home"; then
				sudo mkdir -p "$home"
				fs-own --quiet --user="$user" --group="$group" -- "$home"
			fi
			run+=('--set-home')
		fi

		if test "$inherit" = 'yes'; then
			run+=(
				'--preserve-env'
				'env'
				"PATH=$PATH"
			)
		fi

		# check if password is required
		# [sudo --validate] doesn't work on multipass, so just use [true] as a no-op
		if ! sudo --non-interactive true &>/dev/null; then
			# password is required, let the user know what they are being prompted for
			# [--code=*] better than [echo-element --openclose="$(echo-quote -- "${run[@]}" | echo-join ' ' --stdin)"] as that is too verbose
			# use [--tty] to ensure the prompt is not hidden when otherwise hiding sudo output, such as in [command-working]
			# while it would be nice to clear lines, we cannot know how many lines to clear as they could require multiple attempts to enter the password
			# there would be a way of doing this with [tty.bash] however that is too complicated for this
			if test -n "$reason"; then
				echo-style --tty+notice="$reason"
				if [[ $reason == *':' ]]; then
					echo-style --tty+code="${run[*]}"
				fi
			else
				echo-style --tty+notice='Your sudo/root/login password is required to execute the command:' --tty=$'\n' --tty+code_dim="${run[*]}" --tty=' ' --tty+code="${cmd[*]}"
			fi
		fi

		run+=("${cmd[@]}")
	elif command-exists doas; then
		# https://man.archlinux.org/man/doas.1.en
		run+=('doas')
		if test -n "$user"; then
			run+=(
				'-u'
				"$user"
			)
		fi
		if test -n "$group"; then
			help "doas does not support --group"
		fi
		if test "$inherit" = 'yes'; then
			run+=(
				'env'
				"DOROTHY=$DOROTHY"
				"PATH=$PATH"
			)
		fi
		run+=("${cmd[@]}")
	else
		# sudo/doas does not exist, probably not needed
		run+=("${cmd[@]}")
	fi

	# execute
	"${run[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	sudo_helper "$@"
fi
