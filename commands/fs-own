#!/usr/bin/env bash

function fs_own_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	local dir file
	dir="$(fs-temp --directory)"
	file="$(fs-temp --directory="$dir" --file --touch)"

	eval-tester --name='can own a file +quiet' \
		-- fs-own --quiet -- "$file"

	eval-tester --name='can own a durectory +quiet' \
		-- fs-own --quiet -- "$dir"

	eval-tester --name='can own a file -quiet' --ignore-stdout \
		-- fs-own --no-quiet -- "$file"

	eval-tester --name='can own a durectory -quiet' --ignore-stdout \
		-- fs-own --no-quiet -- "$dir"

	eval-tester --name='can own a file +verbose' --ignore-stdout --ignore-stderr \
		-- fs-own --verbose -- "$file"

	eval-tester --name='can own a durectory +verbose' --ignore-stdout --ignore-stderr \
		-- fs-own --verbose -- "$dir"

	eval-tester --name='can own a durectory +quiet +admin' --ignore-stderr \
		-- fs-own --quiet --admin -- "$dir"

	eval-tester --name='can own a durectory -quiet +admin' --ignore-stdout --ignore-stderr \
		-- fs-own --no-quiet --admin -- "$dir"

	echo-segment --g1="TEST: $0"
	return 0
)
function fs_own() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Claim ownership of a path, by updating its permissions via chmod and chown.

			USAGE:
			fs-own [...options] [--] <...paths>

			OPTIONS:
			--no-quiet
			    if provided, will output the executed commands.

			--verbose
			    if provied, will use --no-quiet for this command, and use --verbose on executed chmod/chown commands.

			--changes
			    if provided, changes will be reported if the operating system supports it.
				defaults to enabled if --quiet is not provided.

			--permissions=<permissions>
			    sets file and directory permissions

			--admin
			    if provided, will use the platform specific admin values.

			--owner=<owner>
			    if provided, will set the path owner to this.

			--user=<user>
			    if provided, will set the path owner to this user.

			--group=<group>
			    if provided, will set the path owner to this group.

			--sudo
			    if provided, sudo will be used, automatically enabled when admin/owner/user/group is provided.

			--partial
			    if provided, failures will be ignored.

			--optional
			    if provided, missing paths will be ignored.

			--no-recursive
			    if provided, only the exact path will be used, not any child paths.

			QUIRKS:
			If [--permissions=...], [--directory-permissions=...], [--file-permissions=...] are all omitted, then the directory permissions will be set to [755] and the file permissions set to [644].
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item paths=()
	local option_quiet=''
	local option_verbose='no'
	local option_changes='' # os support
	local option_owner=''
	local option_user=''
	local option_group=''
	local option_admin='no'
	local option_permissions=''
	local option_directory_permissions='' # deprecated
	local option_file_permissions=''      # deprecated
	local option_sudo='no'
	local option_partial='no'
	local option_optional='no'
	local option_recursive='yes'
	option_quiet="$(echo-quiet "$option_quiet" -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-quiet'* | '--quiet'*) ;; # handled by echo-quiet
		'--no-verbose'* | '--verbose'*) option_verbose="$(
			get-flag-value verbose --missing="$option_verbose" -- "$item" | echo-affirmative
		)" ;;
		'--no-changes'* | '--changes'*) option_changes="$(
			get-flag-value changes --missing="$option_changes" -- "$item" | echo-affirmative
		)" ;;
		'--no-admin'* | '--admin'*) option_admin="$(
			get-flag-value admin --missing="$option_admin" -- "$item" | echo-affirmative
		)" ;;
		'--no-sudo'* | '--sudo'*) option_sudo="$(
			get-flag-value sudo --missing="$option_sudo" -- "$item" | echo-affirmative
		)" ;;
		'--no-partial'* | '--partial'*) option_partial="$(
			get-flag-value partial --missing="$option_partial" -- "$item" | echo-affirmative
		)" ;;
		'--no-optional'* | '--optional'*) option_optional="$(
			get-flag-value optional --missing="$option_optional" -- "$item" | echo-affirmative
		)" ;;
		'--no-recursive'* | '--recursive'*) option_recursive="$(
			get-flag-value recursive --missing="$option_recursive" -- "$item" | echo-affirmative
		)" ;;
		'--permissions='*) option_permissions="${item#*--permissions=}" ;;
		'--directory-permissions='*) option_directory_permissions="${item#*--directory-permissions=}" ;;
		'--file-permissions='*) option_file_permissions="${item#*--file-permissions=}" ;;
		'--owner='*) option_owner="${item#*--owner=}" ;;
		'--user='*) option_user="${item#*--user=}" ;;
		'--group='*) option_group="${item#*--group=}" ;;
		'--')
			paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) paths+=("$item") ;;
		esac
	done

	# check
	local index
	if test "${#paths[@]}" -eq 0; then
		help "No paths were provided."
	fi
	for index in "${!paths[@]}"; do
		if test -z "${paths[index]}"; then
			echo-error 'Cannot claim ownership of an empty path:' $'\n' "$(echo-verbose "${paths[@]}")"
			return 1
		fi
	done

	# check for deprecation
	if test -n "$option_directory_permissions" -o -n "$option_file_permissions"; then
		help "[file|directory]-permissions are deprecated, you probably just wanted to do --permissions=X..., see https://superuser.com/a/91966/32418"
	fi

	# adjustments: permissions
	if test -z "$option_permissions"; then
		option_permissions='a-xrw,ug+Xrw'
	fi

	# adjustments: admin
	if test "$option_admin" = 'yes'; then
		if is-mac; then
			option_user="$(whoami)"
			option_group='admin'
			# ^ https://superuser.com/a/20430/32418
		else
			option_user='root'
			option_group='root'
		fi
	fi

	# adjustments: owner
	local owner=''
	if test -n "$option_owner"; then
		owner="$option_owner"
	elif test -n "$option_user" -a -n "$option_group"; then
		owner="$option_user:$option_group"
	elif test -n "$option_user"; then
		owner="$option_user"
	elif test -n "$option_group"; then
		owner=":$option_group"
	fi

	# adjustments: recursive
	local ch_args=()
	if test "$option_recursive" = 'yes'; then
		if is-mac || is-alpine; then
			ch_args+=('-R')
		else
			ch_args+=('--recursive')
		fi
	fi

	# adjustments: changes
	if test -z "$option_changes"; then
		if test "$option_quiet" = 'yes' || is-mac; then
			option_changes='no'
		else
			option_changes='yes'
		fi
	fi

	# adjustments: quiet
	if test -z "$option_quiet"; then
		option_quiet='yes'
	fi

	# apply args
	if test "$option_changes" = 'yes'; then
		if is-mac || is-alpine; then
			echo-style --dim='Reporting permission changes is not provided by this Operating System.' >/dev/stderr
		else
			ch_args+=('--changes')
		fi
	fi
	if test "$option_verbose" = 'yes'; then
		if is-mac; then
			echo-style --dim='Verbose permission changes is not provided by this Operating System.' >/dev/stderr
		else
			ch_args+=('--verbose')
		fi
	fi

	# =====================================
	# Prepare

	# the argument handling is complex for bash v3 compat
	local sudo_as_user_args=() sudo_as_admin_args=() sudo_reason

	# prepare, don't put each path on a new line, as that can make a lot of lines!
	sudo_reason="Correcting permissions for the following paths requires your sudo/root/login password:$(
		echo-style $'\n' --reset --code="${paths[*]}"
	)"

	# if not quiet, then wrap the sudo commands
	if test "$option_quiet" = 'no'; then
		sudo_as_user_args+=(
			'eval-helper'
			'--no-quiet'
			'--wrap'
			'--'
		)
		sudo_as_admin_args+=(
			'eval-helper'
			'--no-quiet'
			'--wrap'
			'--'
		)
	fi

	# sudo as the user/group
	if test -n "$owner" -o "$option_sudo" = 'yes'; then
		sudo_as_user_args+=(
			'sudo-helper'
			"--reason=$sudo_reason"
		)
		if test -n "$option_user"; then
			sudo_as_user_args+=("--user=$option_user")
		fi
		if test -n "$option_group"; then
			sudo_as_user_args+=("--group=$option_group")
		fi
		sudo_as_user_args+=('--')
	fi

	# sudo as the admin
	if test -n "$owner" -o "$option_sudo" = 'yes'; then
		sudo_as_admin_args+=(
			'sudo-helper'
			"--reason=$sudo_reason"
			'--'
		)
	fi

	# =====================================
	# Helpers

	function is_available {
		local path="$1" cmd=()
		if test -n "$owner"; then
			if test "${#sudo_as_admin_args[@]}" -ne 0; then
				cmd+=("${sudo_as_admin_args[@]}")
			fi
		else
			if test "${#sudo_as_user_args[@]}" -ne 0; then
				cmd+=("${sudo_as_user_args[@]}")
			fi
		fi
		# can't use is-present, because sudo doesn't have access, and it is too complicated to add access for it
		cmd+=(test -e "$path" -o -L "$path")
		"${cmd[@]}"
	}
	function check_exists {
		local path="$1" available_status
		eval_capture --statusvar=available_status -- is_available "$path"
		if test "$available_status" -ne 0; then
			if test "$option_optional" != 'yes'; then
				echo-error 'Cannot claim ownership a path that does exist or is inaccessible:' $'\n' --code="$path"
				return "$available_status"
			fi
		fi
	}
	function do_own {
		local path="$1" cmd

		# chown
		if test -n "$owner"; then
			cmd=()
			if test "${#sudo_as_admin_args[@]}" -ne 0; then
				cmd+=("${sudo_as_admin_args[@]}")
			fi
			cmd+=(chown "${ch_args[@]}" "$owner" "$path")
			"${cmd[@]}"
		fi

		# chmod
		if test -n "$option_permissions"; then
			cmd=()
			# https://superuser.com/a/91966/32418
			if test "${#sudo_as_user_args[@]}" -ne 0; then
				cmd+=("${sudo_as_user_args[@]}")
			fi
			cmd+=(chmod "${ch_args[@]}" "$option_permissions" "$path")
			"${cmd[@]}"
		fi
	}

	# =====================================
	# Act

	local path exists_status
	if test "$option_partial" = 'yes'; then
		for path in "${paths[@]}"; do
			# ignore exists and own failures in partial mode
			eval_capture --statusvar=exists_status -- check_exists "$path"
			if test "$exists_status" -eq 0; then
				eval_capture -- do_own "$path"
			fi
		done
	else
		for path in "${paths[@]}"; do
			# respect exists and own failures in non-partial mode (this also allows capturing ctrl+c on sudo)
			eval_capture --statusvar=exists_status -- check_exists "$path"
			if test "$exists_status" -eq 0; then
				do_own "$path"
			else
				return "$exists_status"
			fi
		done
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		fs_own_test
	else
		fs_own "$@"
	fi
fi

# # find -exec fails when --user --group is provided as it fails to attach to correct home
# # so instead xargs needs to be used, but that fails because too many files or so
# # so instead we do a loop, but that is very slow
# # and in the end, the only time people ever need this is when they actually inded to do
# # an uppercase X permission https://superuser.com/a/91966/32418

# if test -n "$option_directory_permissions"; then
# 	test "$option_quiet" = 'no' && set -x || :
# 	"${sudo_as_user_args[@]}" find "$path" -type d | while read -r dir; do
# 		"${sudo_as_user_args[@]}" \
# 			chmod "${ch_args[@]}" "$option_directory_permissions" "$dir"
# 	done
# 	test "$option_quiet" = 'no' && set +x || :
# fi
# if test -n "$option_file_permissions"; then
# 	test "$option_quiet" = 'no' && set -x || :
# 	"${sudo_as_user_args[@]}" find "$path" -type f | while read -r file; do
# 		"${sudo_as_user_args[@]}" \
# 			chmod "${ch_args[@]}" "$option_file_permissions" "$file"
# 	done
# 	test "$option_quiet" = 'no' && set +x || :
# fi
