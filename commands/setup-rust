#!/usr/bin/env bash

function setup_rust() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# setup.bash provides:
	local CARGO_INSTALL=()
	local RUST_INSTALL=() # deprecated, use CARGO_INSTALL
	load_dorothy_config 'setup.bash'

	# deprecations
	if test "${#RUST_INSTALL[@]}" -ne 0; then
		CARGO_INSTALL+=("${RUST_INSTALL[@]}")
		update_dorothy_user_config 'setup.bash' -- \
			--field='RUST_INSTALL' --replace= \
			--field='CARGO_INSTALL' --array="$(echo-lines -- "${CARGO_INSTALL[@]}" | sort --ignore-case | uniq)"
	fi

	# adjustments
	mapfile -t CARGO_INSTALL < <(prepare_packages 'CARGO_INSTALL' -- "${CARGO_INSTALL[@]}")

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-rust [--flags]

			FLAGS:
			--optional
			    Only setup if it is needed by packages.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item optional=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-optional'* | '--optional'*)
			optional="$(get-flag-value optional --missing="$optional" -- "$item" | echo-affirmative || :)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# check
	if test "$optional" = 'yes' -a "${#CARGO_INSTALL[@]}" -eq 0 && ! confirm --negative --ppid=$$ -- 'Setup Rust?'; then
		return 0
	fi

	# =====================================
	# Start

	echo-segment --h1='Setup Rust'

	# =====================================
	# Install

	# clean
	if is-brew && test -n "$(brew-installed -- rustup rust || :)"; then
		if confirm --positive --ppid=$$ -- 'Rust is currently installed via homebrew. Confirm that you want Dorothy to use rustup to manage rust instead. Rustup is the official and only endorsed method of managing rust.'; then
			brew uninstall -f rustup rust
		fi
	fi

	# dependencies
	echo-segment --h2="Install build dependencies"
	setup-util-devel
	echo-segment --g2="Install build dependencies"

	# rustup
	if command-exists rustup; then
		echo-segment --h2="Update rustup"
		eval-helper --quiet -- rustup update
		echo-segment --g2="Update rustup"
	else
		# https://rust-lang.github.io/rustup/installation/other.html
		# rustup: Unable to run interactively. Run with -y to accept defaults, --help for additional options
		echo-segment --h2="Install rustup"
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --quiet --no-modify-path -y
		echo-segment --g2="Install rustup"
	fi

	# =====================================
	# Packages

	setup-util --installer="CARGO" -- "${CARGO_INSTALL[@]}"

	# =====================================
	# Finish

	echo-segment --g1='Setup Rust'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_rust "$@"
fi
