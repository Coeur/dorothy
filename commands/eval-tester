#!/usr/bin/env bash

function eval-tester() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			eval-tester <...options> -- <command> [<...args>]

			OPTIONS:
			--name=<test name>
			--ec=<expected exit code>
			--stdout=<expected stdout>
			--stderr=<expected stderr>
			--debug
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item args=() option_name='' option_ec='0' option_stdout='' option_stderr='' option_debug='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--name='*) option_name="${item#*--name=}" ;;
		'--ec='*) option_ec="${item#*--ec=}" ;;
		'--stdout='*) option_stdout="${item#*--stdout=}" ;;
		'--stderr='*) option_stderr="${item#*--stderr=}" ;;
		'--no-debug'* | '--debug'*)
			option_debug="$(get-flag-value debug --missing="$option_debug" -- "$item" | echo-affirmative)"
			;;
		'--')
			args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# overrides
	if test "$option_debug" = 'yes'; then
		set -x
		args=('debug-bash' "${args[@]}")
	fi

	# =====================================
	# Action

	# run the command
	local stdout stderr cmd ec fail='no' title=''
	stdout="$(mktemp)"
	stderr="$(mktemp)"
	cmd="$(echo-quote "${args[@]}" | echo-join ' ')"
	if test -n "$option_name"; then
		title="$option_name: $cmd"
	else
		title="$cmd"
	fi
	echo-segment --h3="$title"
	ec=0 && ("${args[@]}") >"$stdout" 2>"$stderr" || ec="$?"

	# test exit code
	if test "$option_ec" -ne "$ec"; then
		echo-style --red="Actual Exit Code [$ec]  !=  Expected Exit Code [$option_ec]"
		fail='yes'
	else
		echo-style --green="Actual Exit Code [$ec]  ==  Expected Exit Code [$option_ec]"
	fi

	# test stdout
	if test -n "$option_stdout"; then
		if test "$option_stdout" != "$(cat "$stdout")"; then
			echo-style --red="Actual Stdout  !=  Expected Stdout"
			echo-style --h3='< actual stdout>'
			cat "$stdout"
			echo-style --h3='</ actual stdout>'
			echo-style --h3='< expected stdout>'
			echo "$option_stdout"
			echo-style --h3='</ expected stdout>'
			fail='yes'
		else
			echo-style --green="Actual Stdout  ==  Expected Stdout"
		fi
	fi

	# test stderr
	if test -n "$option_stderr"; then
		if test "$option_stderr" != "$(cat "$stderr")"; then
			echo-style --red="Actual Stderr  !=  Expected Stderr"
			echo-style --h3='< actual stderr>'
			cat "$stderr"
			echo-style --h3='</ actual stderr>'
			echo-style --h3='< expected stderr>'
			echo "$option_stderr"
			echo-style --h3='</ expected stderr>'
			fail='yes'
		else
			echo-style --green="Actual Stderr  ==  Expected Stderr"
		fi
	fi

	# pass or fail
	if test "$fail" = 'yes'; then
		echo-segment --e3="$title"
		echo
		return 1
	else
		echo-segment --g3="$title"
		echo
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	eval-tester "$@"
fi
