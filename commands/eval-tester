#!/usr/bin/env bash

function eval_tester() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/tty.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			eval-tester <...options> -- <command> [<...args>]

			OPTIONS:
			--name=<test name>
			--status=<expected exit code>
			--stdout=<expected stdout>
			--stderr=<expected stderr>
			--debug
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item args=() option_name='' option_status='0' option_stdout='' option_stderr='' option_debug='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--name='*) option_name="${item#*--name=}" ;;
		'--status='*) option_status="${item#*--status=}" ;;
		'--stdout='*) option_stdout="${item#*--stdout=}" ;;
		'--stderr='*) option_stderr="${item#*--stderr=}" ;;
		'--no-debug'* | '--debug'*)
			option_debug="$(get-flag-value debug --missing="$option_debug" -- "$item" | echo-affirmative)"
			;;
		'--')
			args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# overrides
	if test "$option_debug" = 'yes'; then
		set -x
		args=('debug-bash' "${args[@]}")
	fi

	# =====================================
	# Action

	# run the command
	local cmd_status stdout stderr cmd fail='no' title=''
	cmd="$(echo-quote "${args[@]}" | echo-join ' ')"
	if test -n "$option_name"; then
		title="$option_name: $cmd"
	else
		title="$cmd"
	fi
	echo-segment --h3="$title"
	eval_capture --statusvar=cmd_status --stdoutvar=stdout --stderrvar=stderr -- \
		"${args[@]}"

	# test exit code
	if test "$option_status" -ne "$cmd_status"; then
		echo-style --red="Actual Exit Code [$cmd_status]  !=  Expected Exit Code [$option_status]"
		fail='yes'
	else
		echo-style --green="Actual Exit Code [$cmd_status]  ==  Expected Exit Code [$option_status]"
	fi

	# test stdout
	if test -n "$option_stdout"; then
		if test "$option_stdout" != "$stdout"; then
			echo-style --red="Actual Stdout  !=  Expected Stdout" $'\n' \
				--h3='< actual stdout>' $'\n' \
				"$stdout" $'\n' \
				--h3='</ actual stdout>' $'\n' \
				--h3='< expected stdout>' $'\n' \
				"$option_stdout" $'\n' \
				--h3='</ expected stdout>' $'\n' \
				fail='yes'
		else
			echo-style --green="Actual Stdout  ==  Expected Stdout"
		fi
	fi

	# test stderr
	if test -n "$option_stderr"; then
		if test "$option_stderr" != "$stderr"; then
			echo-style --red="Actual Stderr  !=  Expected Stderr" $'\n' \
				--h3='< actual stderr>' $'\n' \
				"$stderr" $'\n' \
				--h3='</ actual stderr>' $'\n' \
				--h3='< expected stderr>' $'\n' \
				"$option_stderr" $'\n' \
				--h3='</ expected stderr>' $'\n' \
				fail='yes'
		else
			echo-style --green="Actual Stderr  ==  Expected Stderr"
		fi
	fi

	# pass or fail
	if test "$fail" = 'yes'; then
		echo-segment --e3="$title" $'\n'
		return 1
	else
		echo-segment --g3="$title" $'\n'
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	eval_tester "$@"
fi
