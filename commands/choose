#!/usr/bin/env bash

# QUIRKS:
# - if there are more options than [$LINES - header], then this will fall apart

# TODOS:
# - [ ] limit the options output to [$LINES - header]
# - [ ] if one gets to $LINES, and there are truncated values, then scroll downwards
# - [ ] support $COLUMNS - if a menu item is larger than the column, then it will show all of it when active
# - [ ] ctrl n/p for navigating up/down.
# - [ ] `hjkl` vim arrow keys.

function choose_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	## choose-menu ##

	# timeout response not required
	eval-tester --name='timeout response not required' --status='60' --stderr='Read timed out [60], without selection.' \
		-- env NO_COLOR=yes choose --index --question='timeout response not required' --timeout=5 -- a b c

	# timeout response is required
	eval-tester --name='timeout response is required' --status='60' --stderr='Read timed out [60], without selection.' \
		-- env NO_COLOR=yes choose --index --question='timeout response is required' --timeout=5 --required -- a b c

	# default response
	{
		sleep 3
	} | eval-tester --name='default response' --stdout='1' --ignore-stderr \
		-- choose --index --question='default response' --timeout=2 --default=b -- a b c

	# default response should clear on movement
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
	} | eval-tester --name='default response should clear on movement' --status='60' --stdout='' --ignore-stderr \
		-- choose --index --question='default response should clear on movement' --timeout=10 --default=b -- a b c

	# default multi response
	{
		sleep 3
	} | eval-tester --name='default multi response' --stdout=$'1\n2' --ignore-stderr \
		-- choose --index --question='default multi response' --timeout=2 --multi --default=b --default=c -- a b c

	# default multi response should not clear on movement
	{
		sleep 3
		printf $'\eOB'
		sleep 3
	} | eval-tester --name='default multi response should not clear on movement' --stdout=$'1\n2' --ignore-stderr \
		-- choose --index --question='default multi response should not clear on movement' --timeout=10 --multi --default=b --default=c -- a b c

	# multiline defaults
	{
		sleep 3
	} | eval-tester --name='default multiline response' --stdout=$'1\n2\n3' --ignore-stderr \
		-- choose --index --question='default multiline response' --timeout=2 --multi --default=$'b\nB' --defaults=$'c\nd' -- a $'b\nB' c d

	# first selection
	{
		sleep 3
		echo
	} | eval-tester --name='first response' --stdout='0' \
		-- choose --index --question='first selection' -- a b c

	# second selection
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
		echo
	} | eval-tester --name='second response' --stdout='1' \
		-- choose --index --question='second selection' -- a b c

	# abort response via escape
	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='abort response via escape' \
		-- choose --index --question='abort response via escape' -- a b c

	## choose ##

	# timeout response not required
	eval-tester --name='timeout response not required' --status='0' --stderr=$'Read timed out [60], without selection.\nMenu timed out [60], no result, not required.' \
		-- env NO_COLOR=yes choose --question='timeout response not required' --timeout=5 -- a b c

	# timeout response is required
	eval-tester --name='timeout response is required' --status='60' --stderr=$'Read timed out [60], without selection.\nMenu timed out [60], no result, is required.' \
		-- env NO_COLOR=yes choose --question='timeout response is required' --timeout=5 --required -- a b c

	# default response
	{
		sleep 3
	} | eval-tester --name='default response' --stdout='b' --ignore-stderr \
		-- choose --question='default response' --timeout=2 --default=b -- a b c

	# default multi response
	{
		sleep 3
	} | eval-tester --name='default multi response' --stdout=$'b\nc' --ignore-stderr \
		-- choose --question='default multi response' --timeout=2 --multi --default=b --default=c -- a b c

	# first selection
	{
		sleep 3
		echo
	} | eval-tester --name='first selection' --stdout='a' \
		-- choose --question='first selection' -- a b c

	# second selection
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
		echo
	} | eval-tester --name='second selection' --stdout='b' \
		-- choose --question='second selection' -- a b c

	# abort response via escape
	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='abort response via escape' \
		-- choose --question='abort response via escape' -- a b c

	echo-style --g1="TEST: $0"
	return 0
)
function choose_() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/tty.bash"
	__require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Prompt the user to select an item from the menu, in a clean and robust way.

			USAGE:
			choose [...options] -- ...<item>

			OPTIONS:
			<question> | --question=<question>
			    Display this question in the prompt. If specified multiple times, they will be joined by newline, and only the first will be lingered.

			--label -- ...[<value> <label>]
			    Pass values and labels.

			--label=first -- ...[<label> <value>]
			    Pass values and labels, with the label first.

			--visual='\$LABEL' -- ...[<value> <label>]
			    Customise what is displayed to the user. It is eval'd. E.g.
			    To show label and value, use: --visual='\$LABEL [\$VALUE]'
			    If empty LABEL, then will equal VALUE.

			--return='\$VALUE' -- ...[<value> <label>]
			    Customise how the value is returned to the program. It is eval'd. E.g.
			    To return the visual, use: --return='\$VISUAL'
			    Tto return the index, use: --return='\$INDEX' or --index

			--default-exact=<value>
			--defaults-exact=<newline separated values>
			    Pre-select <value>s by exact matching.

			--default-fuzzy=<value>
			--defaults-fuzzy=<newline separated values>
			    Pre-select <value>s by fuzzy matching.

			--[no-]confirm=[yes|no]
			    Confirm the (default/entered) value(s) before continuing.

			--[no-]confirm-default=[YES|no] | --[no-]skip-default=[yes|NO]
			    Confirm the default value(s) (if provided) before continuing. Defaults to enabled.

			--[no-]confirm-input=[yes|NO]
			    Confirm the entered value(s) before continuing. Defaults to disabled.

			--[no-]required=[yes|NO]
			    Do not continue until a selection is made. Disable aborting the prompt.

			--[no-]multi=[yes|NO]
			    Multiple items can be selected.

			--[no-]hints=[YES|no]
			    Display interaction hint line.

			--[no-]linger=[yes|NO]
			    Whether the prompt should persist afterwards.

			--timeout=<timeout>
			    Custom timeout value in seconds.

			QUIRKS:
			If you wish to return the index, which is desirable in the case of when multiple values can be identical, use --index or --return='\$INDEX'.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item='' inputs=() tmp=()
	local option_question=()
	# trunk-ignore(shellcheck/SC2016)
	local option_label='no' option_visual='' option_return='$VALUE'
	local defaults_exact=() defaults_fuzzy=() option_confirm_default='yes' option_confirm_input='no'
	local option_required='no' option_multi='no'
	local option_linger='no' option_timeout=''
	local use_colors
	use_colors="$(echo-color-enabled --fallback=yes -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-color'* | '--color'*) ;; # handled by echo-color-enabled
		'--question='*) option_question+=("${item#*=}") ;;
		'--no-label'* | '--label'*)
			# label can be 'yes', 'no', and 'first'
			option_label="$(get-flag-value --fallback="$option_label" -- "$item")"
			;;
		'--visual='*) option_visual="${item#*=}" ;;
		'--return='*) option_return="${item#*=}" ;;
		# trunk-ignore(shellcheck/SC2016)
		'--index') option_return='$INDEX' ;;
		'--default-exact='* | '--default='*) defaults_exact+=("${item#*=}") ;;
		'--defaults-exact='* | '--defaults='*)
			mapfile -t tmp <<<"${item#*=}"
			defaults_exact+=("${tmp[@]}")
			;;
		'--default-fuzzy='*) defaults_fuzzy+=("${item#*=}") ;;
		'--defaults-fuzzy='*)
			mapfile -t tmp <<<"${item#*=}"
			defaults_fuzzy+=("${tmp[@]}")
			;;
		'--no-skip-default'* | '--skip-default'*)
			option_confirm_default="$(get-flag-value --non-affirmative --fallback="$option_confirm_default" -- "$item")"
			;;
		'--no-confirm-default'* | '--confirm-default'*)
			option_confirm_default="$(get-flag-value --affirmative --fallback="$option_confirm_default" -- "$item")"
			;;
		'--no-confirm-input'* | '--confirm-input'*)
			option_confirm_input="$(get-flag-value --affirmative --fallback="$option_confirm_input" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm_default="$(get-flag-value --affirmative --fallback="$option_confirm_default" -- "$item")"
			option_confirm_input="$(get-flag-value --affirmative --fallback="$option_confirm_input" -- "$item")"
			;;
		'--no-required'* | '--required'*)
			option_required="$(get-flag-value --affirmative --fallback="$option_required" -- "$item")"
			;;
		'--no-multi'* | '--multi'*)
			option_multi="$(get-flag-value --affirmative --fallback="$option_multi" -- "$item")"
			;;
		'--no-linger'* | '--linger'*)
			option_linger="$(get-flag-value --affirmative --fallback="$option_linger" -- "$item")"
			;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--')
			inputs+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_question+=("$item") ;;
		esac
	done

	# ensure items were provided
	if test "${#inputs[@]}" -eq 0; then
		help 'No <item>s provided.'
	fi

	# =====================================
	# Styles

	source "$DOROTHY/sources/config.sh"

	# styles.bash provides:
	# all style variables
	load_dorothy_config 'styles.bash'

	# select icons
	if test "$option_multi" = 'yes'; then
		style__icon_selected="$style__icon_multi_selected"
		style__icon_default="$style__icon_multi_default"
		style__icon_active="$style__icon_multi_active"
		style__icon_standard="$style__icon_multi_standard"
	else
		style__icon_selected="$style__icon_single_selected"
		style__icon_default="$style__icon_single_default"
		if test "$option_required" = 'yes'; then
			style__icon_active="$style__icon_single_active_required"
		else
			style__icon_active="$style__icon_single_active_optional"
		fi
		style__icon_standard="$style__icon_single_standard"
	fi

	# select colors
	if test "$use_colors" = 'yes'; then
		# spacers
		style__count_spacer="${style__color__count_spacer-}"
		# lines
		style__result_line="${style__color__result_line-}"
		style__end__result_line="${style__color_end__result_line-}"
		style__active_line="${style__color__active_line-}"
		style__end__active_line="${style__color_end__active_line-}"
		style__selected_line="${style__color__selected_line-}"
		style__end__selected_line="${style__color_end__selected_line-}"
		style__default_line="${style__color__default_line-}"
		style__end__default_line="${style__color_end__default_line-}"
		style__empty_line="${style__color__empty_line-}"
		style__end__empty_line="${style__color_end__empty_line-}"
		style__inactive_line="${style__color__inactive_line-}"
		style__end__inactive_line="${style__color_end__inactive_line-}"
		# legend
		style__legend="${style__color__legend-}"
		style__end__legend="${style__color_end__legend-}"
		style__key="${style__color__key-}"
		style__end__key="${style__color_end__key-}"
		# paging counts
		style__count_more="${style__color__count_more-}"
		style__end__count_more="${style__color_end__count_more-}"
		style__count_selected="${style__color__count_selected-}"
		style__end__count_selected="${style__color_end__count_selected-}"
		style__count_default="${style__color__count_default-}"
		style__end__count_default="${style__color_end__count_default-}"
		style__count_empty="${style__color__count_empty-}"
		style__end__count_empty="${style__color_end__count_empty-}"
		# paging headers
		style__bar_top="${style__color__bar_top-}"
		style__end__bar_top="${style__color_end__bar_top-}"
		style__bar_middle="${style__color__bar_middle-}"
		style__end__bar_middle="${style__color_end__bar_middle-}"
		style__bar_bottom="${style__color__bar_bottom-}"
		style__end__bar_bottom="${style__color_end__bar_bottom-}"
	else
		# spacers
		style__count_spacer="${style__nocolor__count_spacer-}"
		# lines
		style__result_line="${style__nocolor__result_line-}"
		style__end__result_line="${style__nocolor_end__result_line-}"
		style__active_line="${style__nocolor__active_line-}"
		style__end__active_line="${style__nocolor_end__active_line-}"
		style__selected_line="${style__nocolor__selected_line-}"
		style__end__selected_line="${style__nocolor_end__selected_line-}"
		style__default_line="${style__nocolor__default_line-}"
		style__end__default_line="${style__nocolor_end__default_line-}"
		style__empty_line="${style__nocolor__empty_line-}"
		style__end__empty_line="${style__nocolor_end__empty_line-}"
		style__inactive_line="${style__nocolor__inactive_line-}"
		style__end__inactive_line="${style__nocolor_end__inactive_line-}"
		# legend
		style__legend="${style__nocolor__legend-}"
		style__end__legend="${style__nocolor_end__legend-}"
		style__key="${style__nocolor__key-}"
		style__end__key="${style__nocolor_end__key-}"
		# paging counts
		style__count_more="${style__nocolor__count_more-}"
		style__end__count_more="${style__nocolor_end__count_more-}"
		style__count_selected="${style__nocolor__count_selected-}"
		style__end__count_selected="${style__nocolor_end__count_selected-}"
		style__count_default="${style__nocolor__count_default-}"
		style__end__count_default="${style__nocolor_end__count_default-}"
		style__count_empty="${style__nocolor__count_empty-}"
		style__end__count_empty="${style__nocolor_end__count_empty-}"
		# paging headers
		style__bar_top="${style__nocolor__bar_top-}"
		style__end__bar_top="${style__nocolor_end__bar_top-}"
		style__bar_middle="${style__nocolor__bar_middle-}"
		style__end__bar_middle="${style__nocolor_end__bar_middle-}"
		style__bar_bottom="${style__nocolor__bar_bottom-}"
		style__end__bar_bottom="${style__nocolor_end__bar_bottom-}"
	fi

	# =====================================
	# Menu

	# adjust question
	local question_title question_with_body
	if test "${#option_question[@]}" -ne 0; then # bash v3 compat
		if test -n "${option_question[0]}"; then
			question_title="$(echo-style --underline+bold="${option_question[0]}")"
			question_with_body="$(__print_lines "$question_title" "${option_question[@]:1}")"
		else
			question_title="$(__print_lines "${option_question[@]:1}")"
			question_with_body="$question_title"
		fi
	else
		question_title=''
		question_with_body=''
	fi

	# enforce question if lingering
	if test "$option_linger" = 'yes' -a -z "$question_title"; then
		help 'A <question >is required when using --linger'
	fi

	# generic helpers
	function __fuzzy_haystack_needle {
		local haystack="$1" needle="$2"
		[[ "$(__lowercase_string "$haystack")" == *"$(__lowercase_string "$needle")"* ]]
		return
	}

	# prepare label handling
	local inputs_step=1
	if test "$option_label" != 'no'; then
		# because of labels, we will iterate items two at a time
		inputs_step=2

		# verify we have a label for each value
		if is-odd -- "${#inputs[@]}"; then
			{
				echo-style --colors="$use_colors" --error="The amount of <label>s must match the amount of <value>s. See [$0 --help] for usage." $'\n' --bold='Make the below provide an even amount of items, to ensure there is a each \
			\
			be style_key_indented properly, use fmt if it exists in this mode for item <label >for <value >.'
				echo-verbose -- "${inputs[@]}"
			} >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi
	fi

	# generate the items
	# @todo add support for option_default_indexes if a user requests it
	local index item INDEX=-1 VALUE LABEL VISUAL RETURN items=() returns=() defaults=() default_indexes=() defaults_count=0 defaults_last_index=-1
	for ((index = 0; index < ${#inputs[@]}; index = index + inputs_step)); do
		# index considers inputs_step, INDEX is only each item (label/value combo)
		INDEX=$((INDEX + 1))

		# order of
		if test "$option_label" = 'no'; then
			VALUE="${inputs[index]}"
			LABEL="$VALUE"
			if test -z "$VALUE"; then
				echo-style --colors="$use_colors" --error="The $INDEX item at index $index was empty, all items must be non-empty." >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
		else
			if test "$option_label" = 'yes'; then
				VALUE="${inputs[index]}"
				LABEL="${inputs[index + 1]}"
			elif test "$option_label" = 'first'; then
				VALUE="${inputs[index + 1]}"
				LABEL="${inputs[index]}"
			else
				echo-style --colors="$use_colors" --error="Invalid label option [$option_label], it must be no, yes, or first" >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
			if test -z "$LABEL" -o -z "$VALUE"; then
				echo-style --colors="$use_colors" --error="Invalid label=[$LABEL] value=[$VALUE] combination, both must be non-empty" >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
		fi

		# enable if default
		if test "${#defaults_exact[@]}" -ne 0; then # bash v3 compat
			for item in "${defaults_exact[@]}"; do
				if test "$VALUE" = "$item"; then
					defaults[INDEX]='yes'
				fi
			done
		elif test "${#defaults_fuzzy[@]}" -ne 0; then # bash v3 compat
			for item in "${defaults_fuzzy[@]}"; do
				if __fuzzy_haystack_needle "$VALUE" "$item"; then
					defaults[INDEX]='yes'
				fi
			done
		fi

		# generate what is used
		if test -n "$option_visual"; then
			eval "VISUAL=\"$option_visual\""
		else
			VISUAL="$LABEL"
		fi
		if test -z "$VISUAL"; then
			echo-style --colors="$use_colors" --error="Invalid visual=[$VISUAL] for label=[$LABEL] value=[$VALUE], all must be non-empty" >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi
		if test -n "$option_return"; then
			eval "RETURN=\"$option_return\""
		else
			RETURN="$VALUE"
		fi
		if test -z "$RETURN"; then
			echo-style --colors="$use_colors" --error="Invalid return=[$RETURN] for label=[$LABEL] value=[$VALUE], all must be non-empty" >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi
		items+=("$VISUAL")
		returns+=("$RETURN")
	done
	defaults_count="${#defaults[@]}"
	default_indexes=("${!defaults[@]}")

	# handle default options
	local can_revert_to_defaults can_cancel
	if test "$defaults_count" -ne 0; then
		defaults_last_index="$((defaults_count - 1))"
		can_revert_to_defaults='yes'
		can_cancel='yes'
	else
		can_revert_to_defaults='no'
		if test "$option_required" = 'no'; then
			can_cancel='yes'
		else
			can_cancel='no'
		fi
	fi

	# prepare menu vars
	local \
		bin_gfmt='' \
		bin_gfold='' \
		bin_gwc='' \
		commentary='' \
		content_columns \
		items_count="${#items[@]}" \
		items_last_index \
		items_renders=() \
		items_rows=() \
		legend_cancel_content legend_cancel_rendering legend_cancel_rows \
		legend_cancel_rows \
		legend_choose_content legend_choose_rendering legend_choose_rows \
		legend_choose_content='' \
		legend_choose_rows \
		legend_confirm_content legend_confirm_rendering legend_confirm_rows \
		legend_confirm_content='' \
		legend_confirm_rows \
		menu_bottom_index_choose=0 \
		menu_bottom_index_confirm=0 \
		menu_cursor_choose=0 \
		menu_cursor_confirm_and_cancel=0 \
		menu_direction=1 \
		menu_header_rows \
		menu_header_shrunk='' \
		menu_header='' \
		menu_mode='choose' \
		menu_resized_to='' \
		menu_skip_render='no' \
		menu_status=0 \
		menu_top_index_choose=0 \
		menu_top_index_confirm=0 \
		paging_supported='yes' \
		paging_used \
		text__pick_nothing_cancel \
		text__pick_nothing_choose \
		text__pick_nothing_confirm \
		text__pick_cancel \
		text__pick_choose \
		text__pick_confirm \
		terminal_columns_prior=0 \
		terminal_columns=80 \
		terminal_margin=0 \
		terminal_rows_prior=0 \
		terminal_rows=10 \
		terminal_too_short='no' \
		tty_target
	items_last_index="$((items_count - 1))"
	mapfile -t items_renders < <(get-array "$items_count")
	mapfile -t items_rows < <(get-array "$items_count")

	# pick language
	text__pick_nothing_cancel='cancel with nothing'
	text__pick_nothing_choose='choose from nothing'
	text__pick_nothing_confirm='confirm with nothing'
	if test "$option_multi" = 'yes'; then
		text__pick_cancel='cancel to the'
		text__pick_choose='choose any of'
		text__pick_confirm='confirm the'
	else
		text__pick_cancel='cancel to the'
		text__pick_choose='choose one of the'
		text__pick_confirm='confirm the'
	fi

	# prepare paging
	tty_target="$(is-tty --fallback)"
	if test "$tty_target" = '/dev/stderr' || command-missing tput; then
		# fix [tput: No value for $TERM and no -T specified] errors when fetching columns and rows on CI
		paging_supported='no'
		style__hide_cursor=''
		style__show_cursor=''
		# @todo multi-line items won't
	else
		if is-mac; then
			bin_gfold="$(type -P 'gfold' 2>/dev/null || :)"
			bin_gfmt="$(type -P 'gfmt' 2>/dev/null || :)"
			bin_gwc="$(type -P 'gwc' 2>/dev/null || :)"
		else
			# we could support these on macos, however fmt does not support -t on macos (it is something different, so we'd have to manually do that)
			bin_gfold="$(type -P 'fold' 2>/dev/null || :)"
			bin_gfmt="$(type -P 'fmt' 2>/dev/null || :)"
			bin_gwc="$(type -P 'wc' 2>/dev/null || :)"
		fi
		if test -z "$bin_gfold" -o -z "$bin_gfmt" -o -z "$bin_gwc"; then
			paging_supported='no'
			# don't bother installing, as that will require brew, and we might now yet have brew installed
		fi
	fi

	# prepare hints
	if test -n "$question_with_body"; then
		# @todo only bold the first question line
		menu_header="$question_with_body"$'\n'
	fi
	function add_legend_keys {
		# extract the current state
		local name="$1" legend="$2" keys=("${@:3}") var content rendering total last index key shrunk rows
		var="${name}_rendering"
		rendering="${!var}"
		if test "$rendering" = 'no'; then
			return 0
		fi
		var="${name}_content"
		content="${!var}"
		total="${#keys[@]}"
		last="$((total - 1))"

		# render the legend keys
		# this could be cached, but no need, reitems_rows are rare enough it doesn't matter
		if test -n "$content"; then
			content+="$style__legend_legend_spacer"
		fi
		content+="${style__legend}${legend}${style__end__legend}${style__legend_key_spacer}"
		for ((index = 0; index < total; index++)); do
			key="${keys[index]}"
			content+="${style__key}${key}${style__end__key}"
			if test "$index" -ne "$last"; then
				content+="${style__key_key_spacer}"
			fi
		done
		shrunk="$(echo-trim-colors -- "$content" | "$bin_gfold" -w "$terminal_columns")"
		rows="$("$bin_gwc" -l <<<"$shrunk")"
		if test "$rows" -le 1; then
			eval "${name}_content=\"\$content\""
			eval "${name}_rows=\"\$rows\""
		else
			eval "${name}_rendering='no'"
		fi
	}
	function reset_legends {
		legend_cancel_content=''
		# trunk-ignore(shellcheck/SC2034)
		legend_cancel_rendering='yes'
		legend_cancel_rows=0
		legend_choose_content=''
		# trunk-ignore(shellcheck/SC2034)
		legend_choose_rendering='yes'
		legend_choose_rows=0
		legend_confirm_content=''
		# trunk-ignore(shellcheck/SC2034)
		legend_confirm_rendering='yes'
		legend_confirm_rows=0
	}
	function render_lengends {
		reset_legends
		# prefer key names if possible, as people don't know the symbols
		if test "$option_multi" = 'yes'; then
			add_legend_keys 'legend_cancel' 'CONFIRM CANCELATION' 'ENTER' 'E'
			add_legend_keys 'legend_choose' 'SELECT' 'SPACE'
			add_legend_keys 'legend_choose' 'CONFIRM' 'ENTER' 'E'
			add_legend_keys 'legend_confirm' 'CONFIRM SELECTION' 'ENTER' 'E'
		else
			add_legend_keys 'legend_cancel' 'CONFIRM CANCELATION' 'SPACE' 'ENTER' 'E'
			add_legend_keys 'legend_choose' 'SELECT' 'SPACE' 'ENTER' 'E'
			add_legend_keys 'legend_confirm' 'CONFIRM SELECTION' 'SPACE' 'ENTER' 'E'
		fi
		add_legend_keys 'legend_cancel' 'ABORT CANCELATION' 'ESC' 'Q'
		add_legend_keys 'legend_confirm' 'CHANGE SELECTION' 'ESC' 'Q'
		add_legend_keys 'legend_cancel' 'ABORT' 'CTRL C'
		add_legend_keys 'legend_confirm' 'ABORT' 'CTRL C'
		if test "$can_cancel" = 'yes'; then
			# cancel restores defaults (if multi) or selects none (if non-multi) and leaves
			add_legend_keys 'legend_choose' 'CANCEL' 'ESC' 'Q'
		fi
		if test "$items_count" -ne 1; then
			# [⬆⬇⇧] have alignment issues, use [↑↓]
			add_legend_keys 'legend_choose' 'UP' '↑' 'W' 'K'
			add_legend_keys 'legend_choose' 'DOWN' '↓' 'S' 'J'
			if test "$can_revert_to_defaults" = 'yes'; then
				add_legend_keys 'legend_choose' 'NEXT PREF' 'TAB'   # next preference
				add_legend_keys 'legend_choose' 'PREV PREF' '⇧ TAB' # prior preference
				add_legend_keys 'legend_choose' 'RESET' 'Z'         # reset preferences
				if test "$option_multi" = 'yes'; then
					add_legend_keys 'legend_choose' 'ALL/NONE' 'T'
				fi
			fi
			add_legend_keys 'legend_choose' 'PAGE UP' '←' 'A' 'H'   # 'fn ⇧ ↑'
			add_legend_keys 'legend_choose' 'PAGE DOWN' '→' 'D' 'L' # 'fn ⇧ ↓'
			add_legend_keys 'legend_choose' 'FIRST' 'HOME' 'fn ⇧ ←'
			add_legend_keys 'legend_choose' 'LAST' 'END' 'fn ⇧ →'
			if test "$option_multi" = 'yes'; then
				add_legend_keys 'legend_choose' 'SELECT & NEXT' '+' 'INSERT'
				add_legend_keys 'legend_choose' 'SELECT & PREV' '-'
				add_legend_keys 'legend_choose' 'UNSELECT & NEXT' 'DELETE'
				add_legend_keys 'legend_choose' 'UNSELECT & PREV' 'BACKSPACE'
			fi
		fi
	}
	function refresh_terminal_size {
		if test "$paging_supported" = 'no'; then
			paging_used='no'
			content_columns="$((terminal_columns - terminal_margin))"
			reset_legends
		else
			terminal_rows="$(tput lines)"
			terminal_columns="$(tput cols)"
			# only recalculate everything if the size actually changed from last time
			if test "$terminal_rows" -ne "$terminal_rows_prior" -o "$terminal_columns" -ne "$terminal_columns_prior"; then
				content_columns="$((terminal_columns - terminal_margin))"
				# calculate menu header size
				menu_header_shrunk="$(echo-trim-colors -- "$menu_header" | "$bin_gfold" -w "$terminal_columns")"
				menu_header_rows="$("$bin_gwc" -l <<<"${menu_header_shrunk}")"
				# refresh the legends
				render_lengends
				# move start index to current item, as otherwise it could be out of range
				if test "$terminal_rows" -lt "$terminal_rows_prior" -o "$terminal_columns" -lt "$terminal_columns_prior"; then
					# @todo we should detect if showing everything is possible before resorting to this
					menu_top_index_choose="$menu_cursor_choose"
					menu_bottom_index_choose="$menu_cursor_choose"
					menu_top_index_confirm="$menu_cursor_confirm_and_cancel"
					menu_bottom_index_confirm="$menu_cursor_confirm_and_cancel"
				fi
				# reset paging for new size
				paging_used='maybe'
				mapfile -t items_renders < <(get-array "$items_count")
				mapfile -t items_rows < <(get-array "$items_count")
				# update priors
				terminal_rows_prior="$terminal_rows"
				terminal_columns_prior="$terminal_columns"
			fi
			if test -n "$menu_resized_to" && test "$menu_resized_to" -gt "$terminal_rows"; then
				terminal_too_short='yes'
			else
				terminal_too_short='no'
			fi
		fi
	}

	# actions and selection modifications
	local selected=() selected_indexes=() selected_count=0 selected_last_index=-1
	function select_none {
		selected=()
		selected_indexes=()
		selected_count=0
		selected_last_index=-1
	}
	if test "$option_multi" = 'yes'; then
		function unselect_index {
			local index
			for index in "$@"; do
				if test "${selected[index]-}" = 'yes'; then
					unset 'selected[index]'
				fi
			done
			selected_indexes=("${!selected[@]}")
			selected_count="${#selected[@]}"
			selected_last_index="$((selected_count - 1))"
		}
		function select_index {
			local index
			for index in "$@"; do
				if test "${selected[index]-}" != 'yes'; then
					selected[index]='yes'
				fi
			done
			selected_indexes=("${!selected[@]}")
			selected_count="${#selected[@]}"
			selected_last_index="$((selected_count - 1))"
		}
		function toggle_index {
			local index
			for index in "$@"; do
				if test "${selected[index]-}" = 'yes'; then
					unset 'selected[index]'
				else
					selected[index]='yes'
				fi
			done
			selected_indexes=("${!selected[@]}")
			selected_count="${#selected[@]}"
			selected_last_index="$((selected_count - 1))"
		}
		function select_all {
			select_index "${!items[@]}"
		}
		function select_defaults {
			if test "$defaults_count" -ne 0; then # bash v3 compat
				select_index "${default_indexes[@]}"
			fi
		}
		function action_toggle_cursor {
			if test "$menu_mode" = 'choose'; then
				toggle_index "$menu_cursor_choose"
				if test "$menu_cursor_choose" -eq "$menu_bottom_index_choose"; then
					# don't cause a new page, instead keep rendering it as the bottom item
					menu_direction=-1
				fi
			else
				toggle_index "$menu_cursor_confirm_and_cancel"
				if test "$menu_cursor_confirm_and_cancel" -eq "$menu_bottom_index_confirm"; then
					# don't cause a new page, instead keep rendering it as the bottom item
					menu_direction=-1
				fi
			fi
		}
		function action_select_and_next {
			if test "$menu_mode" = 'choose'; then
				select_index "$menu_cursor_choose"
			else
				select_index "$menu_cursor_confirm_and_cancel"
			fi
			action_down
		}
		function action_unselect_and_next {
			if test "$menu_mode" = 'choose'; then
				unselect_index "$menu_cursor_choose"
			else
				unselect_index "$menu_cursor_confirm_and_cancel"
			fi
			action_down
		}
		function action_select_and_prior {
			if test "$menu_mode" = 'choose'; then
				select_index "$menu_cursor_choose"
			else
				select_index "$menu_cursor_confirm_and_cancel"
			fi
			action_up
		}
		function action_unselect_and_prior {
			if test "$menu_mode" = 'choose'; then
				unselect_index "$menu_cursor_choose"
			else
				unselect_index "$menu_cursor_confirm_and_cancel"
			fi
			action_up
		}
		function action_all {
			select_all
		}
	else
		function select_only_index {
			if test "$#" -ne 0; then
				selected=()
				selected["$1"]='yes'
				selected_indexes=("${!selected[@]}")
				selected_count=1
				selected_last_index=0
				menu_cursor_choose="$1"
				menu_cursor_confirm_and_cancel=0
			fi
		}
		function select_defaults {
			# select only first preference
			if test "$defaults_count" -ne 0; then
				select_only_index "${default_indexes[0]}"
			fi
		}
		function action_select_cursor {
			if test "$menu_mode" = 'choose'; then
				select_only_index "$menu_cursor_choose"
			else
				select_only_index "$menu_cursor_confirm_and_cancel"
			fi
		}
	fi
	function select_only_defaults {
		select_none # needed in case there are no defaults, we still want to erase selection
		select_defaults
	}
	function action_none {
		select_none
	}
	function action_revert {
		# if no defaults, removes selection
		select_none
		select_defaults
	}
	function action_jump {
		local index="$1"
		# jump to number
		if test "$menu_mode" = 'choose'; then
			if test "$index" -le 1; then
				menu_cursor_choose=0
			elif test "$index" -ge "$items_count"; then
				menu_cursor_choose="$items_last_index"
			else
				menu_cursor_choose="$((index - 1))"
			fi
		else
			if test "$index" -le 1; then
				menu_cursor_confirm_and_cancel=0
			elif test "$index" -ge "$selected_count"; then
				menu_cursor_confirm_and_cancel="$selected_last_index"
			else
				menu_cursor_confirm_and_cancel="$((index - 1))"
			fi
		fi

	}
	function action_up {
		if test "$menu_mode" = 'choose'; then
			if test "$menu_cursor_choose" -le 0; then
				menu_cursor_choose="$items_last_index"
			else
				menu_cursor_choose="$((menu_cursor_choose - 1))"
			fi
		else
			if test "$menu_cursor_confirm_and_cancel" -le 0; then
				menu_cursor_confirm_and_cancel="$selected_last_index"
			else
				menu_cursor_confirm_and_cancel="$((menu_cursor_confirm_and_cancel - 1))"
			fi
		fi
	}
	function action_down {
		if test "$menu_mode" = 'choose'; then
			if test "$menu_cursor_choose" -ge "$items_last_index"; then
				menu_cursor_choose=0
			else
				menu_cursor_choose="$((menu_cursor_choose + 1))"
				if test "$menu_cursor_choose" -ge "$menu_bottom_index_choose"; then
					# scroll down by one, rather than render whole new page
					menu_direction=-1
				fi
			fi
		else
			if test "$menu_cursor_confirm_and_cancel" -ge "$selected_last_index"; then
				menu_cursor_confirm_and_cancel=0
			else
				menu_cursor_confirm_and_cancel="$((menu_cursor_confirm_and_cancel + 1))"
				if test "$menu_cursor_confirm_and_cancel" -ge "$menu_bottom_index_confirm"; then
					# scroll down by one, rather than render whole new page
					menu_direction=-1
				fi
			fi
		fi
	}
	function action_page_up {
		if test "$menu_mode" = 'choose'; then
			if test "$menu_cursor_choose" -le "$menu_top_index_choose"; then
				menu_direction=-1
			else
				menu_cursor_choose="$menu_top_index_choose"
			fi
		else
			if test "$menu_cursor_confirm_and_cancel" -le "$menu_top_index_confirm"; then
				menu_direction=-1
			else
				menu_cursor_confirm_and_cancel="$menu_top_index_confirm"
			fi
		fi
	}
	function action_page_down {
		if test "$menu_mode" = 'choose'; then
			if test "$menu_cursor_choose" -ge "$menu_bottom_index_choose"; then
				menu_direction=1
			else
				menu_cursor_choose="$menu_bottom_index_choose"
				menu_direction=-1
			fi
		else
			if test "$menu_cursor_confirm_and_cancel" -ge "$menu_bottom_index_confirm"; then
				menu_direction=1
			else
				menu_cursor_confirm_and_cancel="$menu_bottom_index_confirm"
				menu_direction=-1
			fi
		fi
	}
	function action_first {
		if test "$menu_mode" = 'choose'; then
			menu_cursor_choose=0
		else
			menu_cursor_confirm_and_cancel=0
		fi
	}
	function action_last {
		if test "$menu_mode" = 'choose'; then
			menu_cursor_choose="$items_last_index"
		else
			menu_cursor_confirm_and_cancel="$selected_last_index"
		fi
	}
	function __is_preference {
		local index="$1"
		test "${selected[index]-}" = 'yes' -o "${defaults[index]-}" = 'yes'
	}
	function action_next_preference {
		if test "$menu_mode" != 'choose'; then
			action_down
			return
		fi
		local index
		# next selection
		for ((index = menu_cursor_choose + 1; index <= items_last_index; index++)); do
			if __is_preference "$index"; then
				menu_cursor_choose="$index"
				return 0
			fi
		done
		# earlier selection
		for ((index = 0; index < menu_cursor_choose; index++)); do
			if __is_preference "$index"; then
				menu_cursor_choose="$index"
				return 0
			fi
		done
		# no selection
		return 0
	}
	function action_prior_preference {
		if test "$menu_mode" != 'choose'; then
			action_up
			return
		fi
		local index
		# go backwards to the start
		for ((index = menu_cursor_choose - 1; index >= 0; index--)); do
			if __is_preference "$index"; then
				menu_cursor_choose="$index"
				return 0
			fi
		done
		# go backwards from the end
		for ((index = items_last_index; index > menu_cursor_choose; index--)); do
			if __is_preference "$index"; then
				menu_cursor_choose="$index"
				return 0
			fi
		done
		# no selection
		return 0
	}
	function set_menu_mode {
		local new="$1"
		# sanity check if confirm is appropriate
		if test "$option_required" = 'yes'; then
			if test "$new" = 'confirm'; then
				if test "$selected_count" -eq 0; then
					menu_skip_render='yes'
					menu_mode='choose'
					__print_string "$style__bell" >"$tty_target"
					return 0
				fi
			elif test "$new" = 'cancel'; then
				if test "$defaults_count" -eq 0; then
					menu_skip_render='yes'
					menu_mode='choose'
					__print_string "$style__bell" >"$tty_target"
					return 0
				fi
			fi
		fi
		# check if we need to recalculate paging and update the mode
		if test "$new" != "$menu_mode"; then
			paging_used='maybe'
			menu_mode="$new"
			if test "$new" != 'choose'; then
				# reset cursor
				menu_cursor_confirm_and_cancel=0
			fi
		fi
		# all done
		return 0
	}
	local debug_counter=0
	function render_menu {
		local \
			bar_bottom_content='' \
			bar_bottom_selected_count=0 \
			bar_bottom_unselected_defaults_count=0 \
			bar_middle_content='' \
			bar_middle_selected_count=0 \
			bar_middle_unselected_defaults_count=0 \
			bar_top_content='' \
			bar_top_selected_count=0 \
			bar_top_unselected_defaults_count=0 \
			index \
			item_index=0 \
			item_line \
			item_original \
			item_rendered \
			item_rows \
			items_bundled_rows=0 \
			items_bundled='' \
			line_prefix \
			line_begin \
			line_end \
			menu_bottom_index \
			menu_cursor \
			menu_index="${1-}" \
			menu_last_index \
			menu_legend_content \
			menu_legend_rows \
			menu_rows=0 \
			menu_title='' \
			menu_top_index \
			menu_total \
			page_count \
			verb \
			verb_total
		# refresh the terminal size
		refresh_terminal_size
		# fetch the appropriate size, must be done after refresh_terminal_size
		if test "$menu_mode" = 'choose'; then
			verb='Selected'
			menu_bottom_index="$menu_bottom_index_choose"
			menu_cursor="$menu_cursor_choose"
			menu_legend_content="$legend_choose_content"
			menu_legend_rows="$legend_choose_rows"
			menu_total="$items_count"
			menu_last_index="$items_last_index"
			menu_top_index="$menu_top_index_choose"
		else
			if test "$menu_mode" = 'cancel'; then
				verb='Cancel to'
				menu_total="$defaults_count"
				menu_last_index="$defaults_last_index"
				menu_legend_content="$legend_cancel_content"
				menu_legend_rows="$legend_cancel_rows"
			else
				verb='Confirm'
				menu_total="$selected_count"
				menu_last_index="$selected_last_index"
				menu_legend_content="$legend_confirm_content"
				menu_legend_rows="$legend_confirm_rows"
			fi
			# @todo, consider having these and cursors for cancel as well, instead of sharing with confirm
			menu_bottom_index="$menu_bottom_index_confirm"
			menu_cursor="$menu_cursor_confirm_and_cancel"
			menu_top_index="$menu_top_index_confirm"
		fi
		# adjust page direction
		if test -z "$menu_index"; then
			if test "$menu_cursor" -le 0; then
				menu_cursor=0
				menu_index="$menu_cursor"
				menu_direction=1
			elif test "$menu_cursor" -ge "$menu_last_index"; then
				menu_cursor="$menu_last_index"
				menu_index="$menu_cursor"
				menu_direction=-1
			elif test "$menu_cursor" -le "$menu_top_index"; then
				menu_index="$menu_cursor"
			elif test "$menu_cursor" -ge "$menu_bottom_index"; then
				menu_index="$menu_cursor"
				menu_direction=-1
			elif test "$menu_direction" -eq 1; then
				# maintain the same page, as the cursor is within it
				menu_index="$menu_top_index"
			else
				# maintain the same page, as the cursor is within it
				menu_index="$menu_bottom_index"
			fi
		fi
		# @TODO HANDLE NO SELECTED OPTIONS BETTER, PERHAPS AN IF HERE
		menu_top_index="$menu_index"
		menu_bottom_index="$menu_index"
		menu_resized_to=''
		# debug
		function debug {
			printf '%s' $'\e]0;'"c=$menu_cursor,mi=$menu_index,ii=$item_index,d=$menu_direction,t=$menu_top_index,b=$menu_bottom_index,l=$menu_last_index,u=$paging_used,r=$menu_rows,mr=$menu_resized_to,tr=$terminal_rows,tts=$terminal_too_short,c=$debug_counter"$'\a' >"$tty_target"
			debug_counter="$((debug_counter + 1))"
		}
		# e.g. go to second page, navigate half way, go page up
		for (( ; menu_index >= 0 && menu_index <= menu_last_index; menu_index += menu_direction)); do
			if test "$menu_mode" = 'choose'; then
				item_index="$menu_index"
			elif test "$menu_mode" = 'cancel'; then
				item_index="${default_indexes[menu_index]}"
			else
				item_index="${selected_indexes[menu_index]}"
			fi
			# determine prefix
			if test "$menu_index" -eq "$menu_cursor"; then
				line_begin="$style__active_line"
				line_prefix="$style__indent_active"
				line_end="$style__end__active_line"
			else
				line_begin="$style__inactive_line"
				line_prefix="$style__indent_inactive"
				line_end="$style__end__inactive_line"
			fi
			if test "${selected[item_index]-}" = 'yes' -a "$menu_mode" != 'cancel'; then
				line_begin+="$style__selected_line"
				line_prefix+="${style__icon_selected}"
				line_end+="$style__end__selected_line"
				bar_middle_selected_count="$((bar_middle_selected_count + 1))"
			elif test "${defaults[item_index]-}" = 'yes'; then
				line_begin+="$style__default_line"
				line_prefix+="${style__icon_default}"
				line_end+="$style__end__default_line"
				bar_middle_unselected_defaults_count="$((bar_middle_unselected_defaults_count + 1))"
			elif test "$menu_index" -eq "$menu_cursor"; then
				line_prefix+="${style__icon_active}"
			else
				line_prefix+="${style__icon_standard}"
			fi
			line_prefix="${line_begin}${line_prefix}"

			# determine paging
			if test "$paging_used" = 'no'; then
				# paging is no longer needed, no recalculations needed
				if test -n "${items_renders[item_index]}"; then
					# use rendered item (in case it needed to be formatted if it exists)
					item_line="${line_prefix}${items_renders[item_index]}${line_end}"$'\n'
				else
					# otherwise use original item
					item_line="${line_prefix}${items[item_index]}${line_end}"$'\n'
				fi
			else
				# paging is needed, so we must recalculate bundled size
				if test -n "${items_renders[item_index]}"; then
					item_rendered="${items_renders[item_index]}"
					item_rows="${items_rows[item_index]}"
				else
					item_original="${items[item_index]}"
					if test "${#item_original}" -lt "$content_columns" && [[ $item_original != *$'\n'* && $item_original != *$'\t'* ]]; then
						# no need to format item, as it is small enough
						item_rendered="$item_original"
						item_rows=1
						items_renders[item_index]="$item_rendered"
						items_rows[item_index]="$item_rows"
					else
						# need to format item, as it is too big
						item_rendered="$("$bin_gfmt" -t -w "$content_columns" <<<"$item_original")"
						item_rendered="${item_rendered//$'\n'/$'\n     '}"
						item_rows="$("$bin_gwc" -l <<<"${item_rendered}")"
						items_renders[item_index]="$item_rendered"
						items_rows[item_index]="$item_rows"
					fi
				fi
				# calculate total menu size
				menu_rows="$((menu_header_rows + items_bundled_rows + item_rows + menu_legend_rows + 3))"
				item_line="${line_prefix}${item_rendered}${line_end}"$'\n'
				items_bundled_rows="$((items_bundled_rows + item_rows))"
				if test "$menu_rows" -gt "$terminal_rows"; then
					if test -z "$items_bundled"; then
						# we need to reszie the terminal
						menu_resized_to="$menu_rows"
					else
						# we already have content rendered, so exit with what we have
						break
					fi
				fi
			fi
			# append or prepend the line to the bundle
			# item line will always be defined, no need for test -n
			if test "$menu_direction" -eq 1; then
				items_bundled+="$item_line"
				menu_bottom_index="$menu_index"
			else
				items_bundled="$item_line$items_bundled"
				menu_top_index="$menu_index"
			fi
			if test -n "$menu_resized_to"; then
				break
			fi
		done

		# save paging changes
		if test "$menu_mode" = 'choose'; then
			menu_top_index_choose="$menu_top_index"
			menu_bottom_index_choose="$menu_bottom_index"
		else
			menu_top_index_confirm="$menu_top_index"
			menu_bottom_index_confirm="$menu_bottom_index"
		fi

		# calculate paging needed
		if test "$paging_supported" = 'yes'; then
			if test "$menu_top_index" -eq 0 -a "$menu_bottom_index" -eq "$menu_last_index"; then
				paging_used='no'
			else
				paging_used='yes'
			fi
		fi

		# if paging was used, and we could support more rows, then re-render in the other direction
		# @todo update menu_index instead of cursor, so that cursor remains sensible (optional, may not be a good idea)
		if test "$paging_used" = 'yes' -a "$menu_rows" -lt "$terminal_rows"; then
			if test "$menu_direction" -eq -1 -a "$menu_top_index" -eq 0; then
				menu_direction=1
				render_menu 0
				return
			elif test "$menu_direction" -eq 1 -a "$menu_bottom_index" -eq "$menu_last_index"; then
				menu_direction=-1
				render_menu "$menu_last_index"
				return
			fi
		fi

		# reset direction
		if test "$menu_direction" -eq -1; then
			menu_direction=1
		fi

		# resize the terminal if it is too short?
		if test -n "$menu_resized_to"; then
			menu_title+=$'\e[8;'"$menu_resized_to"';t'
		fi

		# calculate page top, middle, bottom
		if test -z "$items_bundled"; then
			# no items, no need to count
			page_count=0
			if test "$menu_mode" = 'choose'; then
				bar_top_content+="${style__indent_bar}${style__bar_top}${style__count_empty}${text__pick_nothing_choose} below${style__end__count_empty}"
				items_bundled="${style__active_line}${style__empty_line}${style__indent_active}[ nothing provided ]${style__end__empty_line}${style__end__active_line}"$'\n'
				bar_bottom_content+="${style__indent_bar}${style__bar_bottom}${style__count_empty}${text__pick_nothing_choose} above${style__end__count_empty}"
			elif test "$menu_mode" = 'cancel'; then
				bar_top_content+="${style__indent_bar}${style__bar_top}${style__count_default}${text__pick_nothing_cancel} selected${style__end__count_empty}"
				items_bundled="${style__active_line}${style__empty_line}${style__indent_active}[ no selection ]${style__end__empty_line}${style__end__active_line}"$'\n'
				bar_bottom_content+="${style__indent_bar}${style__bar_bottom}${style__count_default}${text__pick_nothing_cancel} selected${style__end__count_empty}"
			else
				bar_top_content+="${style__indent_bar}${style__bar_top}${style__count_selected}${text__pick_nothing_confirm} selected${style__end__count_empty}"
				items_bundled="${style__active_line}${style__empty_line}${style__indent_active}[ no selection ]${style__end__empty_line}${style__end__active_line}"$'\n'
				bar_bottom_content+="${style__indent_bar}${style__bar_bottom}${style__count_selected}${text__pick_nothing_confirm} selected${style__end__count_empty}"
			fi
		elif test "$paging_supported" = 'yes'; then
			# has items, do counts
			page_count="$((menu_bottom_index - menu_top_index + 1))"

			# calculate header counts
			if test "$menu_top_index" -eq 0; then
				if test "$menu_mode" = 'choose'; then
					# choose: fetch all below
					bar_top_content+="${style__indent_bar}${style__bar_top}${style__count_more}${text__pick_choose} ${menu_total} below${style__end__count_more}"
					bar_top_selected_count="$selected_count"
					for index in "${default_indexes[@]}"; do
						if test "${selected[index]-}" = 'yes'; then
							continue
						fi
						bar_top_unselected_defaults_count="$((bar_top_unselected_defaults_count + 1))"
					done
				elif test "$menu_mode" = 'cancel'; then
					# cancel: fetch all defaults below
					bar_top_content+="${style__indent_bar}${style__bar_top}${style__count_default}${text__pick_cancel} ${menu_total} defaults below${style__end__count_default}"
				else
					# confirm: confirm all selected below
					bar_top_content+="${style__indent_bar}${style__bar_top}${style__count_selected}${text__pick_confirm} ${menu_total} selected below${style__end__count_selected}"
				fi
			else
				if test "$menu_mode" = 'choose'; then
					# choose: fetch more above
					bar_top_content+="${style__indent_bar}${style__bar_middle}${style__count_more}${menu_top_index} more above${style__end__count_more}"
					for index in "${selected_indexes[@]}"; do
						if test "$index" -ge "$menu_top_index"; then
							break
						fi
						bar_top_selected_count="$((bar_top_selected_count + 1))"
					done
					for index in "${default_indexes[@]}"; do
						if test "$index" -ge "$menu_top_index"; then
							break
						fi
						if test "${selected[index]-}" = 'yes'; then
							continue
						fi
						bar_top_unselected_defaults_count="$((bar_top_unselected_defaults_count + 1))"
					done
				elif test "$menu_mode" = 'cancel'; then
					bar_top_content+="${style__indent_bar}${style__bar_middle}${style__count_default}${menu_top_index} more defaults above${style__end__count_default}"
				else
					bar_top_content+="${style__indent_bar}${style__bar_middle}${style__count_selected}${menu_top_index} more selected above${style__end__count_selected}"
				fi
			fi

			# calculate bottom counts
			if test "$menu_bottom_index" -eq "$menu_last_index"; then
				if test "$menu_mode" = 'choose'; then
					# choose: fetch all above
					bar_bottom_content+="${style__indent_bar}${style__bar_bottom}${style__count_more}${text__pick_choose} ${menu_total} above${style__end__count_more}"
					bar_bottom_selected_count="$selected_count"
					for index in "${default_indexes[@]}"; do
						if test "${selected[index]-}" = 'yes'; then
							continue
						fi
						bar_bottom_unselected_defaults_count="$((bar_bottom_unselected_defaults_count + 1))"
					done
				elif test "$menu_mode" = 'cancel'; then
					# cancel: fetch all defaults above
					bar_bottom_content+="${style__indent_bar}${style__bar_bottom}${style__count_default}${text__pick_cancel} ${menu_total} defaults above${style__end__count_default}"
				else
					# confirm: confirm all selected above
					bar_bottom_content+="${style__indent_bar}${style__bar_bottom}${style__count_selected}${text__pick_confirm} ${menu_total} selected above${style__end__count_selected}"
				fi
			else
				index="$((menu_last_index - menu_bottom_index))"
				if test "$menu_mode" = 'choose'; then
					# choose: fetch more below
					bar_bottom_content+="${style__indent_bar}${style__bar_middle}${style__count_more}${index} more below"
					for index in "${selected_indexes[@]}"; do
						if test "$index" -le "$menu_bottom_index"; then
							continue
						fi
						bar_bottom_selected_count="$((bar_bottom_selected_count + 1))"
					done
					for index in "${default_indexes[@]}"; do
						if test "$index" -le "$menu_bottom_index" -o "${selected[index]-}" = 'yes'; then
							continue
						fi
						bar_bottom_unselected_defaults_count="$((bar_bottom_unselected_defaults_count + 1))"
					done
				elif test "$menu_mode" = 'cancel'; then
					# cancel: fetch more defaults below
					bar_bottom_content+="${style__indent_bar}${style__bar_middle}${style__count_default}cancel to ${index} more defaults below${style__end__count_default}"
				else
					# confirm: confirm more selected below
					bar_bottom_content+="${style__indent_bar}${style__bar_middle}${style__count_selected}confirm ${index} more selected below${style__end__count_selected}"
				fi
			fi

			# add selected and unslected defaults counts
			if test "$menu_mode" = 'choose'; then
				# choose: add top counts
				if test "$bar_top_selected_count" -ne 0; then
					bar_top_content+="${style__count_spacer}${style__count_selected}${bar_top_selected_count} selected${style__end__count_selected}"
				fi
				if test "$bar_top_unselected_defaults_count" -ne 0; then
					bar_top_content+="${style__count_spacer}${style__count_default}${bar_top_unselected_defaults_count} unselected defaults${style__end__count_default}"
				fi
				# choose: add middle counts
				if test "$paging_used" = 'yes'; then
					bar_middle_content+="${style__indent_bar}${style__bar_middle}${style__count_more}${page_count} visible${style__end__count_more}"
					if test "$bar_middle_selected_count" -ne 0; then
						bar_middle_content+="${style__count_spacer}${style__count_selected}${bar_middle_selected_count} selected${style__end__count_selected}"
					fi
					if test "$bar_middle_unselected_defaults_count" -ne 0; then
						bar_middle_content+="${style__count_spacer}${style__count_default}${bar_middle_unselected_defaults_count} unselected defaults${style__end__count_default}"
					fi
				fi
				# choose: add bottom counts
				if test "$bar_bottom_selected_count" -ne 0; then
					bar_bottom_content+="${style__count_spacer}${style__count_selected}${bar_bottom_selected_count} selected${style__end__count_selected}"
				fi
				if test "$bar_bottom_unselected_defaults_count" -ne 0; then
					bar_bottom_content+="${style__count_spacer}${style__count_default}${bar_bottom_unselected_defaults_count} unselected defaults${style__end__count_default}"
				fi
			elif test "$menu_mode" = 'cancel'; then
				# cancel: add middle counts
				bar_middle_content+="${style__indent_bar}${style__bar_middle}${style__count_default}${page_count} visible${style__end__count_default}"
			else
				# confirm: add middle counts
				bar_middle_content+="${style__indent_bar}${style__bar_middle}${style__count_selected}${page_count} visible${style__end__count_selected}"
			fi
		fi
		bar_top_content+="${style__end__bar_top}"$'\n'
		if test -n "$bar_middle_content"; then
			bar_middle_content+="${style__end__bar_middle}"$'\n'
		fi
		bar_bottom_content+="${style__end__bar_bottom}"$'\n'

		# output menu
		if test "$menu_mode" = 'choose'; then
			verb_total="$selected_count"
		else
			verb_total="$menu_total"
		fi
		if test "$paging_used" = 'yes'; then
			menu_title+=$'\e]0;'"👉 ${verb} ${verb_total} of ${items_count} items 💁‍♀️ Viewing ${page_count} of ${items_count} items [$((menu_top_index + 1))…$((menu_cursor + 1))…$((menu_bottom_index + 1))] 👈"$'\a'
		else
			menu_title+=$'\e]0;'"👉 ${verb} ${verb_total} of ${items_count} items 👈"$'\a'
		fi
		printf '%s' "${style__erase_screen}${style__hide_cursor}${menu_title}${menu_header}${bar_top_content}${bar_middle_content}${items_bundled}${bar_bottom_content}${menu_legend_content}" >"$tty_target"
		if test -n "$menu_resized_to"; then
			refresh_terminal_size
			if test "$terminal_too_short" = 'yes'; then
				menu_title=$'\e]0;'"‼️ TERMINAL TOO SHORT ‼️"$'\a'
				local additional_rows="$((menu_resized_to - terminal_rows))"
				printf '%s' "${style__erase_screen}${style__hide_cursor}${menu_title}${style__color__error}You have been prompted to make a menu selection, however the terminal does not have enough vertical height to make that selection.${style__color_end__error}"$'\n'"${style__color__notice}Increase the terminal height or reduce font size to proceed, then press any key.${style__color_end__notice}"$'\n'"Terminal rows = ${terminal_rows}, Needed rows = ${menu_resized_to}, Additional rows = ${additional_rows}"$'\n' >"$tty_target"
			fi
		fi
	}
	function render_result {
		local render="$question_title" index
		if test -n "$commentary"; then
			if test -n "$render"; then
				render+=" $commentary"
			else
				render="$commentary"
			fi
		fi
		if test -n "$render"; then
			render+=$'\n'
		fi
		if test "$menu_status" -eq 0; then
			# render linger or temp
			if test "$option_linger" = 'yes'; then
				# add results only if lingering, as there may be more than terminal height, so clearing wouldn't support such
				for index in "${selected_indexes[@]}"; do
					if test "${selected[index]}" = 'yes'; then
						render+="${style__result_line}${style__icon_selected}${items[index]}${style__end__result_line}"$'\n'
					fi
				done
				if test "$selected_count" -eq 0; then
					render+="${style__result_line}[ nothing selected ]${style__end__result_line}"$'\n'
				fi
				# inform
				__print_string "$render" >"$tty_target"
			elif test -n "$commentary"; then
				# inform to stderr, consistent with ask, choose, confirm
				__print_string "$render" >/dev/stderr
				# sleep 3
				# echo-clear-lines --stdin < <(__print_string "$render") >/dev/stderr
			fi
			# stdout
			for index in "${selected_indexes[@]}"; do
				if test "${selected[index]}" = 'yes'; then
					__print_line "${returns[index]}"
				fi
			done
		else
			# inform
			if test -n "$commentary"; then
				if test "$option_linger" = 'yes'; then
					__print_line "$render" >"$tty_target"
				else
					__print_line "$render" >/dev/stderr
				fi
			fi
			return "$menu_status"
		fi
	}
	function handle_menu {
		local input read_status
		# action
		function show_cursor {
			__print_string "$style__show_cursor" >"$tty_target"
			trap - EXIT
		}
		trap show_cursor EXIT
		tty_start
		while true; do
			# (re-)render the menu?
			if test "$menu_skip_render" = 'no'; then
				render_menu
			fi
			menu_skip_render='no'

			# handle the response
			eval_capture --statusvar=read_status --stdoutvar=input -- read-key --timeout="$option_timeout"
			if test "$read_status" -eq 60; then
				if test "$selected_count" -ne 0; then
					commentary="$(echo-style --yellow='[timed out: using defaults]')"
					action_revert
					set_menu_mode 'finished'
				elif test "$option_required" = 'no'; then
					commentary="$(echo-style --yellow='[timed out: not required]')"
					action_none
					set_menu_mode 'finished'
				else
					commentary="$(echo-style --red='[input failure: timed out: required]')"
					menu_status="$read_status" # error cases no seleciotn
					set_menu_mode 'finished'
				fi
			elif test "$read_status" -ne 0; then
				# some other failure
				commentary="$(echo-style --red="[input failure: $read_status]")"
				menu_status="$read_status" # error causes no selection
				set_menu_mode 'finished'
			elif test "$terminal_too_short" = 'yes'; then
				: # continue
			elif is-digit -- "$input"; then
				action_jump "$input"
				# it may be tempting to make these (this action and below) non-multi selections, however that is not desired for timeouts, as timeouts should be empty if non-required, or the default if required, rather than whatever the user had their menu on, as timeout = escape/cancel
			elif test "$input" = 'up' -o "$input" = 'w' -o "$input" = 'k'; then
				action_up
			elif test "$input" = 'down' -o "$input" = 's' -o "$input" = 'j'; then
				action_down
			elif test "$input" = 'left' -o "$input" = 'a' -o "$input" = 'h' -o "$input" = 'page-up'; then
				action_page_up
			elif test "$input" = 'right' -o "$input" = 'd' -o "$input" = 'l' -o "$input" = 'page-down'; then
				action_page_down
			elif test "$input" = 'home'; then
				action_first
			elif test "$input" = 'end'; then
				action_last
			elif test "$input" = 'tab'; then
				action_next_preference
			elif test "$input" = 'backtab'; then
				action_prior_preference
			elif test "$menu_mode" = 'cancel'; then
				# CANCEL MENU
				if test "$input" = 'enter' -o "$input" = 'e' || test "$input" = 'space' -a "$option_multi" = 'no'; then
					set_menu_mode 'finished'
				elif test "$input" = 'escape' -o "$input" = 'q'; then
					set_menu_mode 'choose'
				fi
			elif test "$menu_mode" = 'confirm'; then
				# CONFIRM MENU
				if test "$input" = 'enter' -o "$input" = 'e' || test "$input" = 'space' -a "$option_multi" = 'no'; then
					set_menu_mode 'finished'
				elif test "$input" = 'escape' -o "$input" = 'q'; then
					set_menu_mode 'choose'
				fi
			elif test "$input" = 'space'; then
				if test "$option_multi" = 'yes'; then
					action_toggle_cursor
				else
					action_select_cursor
					if test "$option_confirm_input" = 'yes'; then
						set_menu_mode 'confirm'
					else
						set_menu_mode 'finished'
					fi
				fi
			elif test "$input" = 'escape' -o "$input" = 'q' -a "$can_cancel" = 'yes'; then
				if test "$option_confirm_input" = 'yes'; then
					set_menu_mode 'cancel'
				else
					action_revert
					set_menu_mode 'finished'
				fi
			elif test "$input" = 'enter' -o "$input" = 'e'; then
				if test "$option_multi" = 'no'; then
					action_select_cursor
				fi
				if test "$option_confirm_input" = 'yes'; then
					set_menu_mode 'confirm'
				else
					set_menu_mode 'finished'
				fi
			elif test "$input" = 'z'; then
				action_revert
			elif test "$input" = 't'; then
				if test "$selected_count" -eq "$items_count"; then
					action_none
				else
					action_all
				fi
			elif test "$input" = 'insert' -o "$input" = '+'; then
				action_select_and_next
			elif test "$input" = '-'; then
				action_select_and_prior
			elif test "$input" = 'backspace'; then
				action_unselect_and_prior
			elif test "$input" = 'delete'; then
				action_unselect_and_next
			else
				# nothing done, no need to repeat, just need to read again
				menu_skip_render='yes'
				continue
			fi

			# do a re-render
			if test "$menu_mode" = 'finished'; then
				break
			else
				menu_skip_render='no'
			fi
		done
		show_cursor
		tty_finish
	}

	# select the defaults
	select_defaults

	# render if not skipping
	if test "$option_confirm_default" = 'no' -a "$can_revert_to_defaults" = 'yes'; then
		: # we have defaults, and want to skip defaults
	else
		handle_menu
	fi

	# render result
	render_result
	return
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		choose_test
	else
		choose_ "$@"
	fi
fi
