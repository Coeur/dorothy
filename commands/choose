#!/usr/bin/env bash

# QUIRKS:
# - if there are more options than [$LINES - header], then this will fall apart

# TODOS:
# - [ ] limit the options output to [$LINES - header]
# - [ ] if one gets to $LINES, and there are truncated values, then scroll downwards
# - [ ] support $COLUMNS - if a menu item is larger than the column, then it will show all of it when active
# - [ ] ctrl n/p for navigating up/down.
# - [ ] `hjkl` vim arrow keys.

function choose_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	## choose-menu ##

	# timeout response not required
	eval-tester --name='timeout response not required' --status='60' --stderr='Read timed out [60], without selection.' \
		-- env NO_COLOR=yes choose --index --question='timeout response not required' --timeout=5 -- a b c

	# timeout response is required
	eval-tester --name='timeout response is required' --status='60' --stderr='Read timed out [60], without selection.' \
		-- env NO_COLOR=yes choose --index --question='timeout response is required' --timeout=5 --required -- a b c

	# default response
	{
		sleep 3
	} | eval-tester --name='default response' --stdout='1' --ignore-stderr \
		-- choose --index --question='default response' --timeout=2 --default=b -- a b c

	# default response should clear on movement
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
	} | eval-tester --name='default response should clear on movement' --status='60' --stdout='' --ignore-stderr \
		-- choose --index --question='default response should clear on movement' --timeout=10 --default=b -- a b c

	# default multi response
	{
		sleep 3
	} | eval-tester --name='default multi response' --stdout=$'1\n2' --ignore-stderr \
		-- choose --index --question='default multi response' --timeout=2 --multi --default=b --default=c -- a b c

	# default multi response should not clear on movement
	{
		sleep 3
		printf $'\eOB'
		sleep 3
	} | eval-tester --name='default multi response should not clear on movement' --stdout=$'1\n2' --ignore-stderr \
		-- choose --index --question='default multi response should not clear on movement' --timeout=10 --multi --default=b --default=c -- a b c

	# multiline defaults
	{
		sleep 3
	} | eval-tester --name='default multiline response' --stdout=$'1\n2\n3' --ignore-stderr \
		-- choose --index --question='default multiline response' --timeout=2 --multi --default=$'b\nB' --defaults=$'c\nd' -- a $'b\nB' c d

	# first selection
	{
		sleep 3
		echo
	} | eval-tester --name='first response' --stdout='0' \
		-- choose --index --question='first selection' -- a b c

	# second selection
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
		echo
	} | eval-tester --name='second response' --stdout='1' \
		-- choose --index --question='second selection' -- a b c

	# abort response via escape
	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='abort response via escape' \
		-- choose --index --question='abort response via escape' -- a b c

	## choose ##

	# timeout response not required
	eval-tester --name='timeout response not required' --status='0' --stderr=$'Read timed out [60], without selection.\nMenu timed out [60], no result, not required.' \
		-- env NO_COLOR=yes choose --question='timeout response not required' --timeout=5 -- a b c

	# timeout response is required
	eval-tester --name='timeout response is required' --status='60' --stderr=$'Read timed out [60], without selection.\nMenu timed out [60], no result, is required.' \
		-- env NO_COLOR=yes choose --question='timeout response is required' --timeout=5 --required -- a b c

	# default response
	{
		sleep 3
	} | eval-tester --name='default response' --stdout='b' --ignore-stderr \
		-- choose --question='default response' --timeout=2 --default=b -- a b c

	# default multi response
	{
		sleep 3
	} | eval-tester --name='default multi response' --stdout=$'b\nc' --ignore-stderr \
		-- choose --question='default multi response' --timeout=2 --multi --default=b --default=c -- a b c

	# first selection
	{
		sleep 3
		echo
	} | eval-tester --name='first selection' --stdout='a' \
		-- choose --question='first selection' -- a b c

	# second selection
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
		echo
	} | eval-tester --name='second selection' --stdout='b' \
		-- choose --question='second selection' -- a b c

	# abort response via escape
	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='abort response via escape' \
		-- choose --question='abort response via escape' -- a b c

	echo-segment --g1="TEST: $0"
	return 0
)
function choose_() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/tty.bash"
	__require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Prompt the user to select an item from the menu, in a clean and robust way.

			USAGE:
			choose [...options] -- ...<item>

			OPTIONS:
			<question> | --question=<question>
			    Display this question in the prompt. If specified multiple times, they will be joined by newline, and only the first will be lingered.

			--label -- ...[<value> <label>]
			    Pass values and labels.

			--label=first -- ...[<label> <value>]
			    Pass values and labels, with the label first.

			--visual='\$LABEL' -- ...[<value> <label>]
			    Customise what is displayed to the user. It is eval'd. E.g.
			    To show label and value, use: --visual='\$LABEL [\$VALUE]'
			    If empty LABEL, then will equal VALUE.

			--return='\$VALUE' -- ...[<value> <label>]
			    Customise how the value is returned to the program. It is eval'd. E.g.
			    To return the visual, use: --return='\$VISUAL'
			    Tto return the index, use: --return='\$INDEX' or --index

			--default-exact=<value>
			--defaults-exact=<newline separated values>
			    Pre-select <value>s by exact matching.

			--default-fuzzy=<value>
			--defaults-fuzzy=<newline separated values>
			    Pre-select <value>s by fuzzy matching.

			--[no-]confirm=[yes|no]
			    Confirm the (default/entered) value(s) before continuing.

			--[no-]confirm-default=[YES|no] | --[no-]skip-default=[yes|NO]
			    Confirm the default value(s) (if provided) before continuing. Defaults to enabled.

			--[no-]confirm-input=[yes|NO]
			    Confirm the entered value(s) before continuing. Defaults to disabled.

			--[no-]required=[yes|NO]
			    Do not continue until a selection is made. Disable aborting the prompt.

			--[no-]multi=[yes|NO]
			    Multiple items can be selected.

			--[no-]hints=[YES|no]
			    Display interaction hint line.

			--[no-]linger=[yes|NO]
			    Whether the prompt should persist afterwards.

			--timeout=<timeout>
			    Custom timeout value in seconds.

			QUIRKS:
			If you wish to return the index, which is desirable in the case of when multiple values can be identical, use --index or --return='\$INDEX'.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item='' inputs=() tmp=()
	local option_question=()
	# trunk-ignore(shellcheck/SC2016)
	local option_label='no' option_visual='' option_return='$VALUE'
	local defaults_exact=() defaults_fuzzy=() option_confirm_default='yes' option_confirm_input='no'
	local option_required='no' option_multi='no' option_hints='yes'
	local option_linger='no' option_timeout=''
	local use_colors
	use_colors="$(echo-color-enabled --fallback=yes -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-color'* | '--color'*) ;; # handled by echo-color-enabled
		'--question='*) option_question+=("${item#*=}") ;;
		'--no-label'* | '--label'*)
			# label can be 'yes', 'no', and 'first'
			option_label="$(get-flag-value --fallback="$option_label" -- "$item")"
			;;
		'--visual='*) option_visual="${item#*=}" ;;
		'--return='*) option_return="${item#*=}" ;;
		# trunk-ignore(shellcheck/SC2016)
		'--index') option_return='$INDEX' ;;
		'--default-exact='* | '--default='*) defaults_exact+=("${item#*=}") ;;
		'--defaults-exact='* | '--defaults='*)
			mapfile -t tmp <<<"${item#*=}"
			defaults_exact+=("${tmp[@]}")
			;;
		'--default-fuzzy='*) defaults_fuzzy+=("${item#*=}") ;;
		'--defaults-fuzzy='*)
			mapfile -t tmp <<<"${item#*=}"
			defaults_fuzzy+=("${tmp[@]}")
			;;
		'--no-skip-default'* | '--skip-default'*)
			option_confirm_default="$(get-flag-value --non-affirmative --fallback="$option_confirm_default" -- "$item")"
			;;
		'--no-confirm-default'* | '--confirm-default'*)
			option_confirm_default="$(get-flag-value --affirmative --fallback="$option_confirm_default" -- "$item")"
			;;
		'--no-confirm-input'* | '--confirm-input'*)
			option_confirm_input="$(get-flag-value --affirmative --fallback="$option_confirm_input" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm_default="$(get-flag-value --affirmative --fallback="$option_confirm_default" -- "$item")"
			option_confirm_input="$(get-flag-value --affirmative --fallback="$option_confirm_input" -- "$item")"
			;;
		'--no-required'* | '--required'*)
			option_required="$(get-flag-value --affirmative --fallback="$option_required" -- "$item")"
			;;
		'--no-multi'* | '--multi'*)
			option_multi="$(get-flag-value --affirmative --fallback="$option_multi" -- "$item")"
			;;
		'--no-hints'* | '--hints'*)
			option_hints="$(get-flag-value --affirmative --fallback="$option_hints" -- "$item")"
			;;
		'--no-linger'* | '--linger'*)
			option_linger="$(get-flag-value --affirmative --fallback="$option_linger" -- "$item")"
			;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--')
			inputs+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_question+=("$item") ;;
		esac
	done

	# ensure items were provided
	if test "${#inputs[@]}" -eq 0; then
		help 'No <item>s provided.'
	fi

	# styles for items:
	# one hollow circle: ⚬ ○ ◯ ❍
	# two hollow circles: ◎ ⦾ ⊚
	# one hollow, one full: ☉ ⦿ ◉
	# one full: ●
	# ▣ ▢ □ ⊡
	# ☑ ☒ ⌧
	# ✓ ✔ ✖  ✗  ✘
	#
	# conclusions for cursor:
	# doesn't space correctly in Terminal: ⸻
	# too small: → ☞ ➡
	# too unclear: ►
	# gets turned into an emoji: ➡️
	# other options: ▶▷▸▹⏵⯈
	local \
		color_reset \
		color_bold \
		color_dim \
		color_underline \
		color_invert \
		color_framed \
		color_disable_foreground \
		color_disable_background \
		color_disable_invert \
		color_disable_framed \
		color_foreground_intense_green \
		color_foreground_intense_yellow \
		color_foreground_intense_magenta \
		color_background_white \
		color_background_intense_white \
		icon_active \
		icon_default \
		icon_standard \
		style_help_begin \
		style_help_end \
		style_key_begin \
		style_key_begin \
		style_key_end \
		style_key_end \
		style_key_indent='  '
	if test "$use_colors" = 'no'; then
		color_reset=''
		color_bold=''
		color_dim=''
		color_underline=''
		color_invert=''
		color_framed=''
		color_disable_foreground=''
		color_disable_background=''
		color_disable_invert=''
		color_disable_framed=''
		color_foreground_black=''
		color_foreground_intense_green=''
		color_foreground_intense_yellow=''
		color_foreground_intense_magenta=''
		style_help_begin=''
		style_help_end=''
		style_key_begin='['
		style_key_end=']'
	else
		color_reset=$'\e[0m'
		color_bold=$'\e[1m'
		color_dim=$'\e[2m'
		color_underline=$'\e[4m'
		color_invert=$'\e[7m'
		color_framed=$'\e[51m'
		color_disable_foreground=$'\e[39m'
		color_disable_background=$'\e[49m'
		color_disable_invert=$'\e[27m'
		color_disable_framed=$'\e[54m'
		color_foreground_black=$'\e[30m'
		color_foreground_intense_green=$'\e[92m'
		color_foreground_intense_yellow=$'\e[93m'
		color_foreground_intense_magenta=$'\e[95m'
		color_background_white=$'\e[47m'
		color_background_intense_white=$'\e[107m'
		style_help_begin="$color_dim"
		style_help_end="$color_reset"
		if test "$(get-terminal-theme || :)" = 'dark'; then
			style_key_begin="${color_foreground_black}${color_background_white} "
		else
			style_key_begin="${color_background_intense_white} " # foreground default black, background intense white
		fi
		style_key_end=" $color_reset"
	fi
	if test "$option_multi" = 'yes'; then
		icon_selected='▣'
		icon_default='⊡'
		icon_active='⊡'
		icon_standard='□'
	else
		icon_selected='⦿' # only used in confirmation and linger
		icon_default='⦾'
		if test "$option_required" = 'yes'; then
			icon_active='◉'
		else
			icon_active='⦿'
		fi
		icon_standard='○'
	fi
	function render_key {
		local result
		result="${style_help_begin}$1${style_help_end}  "
		shift
		while test "$#" -ne 0; do
			result+="${style_key_begin}$1${style_key_end}"
			shift
			if test "$#" -ne 0; then
				result+=' '
			fi
		done
		__print_line "$result"
	}
	function indent_key {
		__print_line "${style_key_indent}$(render_key "$@")"
	}

	# adjust question
	local question_title question_with_body
	if test "${#option_question[@]}" -ne 0; then # bash v3 compat
		if test -n "${option_question[0]}"; then
			question_title="$color_underline$color_bold${option_question[0]}$color_reset"
			question_with_body="$(__print_lines "$question_title" "${option_question[@]:1}")"
		else
			question_title="$(__print_lines "${option_question[@]:1}")"
			question_with_body="$question_title"
		fi
	else
		question_title=''
		question_with_body=''
	fi

	# enforce question if lingering
	if test "$option_linger" = 'yes' -a -z "$question_title"; then
		help 'A <question> is required when using --linger'
	fi

	# generic helpers
	function __fuzzy_haystack_needle {
		local haystack="$1" needle="$2"
		[[ "$(__lowercase_string "$haystack")" == *"$(__lowercase_string "$needle")"* ]]
	}

	# prepare label handling
	local inputs_step=1
	if test "$option_label" != 'no'; then
		# because of labels, we will iterate items two at a time
		inputs_step=2

		# verify we have a label for each value
		if is-odd -- "${#inputs[@]}"; then
			{
				echo-style --colors="$use_colors" --error="The amount of <label>s must match the amount of <value>s. See [$0 --help] for usage." $'\n' --bold='Make the below provide an even amount of items, to ensure there is a <label> for each <value>.'
				echo-verbose -- "${inputs[@]}"
			} >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi
	fi

	# generate the items
	# @todo add support for option_default_indexes if a user requests it
	local index item INDEX=-1 VALUE LABEL VISUAL RETURN items=() returns=() defaults=() defaults_count=0
	for ((index = 0; index < ${#inputs[@]}; index = index + inputs_step)); do
		# index considers inputs_step, INDEX is only each item (label/value combo)
		INDEX=$((INDEX + 1))

		# order of
		if test "$option_label" = 'no'; then
			VALUE="${inputs[index]}"
			LABEL="$VALUE"
			if test -z "$VALUE"; then
				echo-style --colors="$use_colors" --error="The $INDEX item at index $index was empty, all items must be non-empty." >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
		else
			if test "$option_label" = 'yes'; then
				VALUE="${inputs[index]}"
				LABEL="${inputs[index + 1]}"
			elif test "$option_label" = 'first'; then
				VALUE="${inputs[index + 1]}"
				LABEL="${inputs[index]}"
			else
				echo-style --colors="$use_colors" --error="Invalid label option [$option_label], it must be no, yes, or first" >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
			if test -z "$LABEL" -o -z "$VALUE"; then
				echo-style --colors="$use_colors" --error="Invalid label=[$LABEL] value=[$VALUE] combination, both must be non-empty" >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
		fi

		# enable if default
		if test "${#defaults_exact[@]}" -ne 0; then # bash v3 compat
			for item in "${defaults_exact[@]}"; do
				if test "$VALUE" = "$item"; then
					defaults[INDEX]='yes'
				fi
			done
		elif test "${#defaults_fuzzy[@]}" -ne 0; then # bash v3 compat
			for item in "${defaults_fuzzy[@]}"; do
				if __fuzzy_haystack_needle "$VALUE" "$item"; then
					defaults[INDEX]='yes'
				fi
			done
		fi

		# generate what is used
		if test -n "$option_visual"; then
			eval "VISUAL=\"$option_visual\""
		else
			VISUAL="$LABEL"
		fi
		if test -z "$VISUAL"; then
			echo-style --colors="$use_colors" --error="Invalid visual=[$VISUAL] for label=[$LABEL] value=[$VALUE], all must be non-empty" >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi
		if test -n "$option_return"; then
			eval "RETURN=\"$option_return\""
		else
			RETURN="$VALUE"
		fi
		if test -z "$RETURN"; then
			echo-style --colors="$use_colors" --error="Invalid return=[$RETURN] for label=[$LABEL] value=[$VALUE], all must be non-empty" >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi
		items+=("$VISUAL")
		returns+=("$RETURN")
	done
	defaults_count="${#defaults[@]}"

	# handle default options
	local can_revert_to_defaults can_cancel
	if test "$defaults_count" -ne 0; then
		can_revert_to_defaults='yes'
		can_cancel='yes'
	else
		can_revert_to_defaults='no'
		if test "$option_required" = 'no'; then
			can_cancel='yes'
		else
			can_cancel='no'
		fi
	fi

	# prepare menu vars
	local \
		bin_gfmt='' \
		bin_gfold='' \
		bin_gwc='' \
		commentary='' \
		cursor=0 \
		items_last_index \
		items_total="${#items[@]}" \
		menu_header_shrunk='' \
		menu_header_size \
		menu_header='' \
		menu_hint_extras='' \
		menu_hint_shrunk='' \
		menu_hint_size \
		menu_hint_choose='' \
		menu_hint_confirm='' \
		menu_hint='' \
		menu_status=0 \
		page_direction=1 \
		page_bottom_index=0 \
		page_top_index=0 \
		paging_used \
		paging_supported='yes' \
		renders=() \
		size_columns_prior=0 \
		size_columns=80 \
		size_content=75 \
		size_rows_prior=0 \
		size_rows=10 \
		sizes=() \
		tty_target
	items_last_index="$((items_total - 1))"
	mapfile -t renders < <(get-array "$items_total")
	mapfile -t sizes < <(get-array "$items_total")

	# prepare paging
	tty_target="$(is-tty --fallback)"
	if test "$tty_target" = '/dev/stderr' || command-missing tput; then
		# fix [tput: No value for $TERM and no -T specified] errors when fetching columns and rows on CI
		paging_supported='no'
		# @todo multi-line items won't be style_key_indented properly, use fmt if it exists in this mode for item
	else
		if is-mac; then
			bin_gfold="$(type -P 'gfold' 2>/dev/null || :)"
			bin_gfmt="$(type -P 'gfmt' 2>/dev/null || :)"
			bin_gwc="$(type -P 'gwc' 2>/dev/null || :)"
		else
			# we could support these on macos, however fmt does not support -t on macos (it is something different, so we'd have to manually do that)
			bin_gfold="$(type -P 'fold' 2>/dev/null || :)"
			bin_gfmt="$(type -P 'fmt' 2>/dev/null || :)"
			bin_gwc="$(type -P 'wc' 2>/dev/null || :)"
		fi
		if test -z "$bin_gfold" -o -z "$bin_gfmt" -o -z "$bin_gwc"; then
			paging_supported='no'
			# don't bother installing, as that will require brew, and we might now yet have brew installed
		fi
	fi

	# prepare hints
	# prefer key names if possible, as people don't know the symbols
	if test "$option_confirm_input" = 'yes'; then
		# this is only shown on the confirm screen
		if test "$option_multi" = 'yes'; then
			menu_hint_confirm+="$(render_key 'CONFIRM SELECTION' 'ENTER' 'E')"
		else
			menu_hint_confirm+="$(render_key 'CONFIRM SELECTION' 'SPACE' 'ENTER' 'E')"
		fi
		menu_hint_confirm+="$(indent_key 'CHANGE SELECTION' 'ESC' 'Q')"
	fi
	if test "$option_hints" = 'yes'; then
		if test "$option_multi" = 'yes'; then
			menu_hint_choose+="$(render_key 'SELECT' 'SPACE')"
			menu_hint_choose+="$(indent_key 'CONFIRM' 'ENTER' 'E')"
		else
			menu_hint_choose+="$(render_key 'SELECT' 'SPACE' 'ENTER' 'E')"
		fi
		if test "$can_cancel" = 'yes'; then
			# cancel restores defaults (if multi) or selects none (if non-multi) and leaves
			menu_hint_choose+="$(indent_key 'CANCEL' 'ESC' 'Q')"
		fi
		if test "$items_total" -ne 1; then
			# [⬆⬇⇧] have alignment issues, use [↑↓]
			menu_hint_choose+="$(indent_key 'UP' '↑' 'W' 'K')"
			menu_hint_choose+="$(indent_key 'DOWN' '↓' 'S' 'J')"
			# comment out self-explanatory keys
			# menu_hint_extras+="$(indent_key 'FIRST' 'HOME', 'fn ⇧ ↑')"
			# menu_hint_extras+="$(indent_key 'LAST' 'END', 'fn ⇧ ↓')"
			# menu_hint_extras+="$(indent_key 'PAGE UP' '←' 'A' 'H')"
			# menu_hint_extras+="$(indent_key 'PAGE DOWN' '→' 'D' 'L')"
			if test "$option_multi" = 'yes'; then
				# comment out self-explanatory keys
				# menu_hint_extras+="$(indent_key 'SELECT & NEXT' '+' 'INSERT')"
				# menu_hint_extras+="$(indent_key 'SELECT & PREV' '-')"
				# menu_hint_extras+="$(indent_key 'UNSELECT & NEXT' 'DELETE')"
				# menu_hint_extras+="$(indent_key 'UNSELECT & PREV' 'BACKSPACE')"
				menu_hint_extras+="$(indent_key 'ALL/NONE' 'T')"
			fi
		fi
		if test "$can_revert_to_defaults" = 'yes'; then
			menu_hint_extras+="$(indent_key 'NEXT PREF' 'TAB')"   # next preference
			menu_hint_extras+="$(indent_key 'PREV PREF' '⇧ TAB')" # prior preference
			menu_hint_extras+="$(indent_key 'RESET' 'Z')"         # reset preferences
		fi
	fi
	if test -n "$question_with_body"; then
		# @todo only bold the first question line
		menu_header="$question_with_body"$'\n'
	fi
	# @todo: FILTER [asd] SHOWING [2] HIDING [19] TOTAL [21] TOGGLE [F]

	# this is too slow to recalculate on each interaction
	# @todo why isn't this called?
	function refresh_terminal_size {
		if test "$paging_supported" = 'no'; then
			paging_used='no'
		else
			size_rows="$(tput lines)"
			size_columns="$(tput cols)"
			if test "$size_rows" -ne "$size_rows_prior" -o "$size_columns" -ne "$size_columns_prior"; then
				size_content="$((size_columns - 5))"
				# recalculate for new size
				menu_header_shrunk="$(echo-trim-colors -- "$menu_header" | "$bin_gfold" -w "$size_columns")"
				menu_header_size="$("$bin_gwc" -l <<<"${menu_header_shrunk}")"
				menu_hint="${menu_hint_choose}${menu_hint_extras}"
				menu_hint_shrunk="$(echo-trim-colors -- "$menu_hint" | "$bin_gfold" -w "$size_columns")"
				menu_hint_size="$("$bin_gwc" -l <<<"${menu_hint_shrunk}")"
				if test "$menu_hint_size" -gt 1; then
					menu_hint="${menu_hint_choose}"
					menu_hint_shrunk="$(echo-trim-colors -- "$menu_hint" | "$bin_gfold" -w "$size_columns")"
					menu_hint_size="$("$bin_gwc" -l <<<"${menu_hint_shrunk}")"
				fi
				# move start index to current item, as otherwise it could be out of range
				if test "$size_rows" -lt "$size_rows_prior" -o "$size_columns" -lt "$size_columns_prior"; then
					# @todo we should detect if showing everything is possible before resorting to this
					page_top_index="$cursor"
					page_bottom_index="$items_last_index"
				fi
				# reset paging for new size
				paging_used='maybe'
				mapfile -t renders < <(get-array "$items_total")
				mapfile -t sizes < <(get-array "$items_total")
				# update priors
				size_rows_prior="$size_rows"
				size_columns_prior="$size_columns"
			fi
		fi
	}

	# actions and selection modifications
	local selected=() selected_count=0
	function select_none {
		selected=()
		selected_count=0
	}
	if test "$option_multi" = 'yes'; then
		function unselect_index {
			local index
			for index in "$@"; do
				if test "${selected[index]-}" = 'yes'; then
					unset 'selected[index]'
				fi
			done
			selected_count="${#selected[@]}"
		}
		function select_index {
			local index
			for index in "$@"; do
				if test "${selected[index]-}" != 'yes'; then
					selected[index]='yes'
				fi
			done
			selected_count="${#selected[@]}"
		}
		function toggle_index {
			local index
			for index in "$@"; do
				if test "${selected[index]-}" = 'yes'; then
					unset 'selected[index]'
				else
					selected[index]='yes'
				fi
			done
			selected_count="${#selected[@]}"
		}
		function select_all {
			select_index "${!items[@]}"
		}
		function select_defaults {
			if test "$defaults_count" -ne 0; then # bash v3 compat
				select_index "${!defaults[@]}"
			fi
		}
		function action_toggle_cursor {
			toggle_index "$cursor"
		}
		function action_select_and_next {
			select_index "$cursor"
			action_down
		}
		function action_unselect_and_next {
			unselect_index "$cursor"
			action_down
		}
		function action_select_and_prior {
			select_index "$cursor"
			action_up
		}
		function action_unselect_and_prior {
			unselect_index "$cursor"
			action_up
		}
		function action_all {
			select_all
		}
		function action_revert {
			select_none
			select_defaults
		}
	else
		function select_only_index {
			if test "$#" -ne 0; then
				selected=()
				selected["$1"]='yes'
				selected_count=1
				cursor="$1"
			fi
		}
		function select_defaults {
			# select first preference
			if test "${#defaults[@]}" -ne 0; then
				select_only_index "${!defaults[@]}"
			fi
		}
		function action_select_cursor {
			select_only_index "$cursor"
		}
		function action_select_default {
			select_defaults
		}
		function action_revert {
			# jump to first preference
			if test "${#defaults[@]}" -ne 0; then
				local indexes=("${!defaults[@]}")
				cursor="${indexes[0]}"
			fi
		}
	fi
	function action_none {
		select_none
	}
	function action_jump {
		local index="$1"
		# jump to number and select
		if test "$index" -le 1; then
			cursor=0
		elif test "$index" -ge "$items_total"; then
			cursor="$items_last_index"
		else
			cursor="$((index - 1))"
		fi
	}
	function action_up {
		if test "$cursor" -eq 0; then
			cursor="$items_last_index"
		else
			cursor="$((cursor - 1))"
		fi
	}
	function action_down {
		if test "$cursor" -eq "$items_last_index"; then
			cursor=0
		else
			cursor="$((cursor + 1))"
			if test "$cursor" -gt "$page_bottom_index"; then
				# scroll down by one, rather than render whole new page
				page_direction=-1
			fi
		fi
	}
	function action_first {
		cursor=0
	}
	function action_last {
		cursor="$items_last_index"
	}
	function is_preference {
		local index="$1"
		test "${selected[index]-}" = 'yes' -o "${defaults[index]-}" = 'yes'
	}
	function action_next_preference {
		local index
		# next selection
		for ((index = cursor + 1; index <= items_last_index; index++)); do
			if is_preference "$index"; then
				cursor="$index"
				return 0
			fi
		done
		# earlier selection
		for ((index = 0; index < cursor; index++)); do
			if is_preference "$index"; then
				cursor="$index"
				return 0
			fi
		done
		# no selection
		return 0
	}
	function action_prior_preference {
		local index
		# go backwards to the start
		for ((index = cursor - 1; index >= 0; index--)); do
			if is_preference "$index"; then
				cursor="$index"
				return 0
			fi
		done
		# go backwards from the end
		for ((index = items_last_index; index > cursor; index--)); do
			if is_preference "$index"; then
				cursor="$index"
				return 0
			fi
		done
		# no selection
		return 0
	}
	function action_page_up {
		cursor="$page_top_index"
		page_direction=-1
	}
	function action_page_down {
		cursor="$page_bottom_index"
		page_top_index="$cursor"
	}
	function render_choose_menu {
		local index \
			line_style \
			line_prefix \
			item_original \
			item_rendered \
			item_line \
			item_size \
			items_bundled='' \
			items_bundled_size=0 \
			page_index=0 \
			menu_debug='' \
			menu_size \
			menu_title=''
		# refresh the terminal size
		refresh_terminal_size
		# adjust page direction
		#menu_debug+="c=$cursor,pi=$page_index,pd=$page_direction,psi=$page_top_index,pli=$page_bottom_index | "
		if test "$cursor" -le 0; then
			cursor=0
			page_index="$cursor"
			page_direction=1
		elif test "$cursor" -ge "$items_last_index"; then
			cursor="$items_last_index"
			page_index="$cursor"
			page_direction=-1
		elif test "$cursor" -le "$page_top_index"; then
			page_index="$cursor"
		elif test "$cursor" -ge "$page_bottom_index"; then
			page_index="$cursor"
		elif test "$page_direction" -eq 1; then
			# maintain the same page, as the cursor is within it
			page_index="$page_top_index"
		else
			# maintain the same page, as the cursor is within it
			page_index="$page_bottom_index"
		fi
		page_top_index="$page_index"
		page_bottom_index="$page_index"
		#menu_debug+="c=$cursor,pi=$page_index,pd=$page_direction,psi=$page_top_index,pli=$page_bottom_index | "
		# @todo we need to support changing direction half way in the case that the cursor was on the middle, and page up was higher
		# e.g. go to second page, navigate half way, go page up
		for ((index = page_index; index >= 0 && index <= items_last_index; index += page_direction)); do
			# determine prefix
			line_prefix=''
			line_style=''

			if test "$index" -eq "$cursor"; then
				line_style+="$color_invert"
				line_prefix+='⏵  '
			else
				line_prefix+='   '
			fi
			if test "${selected[index]-}" = 'yes'; then
				line_style+="$color_foreground_intense_green"
				line_prefix+="$icon_selected "
			elif test "${defaults[index]-}" = 'yes'; then
				line_style+="$color_foreground_intense_yellow"
				line_prefix+="$icon_default "
			elif test "$index" -eq "$cursor"; then
				line_prefix+="$icon_active "
			else
				line_prefix+="$icon_standard "
			fi
			line_prefix="${line_style}${line_prefix}"

			# determine paging
			if test "$paging_used" = 'no'; then
				# paging is no longer needed, no recalculations needed
				if test -n "${renders[index]}"; then
					# use rendered item (in case it needed to be formatted if it exists)
					item_line="${line_prefix}${renders[index]}${color_reset}"$'\n'
				else
					# otherwise use original item
					item_line="${line_prefix}${items[index]}${color_reset}"$'\n'
				fi
			else
				# paging is needed, so we must recalculate bundled size
				if test -n "${renders[index]}"; then
					item_rendered="${renders[index]}"
					item_size="${sizes[index]}"
				else
					item_original="${items[index]}"
					if test "${#item_original}" -lt "$size_content" && [[ $item_original != *$'\n'* && $item_original != *$'\t'* ]]; then
						# no need to format item, as it is small enough
						item_rendered="$item_original"
						item_size=1
						renders[index]="$item_rendered"
						sizes[index]="$item_size"
					else
						# need to format item, as it is too big
						item_rendered="$("$bin_gfmt" -t -w "$size_content" <<<"$item_original")"
						item_rendered="${item_rendered//$'\n'/$'\n     '}"
						item_size="$("$bin_gwc" -l <<<"${item_rendered}")"
						renders[index]="$item_rendered"
						sizes[index]="$item_size"
					fi
				fi
				# calculate total menu size
				menu_size="$((menu_header_size + items_bundled_size + item_size + menu_hint_size))"
				if test "$menu_size" -gt "$size_rows"; then
					# the menu would now be too large, so skip the rest
					item_line=''
					break
				else
					item_line="${line_prefix}${item_rendered}${color_reset}"$'\n'
					items_bundled_size="$((items_bundled_size + item_size))"
				fi
			fi
			# append or prepend the line to the bundle
			if test -n "$item_line"; then
				if test "$page_direction" -eq 1; then
					items_bundled+="$item_line"
					page_bottom_index="$index"
					# #menu_debug+='|D|'
				else
					items_bundled="$item_line$items_bundled"
					page_top_index="$index"
					# #menu_debug+='|A|'
				fi
			fi
		done
		#menu_debug+="c=$cursor,pi=$page_index,pd=$page_direction,psi=$page_top_index,pli=$page_bottom_index|"

		# calculate paging needed
		if test "$paging_used" = 'maybe' -a "$paging_supported" = 'yes'; then
			if test "$page_top_index" -ne 0 -o "$page_bottom_index" -ne "$items_last_index"; then
				paging_used='yes'
			else
				paging_used='no'
			fi
		fi

		# if paging was used, and we could support more rows, then re-render in the other direction
		# @todo update page_index instead of cursor, so that cursor remains sensible (optional, may not be a good idea)
		if test "$paging_used" = 'yes' -a "$menu_size" -lt "$size_rows"; then
			if test "$page_direction" -eq -1 -a "$page_top_index" -eq 0; then
				# we can show more items, so re-render in the other direction
				cursor=0
				page_direction=1
				render_choose_menu
				return
			elif test "$page_direction" -eq 1 -a "$page_bottom_index" -eq "$items_last_index"; then
				cursor="$items_last_index"
				page_direction=-1
				render_choose_menu
				return
			fi
		fi

		# reset direction
		if test "$page_direction" -eq -1; then
			page_direction=1
		fi

		# output menu
		if test "$paging_used" = 'yes'; then
			menu_title=$'\e]0;'"${menu_debug}👉 Selected $selected_count of $items_total items 💁‍♀️ Viewing $((page_bottom_index - page_top_index + 1)) of $items_total items [$((page_top_index + 1))…$((page_bottom_index + 1))] 👈"$'\a'
		else
			menu_title=$'\e]0;'"${menu_debug}👉 Selected $selected_count of $items_total items 👈"$'\a'
		fi
		printf '%s' "${menu_title}${menu_header}${items_bundled}${menu_hint}" >"$tty_target"
	}
	function render_confirm_menu {
		local index items_bundled=''

		# note that it is not traverseble via buttons at this point, that will require merging with render_choose_menu and special handling of paging / totals / indexes / etc
		if test "$selected_count" -eq 0; then
			items_bundled="${color_dim}[ nothing provided ]"$'\n'
		else
			for index in "${!selected[@]}"; do
				if test "${selected[index]}" = 'yes'; then
					items_bundled+="$color_foreground_intense_magenta$icon_selected ${items[index]}${color_reset}"$'\n'
				fi
			done
		fi

		# render the confirmation
		tty_clear
		menu_title=$'\e]0;'"👉 Confirm $selected_count of $items_total items 👈"$'\a'
		printf '%s' "${menu_title}${menu_header}${items_bundled}${menu_hint_confirm}" >"$tty_target"
	}
	function render_result {
		local render="$question_title" index
		if test -n "$commentary"; then
			if test -n "$render"; then
				render+=" $commentary"
			else
				render="$commentary"
			fi
		fi
		if test -n "$render"; then
			render+=$'\n'
		fi
		if test "$menu_status" -eq 0; then
			# render linger or temp
			if test "$option_linger" = 'yes'; then
				# add results only if lingering, as there may be more than terminal height, so clearing wouldn't support such
				for index in "${!selected[@]}"; do
					if test "${selected[index]}" = 'yes'; then
						render+="$color_dim$icon_selected ${items[index]}${color_reset}"$'\n'
					fi
				done
				if test "$selected_count" -eq 0; then
					render+="${color_dim}[ nothing provided ]"$'\n'
				fi
				# inform
				__print_string "$render" >"$tty_target"
			elif test -n "$commentary"; then
				# inform to stderr, consistent with ask, choose, confirm
				__print_string "$render" >/dev/stderr
				# sleep 3
				# echo-clear-lines --stdin < <(__print_string "$render") >/dev/stderr
			fi
			# stdout
			for index in "${!selected[@]}"; do
				if test "${selected[index]}" = 'yes'; then
					__print_line "${returns[index]}"
				fi
			done
		else
			# inform
			if test -n "$commentary"; then
				if test "$option_linger" = 'yes'; then
					__print_line "$render" >"$tty_target"
				else
					__print_line "$render" >/dev/stderr
				fi
			fi
			return "$menu_status"
		fi
	}
	function handle_menu {
		local action='choose' input read_status menu_skip_render='no'
		# action
		tty_start
		while true; do
			# (re-)render the menu?
			if test "$menu_skip_render" = 'no'; then
				# we want to render the menu, which one?
				if test "$action" = 'confirm'; then
					# check if confirm is appropriate
					if test "$selected_count" -eq 0 -a "$option_required" = 'yes'; then
						# confirm is not appropriate, as we require a selection, and there is no selection
						action='choose'
						menu_skip_render='yes'
						continue
					fi
					# render the confirmation menu
					render_confirm_menu
				else
					# the normal menu
					render_choose_menu
				fi
			fi

			# handle the response
			eval_capture --statusvar=read_status --stdoutvar=input -- read-key --timeout="$option_timeout"
			if test "$read_status" -eq 60; then
				if test "$selected_count" -ne 0; then
					commentary="$(echo-style --yellow='[timed out: using selection]')"
					action='done'
				elif test "$option_required" = 'no'; then
					commentary="$(echo-style --yellow='[timed out: not required]')"
					action='done'
				else
					commentary="$(echo-style --red='[input failure: timed out: required]')"
					menu_status="$read_status"
					action='done'
				fi
			elif test "$read_status" -ne 0; then
				# some other failure
				commentary="$(echo-style --red="[input failure: $read_status]")"
				menu_status="$read_status"
				action='done'
			elif is-digit -- "$input"; then
				action_jump "$input"
				# it may be tempting to make these (this action and below) non-multi selections, however that is not desired for timeouts, as timeouts should be empty if non-required, or the default if required, rather than whatever the user had their menu on, as timeout = escape/cancel
			elif test "$input" = 'up' -o "$input" = 'w' -o "$input" = 'k'; then
				action_up
			elif test "$input" = 'down' -o "$input" = 's' -o "$input" = 'j'; then
				action_down
			elif test "$input" = 'left' -o "$input" = 'a' -o "$input" = 'h' -o "$input" = 'page-up'; then
				action_page_up
			elif test "$input" = 'right' -o "$input" = 'd' -o "$input" = 'l' -o "$input" = 'page-down'; then
				action_page_down
			elif test "$input" = 'home'; then
				action_first
			elif test "$input" = 'end'; then
				action_last
			elif test "$input" = 'z'; then
				action_revert
			elif test "$action" = 'confirm'; then
				# CONFIRM MENU
				if test "$input" = 'enter' -o "$input" = 'e' || test "$input" = 'space' -a "$option_multi" = 'no'; then
					action='done'
				elif test "$input" = 'escape' -o "$input" = 'q'; then
					# @todo should this undo selection on non-multi? so that a subsequent timeout does not use it, as an aborted confirm on A, then navigating to B, and will select A - so yeah, it should undo selection
					if test "$option_multi" = 'no'; then
						if test "$option_required" = 'yes'; then
							action_select_default
						else
							action_none
						fi
					fi
					action='choose'
				fi
			elif test "$input" = 'space'; then
				if test "$option_multi" = 'yes'; then
					action_toggle_cursor
				else
					action_select_cursor
					if test "$option_confirm_input" = 'yes'; then
						action='confirm'
					else
						action='done'
					fi
				fi
			elif test "$input" = 'escape' -o "$input" = 'q'; then
				if test "$option_multi" = 'yes'; then
					action_revert
				elif test "$option_required" = 'yes'; then
					action_select_default
				else
					action_none
				fi
				if test "$option_confirm_input" = 'yes'; then
					action='confirm'
				else
					action='done'
				fi
			elif test "$input" = 'enter' -o "$input" = 'e'; then
				if test "$option_multi" = 'no'; then
					action_select_cursor
				fi
				if test "$option_confirm_input" = 'yes'; then
					action='confirm'
				else
					action='done'
				fi
			elif test "$input" = 'tab'; then
				action_next_preference
			elif test "$input" = 'backtab'; then
				action_prior_preference
			elif test "$input" = 't'; then
				if test "$selected_count" -eq "$items_total"; then
					action_none
				else
					action_all
				fi
			elif test "$input" = 'insert' -o "$input" = '+'; then
				action_select_and_next
			elif test "$input" = '-'; then
				action_select_and_prior
			elif test "$input" = 'backspace'; then
				action_unselect_and_prior
			elif test "$input" = 'delete'; then
				action_unselect_and_next
			else
				# nothing done, no need to repeat, just need to read again
				menu_skip_render='yes'
				continue
			fi

			# do a re-render
			if test "$action" = 'done'; then
				break
			else
				menu_skip_render='no'
				tty_clear
			fi
		done
		tty_finish
	}

	# select the defaults
	select_defaults

	# render if not skipping
	if test "$option_confirm_default" = 'no' -a "$can_revert_to_defaults" = 'yes'; then
		: # we have defaults, and want to skip defaults
	else
		handle_menu
	fi

	# render result
	render_result
	return
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		choose_test
	else
		choose_ "$@"
	fi
fi
