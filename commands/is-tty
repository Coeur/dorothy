#!/usr/bin/env bash

function is_tty_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-segment --h1="TEST: $0"

	function do_test {
		print_line "\$- = $-"

		print_line 'tty:'
		ps -p "$$" -o tty= || :

		( (tty -s && echo tty_s_pass) || echo tty_s_fail) || :

		print_line '-----------'

		( (test -t 0 && echo test_t_stdin_pass) || echo test_t_stdin_fail) || :
		( (test -t 1 && echo test_t_stdout_pass) || echo test_t_stdout_fail) || :
		( (test -t 2 && echo test_t_stderr_pass) || echo test_t_stderr_fail) || :

		( (test -c /dev/stdin && echo test_c_stdin_pass) || echo test_c_stdin_fail) || :
		( (test -c /dev/stdout && echo test_c_stdout_pass) || echo test_c_stdout_fail) || :
		( (test -c /dev/stderr && echo test_c_stderr_pass) || echo test_c_stderr_fail) || :
		( (test -c /dev/tty && echo test_c_tty_pass) || echo test_c_tty_fail) || :

		( (exec </dev/stdin && echo exec_stdin_pass) || echo exec_stdin_fail) || :
		( (exec </dev/stdout && echo exec_stdout_pass) || echo exec_stdout_fail) || :
		( (exec </dev/stderr && echo exec_stderr_pass) || echo exec_stderr_fail) || :
		( (exec </dev/tty && echo exec_tty_pass) || echo printf_tty_fail) || :

		( (printf '' >/dev/stdout && echo printf_stdout_pass) || echo printf_stdout_fail) || :
		( (printf '' >/dev/stderr && echo printf_stderr_pass) || echo printf_stderr_fail) || :
		( (printf '' >/dev/tty && echo printf_tty_pass) || echo printf_tty_fail) || :

		print_line '-----------'

		echo | ( (test -t 0 && echo echo_test_t_stdin_pass) || echo echo_test_t_stdin_fail) || :
		echo | ( (test -t 1 && echo echo_test_t_stdout_pass) || echo echo_test_t_stdout_fail) || :
		echo | ( (test -t 2 && echo echo_test_t_stderr_pass) || echo echo_test_t_stderr_fail) || :

		echo | ( (test -c /dev/stdin && echo echo_test_c_stdin_pass) || echo echo_test_c_stdin_fail) || :
		echo | ( (test -c /dev/stdout && echo echo_test_c_stdout_pass) || echo echo_test_c_stdout_fail) || :
		echo | ( (test -c /dev/stderr && echo echo_test_c_stderr_pass) || echo echo_test_c_stderr_fail) || :
		echo | ( (test -c /dev/tty && echo echo_test_c_tty_pass) || echo echo_test_c_tty_fail) || :

		( (test -t 0 0<&- && echo close_test_t_stdin_pass) || echo close_test_t_stdin_fail) || :
		( (test -t 1 1<&- && echo close_test_t_stdout_pass) || echo close_test_t_stdout_fail) || :
		( (test -t 2 2<&- && echo close_test_t_stderr_pass) || echo close_test_t_stderr_fail) || :

		( (test -c /dev/stdin 0<&- && echo close_test_c_stdin_pass) || echo close_test_c_stdin_fail) || :
		( (test -c /dev/stdout 1<&- && echo close_test_c_stdout_pass) || echo close_test_c_stdout_fail) || :
		( (test -c /dev/stderr 2<&- && echo close_test_c_stderr_pass) || echo close_test_c_stderr_fail) || :

	}

	do_test

	local stdout stderr

	echo
	print_line '### --stdoutvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout -- do_test
	print_line 'stdout ='
	echo-lines --indent='    ' <<<"$stdout"
	print_line 'stderr ='
	echo-lines --indent='    ' <<<"$stderr"

	echo
	print_line '### --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stderrvar=stderr -- do_test
	print_line 'stdout ='
	echo-lines --indent='    ' <<<"$stdout"
	print_line 'stderr ='
	echo-lines --indent='    ' <<<"$stderr"

	echo
	print_line '### --stdoutvar --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout --stderrvar=stderr -- do_test
	print_line 'stdout ='
	echo-lines --indent='    ' <<<"$stdout"
	print_line 'stderr ='
	echo-lines --indent='    ' <<<"$stderr"

	# RUNNING ON MACOS
	# + printf '%s\n' '$- = ehuxBE'
	# $- = ehuxBE
	# + tty -s
	# + echo 'success status = 0'
	# success status = 0
	# + test -t 0
	# + echo 'success status = 0'
	# success status = 0
	# + test -t 1
	# + echo 'success status = 0'
	# success status = 0
	# + test -t 2
	# + echo 'success status = 0'
	# success status = 0
	# + test -c /dev/stdin
	# + echo 'success status = 0'
	# success status = 0
	# + test -c /dev/stdout
	# + echo 'success status = 0'
	# success status = 0
	# + test -c /dev/stderr
	# + echo 'success status = 0'
	# success status = 0
	# + test -c /dev/tty
	# + echo 'success status = 0'
	# success status = 0
	# + echo 'NO_TTY = '
	# NO_TTY =
	# + echo 'TTY = '
	# TTY =
	# + ps -p 9850 -o tty=
	# ttys011
	# + echo 'success status = 0'
	# success status = 0
	# + exec
	# + echo 'success status = 0'
	# success status = 0
	# + printf ''
	# + echo 'success status = 0'
	# success status = 0
	# + set +x

	# RUNNING ON MACOS VIA CRON
	# < 'test' '-t' '0' >
	# </ 'test' '-t' '0' >[1]
	# < 'test' '-t' '1' >
	# </ 'test' '-t' '1' >[1]
	# < 'test' '-t' '2' >
	# </ 'test' '-t' '2' >[1]
	# < 'test' '-c' '/dev/tty' >
	# </ 'test' '-c' '/dev/tty' >[0]
	# < 'echo' '' >
	# </ 'echo' '' >[0]
	# < 'echo' '' >
	# </ 'echo' '' >[0]
	# < 'ps' '-p' '19201' '-o' 'tty=' >
	# ??
	# </ 'ps' '-p' '19201' '-o' 'tty=' >[0]
	# + exec
	# /Users/balupton/.local/share/dorothy/commands/is-tty: line 15: /dev/tty: Device not configured
	# ++ EXIT_STATUS=1
	# ++ test is_tty = eval_capture_wrapper
	# ++ test -n is_tty
	# ++ return 1

	echo-segment --g1="TEST: $0"
	return 0
)
function is_tty() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if the environment actually has a TTY available.
			This is important, as otherwise calls to [tty] will result in "not a tty" being output.

			USAGE:
			is-tty
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	# correctly test if TTY is writable
	(exec </dev/tty) &>/dev/null
	return $?
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		is_tty_test
	else
		is_tty "$@"
	fi
fi
