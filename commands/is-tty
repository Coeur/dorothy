#!/usr/bin/env bash

function is_tty() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if the environment actually has a TTY available.
			This is important, as otherwise calls to [tty] will result in "not a tty" being output.

			USAGE:
			is-tty [...options]

			OPTIONS:
			--verbose
			    If provided, output more information.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet=''
	option_quiet="$(echo-quiet --no-env "$option_quiet" -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	if test "$option_quiet" = 'no'; then
		set -x
		printf '%s\n' "\$- = $-"
		(tty -s && echo "success status = $?") || echo "failure status = $?"
		(test -t 0 && echo "success status = $?") || echo "failure status = $?"
		(test -t 1 && echo "success status = $?") || echo "failure status = $?"
		(test -t 2 && echo "success status = $?") || echo "failure status = $?"
		(test -c '/dev/stdin' && echo "success status = $?") || echo "failure status = $?"
		(test -c '/dev/stdout' && echo "success status = $?") || echo "failure status = $?"
		(test -c '/dev/stderr' && echo "success status = $?") || echo "failure status = $?"
		(test -c '/dev/tty' && echo "success status = $?") || echo "failure status = $?"
		echo "NO_TTY = ${NO_TTY-}"
		echo "TTY = ${TTY-}"
		(ps -p "$$" -o tty= 2>/dev/null && echo "success status = $?") || echo "failure status = $?"
		(exec </dev/tty 2>/dev/null && echo "success status = $?") || echo "failure status = $?"
		set +x

		# RUNNING ON MACOS
		# > is-tty --verbose
		# + printf '%s\n' '$- = ehuxBE'
		# $- = ehuxBE
		# + tty -s
		# + echo 'success status = 0'
		# success status = 0
		# + test -t 0
		# + echo 'success status = 0'
		# success status = 0
		# + test -t 1
		# + echo 'success status = 0'
		# success status = 0
		# + test -t 2
		# + echo 'success status = 0'
		# success status = 0
		# + test -c /dev/stdin
		# + echo 'success status = 0'
		# success status = 0
		# + test -c /dev/stdout
		# + echo 'success status = 0'
		# success status = 0
		# + test -c /dev/stderr
		# + echo 'success status = 0'
		# success status = 0
		# + test -c /dev/tty
		# + echo 'success status = 0'
		# success status = 0
		# + echo 'NO_TTY = '
		# NO_TTY =
		# + echo 'TTY = '
		# TTY =
		# + ps -p 25372 -o tty=
		# ttys006
		# + echo 'success status = 0'
		# success status = 0
		# + exec
		# success status = 0
		# + set +x

		# RUNNING ON MACOS VIA CRON
		# < 'test' '-t' '0' >
		# </ 'test' '-t' '0' >[1]
		# < 'test' '-t' '1' >
		# </ 'test' '-t' '1' >[1]
		# < 'test' '-t' '2' >
		# </ 'test' '-t' '2' >[1]
		# < 'test' '-c' '/dev/tty' >
		# </ 'test' '-c' '/dev/tty' >[0]
		# < 'echo' '' >
		# </ 'echo' '' >[0]
		# < 'echo' '' >
		# </ 'echo' '' >[0]
		# < 'ps' '-p' '19201' '-o' 'tty=' >
		# ??
		# </ 'ps' '-p' '19201' '-o' 'tty=' >[0]
		# + exec
		# /Users/balupton/.local/share/dorothy/commands/is-tty: line 15: /dev/tty: Device not configured
		# ++ EXIT_STATUS=1
		# ++ test is_tty = eval_capture_wrapper
		# ++ test -n is_tty
		# ++ return 1
	fi

	# So...
	# [-t {0,1,2}] checks if {0,1,2} is attached to a terminal
	# e.g. [echo | eval 'test -t 0 || echo no'] returns [no], as it fails [-t 0]
	# e.g. [eval_capture --stdoutvar=...] fails [-t 1]
	# e.g. [eval_capture --stderrvar=...] fails [-t 2]
	# [-c /dev/{stdin,stdout,stderr,tty}] checks if it is available, regardless of termiinal attachment
	# e.g. [(exec 0<&-; test -c /dev/stdin || echo no)] returns [no], as it fails [-c /dev/stdin]
	# e.g. [(exec 2>&-; test -c /dev/stderr || echo no)] returns [no], as it fails [-c /dev/stderr]
	# Cron jobs still pass [-c /dev/tty] even though /dev/tty is inaccessible [/dev/tty: Device not configured], as such [/dev/tty] would fail a [-t] check if TTY had a FD
	# As such, we run a [ps -p] check to see if the process [/dev/tty] is actually attached to a terminal, as unlike {stdin,stdout,stderr} the /dev/tty must be attached to a terminal to be open/accessible.
	test -c '/dev/tty' -a "${NO_TTY-}" != 'yes' -a "${TTY-}" != 'no'

	# inside an [apk] check as alpine returns the following:
	# ps: unrecognized option: p
	# BusyBox v1.36.1 (2023-07-27 17:12:24 UTC) multi-call binary.
	# Usage: ps [-o COL1,COL2=HEADER] [-T]
	# Show list of processes
	# -o COL1,COL2=HEADER	Select columns for display
	if command-missing apk; then
		[[ "$(ps -p "$$" -o tty= 2>/dev/null)" != '?'* ]]
	fi

	# if we got here, no exception, so success
	return 0
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	is_tty "$@"
fi
