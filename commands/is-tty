#!/usr/bin/env bash

function is_tty() (
	source "$DOROTHY/sources/bash.bash"

	if test "$*" = '--debug'; then
		eval-helper --wrap --no-quiet -- test -t 0 || :
		eval-helper --wrap --no-quiet -- test -t 1 || :
		eval-helper --wrap --no-quiet -- test -t 2 || :
		eval-helper --wrap --no-quiet -- test -c '/dev/tty' || :
		eval-helper --wrap --no-quiet -- echo "${NO_TTY-}" || :
		eval-helper --wrap --no-quiet -- echo "${TTY-}" || :
		eval-helper --wrap --no-quiet -- ps -p "$$" -o tty= || :
		set +e -x
		exec </dev/tty
		echo $?
		set -e +x

		# RUNNING ON MACOS
		# > is-tty --debug
		# < 'test' '-t' '0' >
		# </ 'test' '-t' '0' >[0]
		# < 'test' '-t' '1' >
		# </ 'test' '-t' '1' >[0]
		# < 'test' '-t' '2' >
		# </ 'test' '-t' '2' >[0]
		# < 'test' '-c' '/dev/tty' >
		# </ 'test' '-c' '/dev/tty' >[0]
		# < 'echo' '' >
		# </ 'echo' '' >[0]
		# < 'echo' '' >
		# </ 'echo' '' >[0]
		# < 'ps' '-p' '24266' '-o' 'tty=' >
		# ttys004
		# </ 'ps' '-p' '24266' '-o' 'tty=' >[0]
		# + exec
		# + echo 0
		# 0
		# + set -e +x

		# RUNNING ON MACOS VIA CRON
		# < 'test' '-t' '0' >
		# </ 'test' '-t' '0' >[1]
		# < 'test' '-t' '1' >
		# </ 'test' '-t' '1' >[1]
		# < 'test' '-t' '2' >
		# </ 'test' '-t' '2' >[1]
		# < 'test' '-c' '/dev/tty' >
		# </ 'test' '-c' '/dev/tty' >[0]
		# < 'echo' '' >
		# </ 'echo' '' >[0]
		# < 'echo' '' >
		# </ 'echo' '' >[0]
		# < 'ps' '-p' '19201' '-o' 'tty=' >
		# ??
		# </ 'ps' '-p' '19201' '-o' 'tty=' >[0]
		# + exec
		# /Users/balupton/.local/share/dorothy/commands/is-tty: line 15: /dev/tty: Device not configured
		# ++ EXIT_STATUS=1
		# ++ test is_tty = eval_capture_wrapper
		# ++ test -n is_tty
		# ++ return 1
	fi

	# [-t 0] check stdin exists
	# [-t 1] check stdout exists
	# [-t 2] check stderr exists
	# [-c '/dev/tty'] check tty exists, however it lies: crons still produce [line 228: /dev/tty: Device not configured]
	test -t 0 -a -t 1 -a -t 2 -a -c '/dev/tty' -a "${NO_TTY-}" != 'yes' -a "${TTY-}" != 'no'
	[[ "$(ps -p "$$" -o tty=)" != '?'* ]]

	# @todo handle NO_TTY=yes and TTY=no properly we need is-affirmative or echo-affirmative to not be as silly as they are
	# is-affirmative fails if given only an empty string, and echo-affirmative outputs to stderr that must be silenced
	#  -a "$(echo-affirmative "${NO_TTY-}" || :)" != 'yes' -a "$(echo-non-affirmative "${TTY-}" || :)" != 'yes'
	# if test -n "${NO_TTY-}"; then
	# 	! is-affirmative "$NO_TTY"
	# fi
	# if test -n "${TTY-}"; then
	# 	! is-affirmative "$TTY"
	# fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	is_tty "$@"
fi
