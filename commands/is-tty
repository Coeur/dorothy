#!/usr/bin/env bash

function is_tty_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-segment --h1="TEST: $0"

	function do_test {
		# trunk-ignore-all(shellcheck/SC2217)
		print_line "\$- = $-"

		print_line 'tty:'
		ps -p "$$" -o tty= || :

		( (tty -s && echo tty_s_pass) || echo tty_s_fail) || :

		print_line '-----------'

		( (test -t 0 && echo test_t_stdin_pass) || echo test_t_stdin_fail) || :
		( (test -t 1 && echo test_t_stdout_pass) || echo test_t_stdout_fail) || :
		( (test -t 2 && echo test_t_stderr_pass) || echo test_t_stderr_fail) || :

		( (test -c /dev/stdin && echo test_c_stdin_pass) || echo test_c_stdin_fail) || :
		( (test -c /dev/stdout && echo test_c_stdout_pass) || echo test_c_stdout_fail) || :
		( (test -c /dev/stderr && echo test_c_stderr_pass) || echo test_c_stderr_fail) || :
		( (test -c /dev/tty && echo test_c_tty_pass) || echo test_c_tty_fail) || :

		( (exec </dev/stdin && echo exec_from_stdin_pass) || echo exec_from_stdin_fail) || :
		( (exec </dev/stdout && echo exec_from_stdout_pass) || echo exec_from_stdout_fail) || :
		( (exec </dev/stderr && echo exec_from_stderr_pass) || echo exec_from_stderr_fail) || :
		( (exec </dev/tty && echo exec_from_tty_pass) || echo exec_from_tty_fail) || :

		( (exec >/dev/stdin && echo exec_to_stdin_pass) || echo exec_to_stdin_fail) || :
		( (exec >/dev/stdout && echo exec_to_stdout_pass) || echo exec_to_stdout_fail) || :
		( (exec >/dev/stderr && echo exec_to_stderr_pass) || echo exec_to_stderr_fail) || :
		( (exec >/dev/tty && echo exec_to_tty_pass) || echo exec_to_tty_fail) || :

		( (printf '' </dev/stdin && echo printf_from_stdin_pass) || echo printf_from_stdin_fail) || :
		( (printf '' </dev/stdout && echo printf_from_stdout_pass) || echo printf_from_stdout_fail) || :
		( (printf '' </dev/stderr && echo printf_from_stderr_pass) || echo printf_from_stderr_fail) || :
		( (printf '' </dev/tty && echo printf_from_tty_pass) || echo printf_from_tty_fail) || :

		( (printf '' >/dev/stdin && echo printf_to_stdin_pass) || echo printf_to_stdin_fail) || :
		( (printf '' >/dev/stdout && echo printf_to_stdout_pass) || echo printf_to_stdout_fail) || :
		( (printf '' >/dev/stderr && echo printf_to_stderr_pass) || echo printf_to_stderr_fail) || :
		( (printf '' >/dev/tty && echo printf_to_tty_pass) || echo printf_to_tty_fail) || :

		( (true </dev/stdin && echo true_from_stdin_pass) || echo true_from_stdin_fail) || :
		( (true </dev/stdout && echo true_from_stdout_pass) || echo true_from_stdout_fail) || :
		( (true </dev/stderr && echo true_from_stderr_pass) || echo true_from_stderr_fail) || :
		( (true </dev/tty && echo true_from_tty_pass) || echo true_from_tty_fail) || :

		( (true >/dev/stdin && echo true_to_stdin_pass) || echo true_to_stdin_fail) || :
		( (true >/dev/stdout && echo true_to_stdout_pass) || echo true_to_stdout_fail) || :
		( (true >/dev/stderr && echo true_to_stderr_pass) || echo true_to_stderr_fail) || :
		( (true >/dev/tty && echo true_to_tty_pass) || echo true_to_tty_fail) || :

		( (: </dev/stdin && echo noop_from_stdin_pass) || echo noop_from_stdin_fail) || :
		( (: </dev/stdout && echo noop_from_stdout_pass) || echo noop_from_stdout_fail) || :
		( (: </dev/stderr && echo noop_from_stderr_pass) || echo noop_from_stderr_fail) || :
		( (: </dev/tty && echo noop_from_tty_pass) || echo noop_from_tty_fail) || :

		( (: >/dev/stdin && echo noop_to_stdin_pass) || echo noop_to_stdin_fail) || :
		( (: >/dev/stdout && echo noop_to_stdout_pass) || echo noop_to_stdout_fail) || :
		( (: >/dev/stderr && echo noop_to_stderr_pass) || echo noop_to_stderr_fail) || :
		( (: >/dev/tty && echo noop_to_tty_pass) || echo noop_to_tty_fail) || :

		( (: </dev/stdin >/dev/stdin && echo noop_from_to_stdin_pass) || echo noop_from_to_stdin_fail) || :
		( (: </dev/stdout >/dev/stdout && echo noop_from_to_stdout_pass) || echo noop_from_to_stdout_fail) || :
		( (: </dev/stderr >/dev/stderr && echo noop_from_to_stderr_pass) || echo noop_from_to_stderr_fail) || :
		( (: </dev/tty >/dev/tty && echo noop_from_to_tty_pass) || echo noop_from_to_tty_fail) || :

		print_line '-----------'

		echo | ( (test -t 0 && echo echo_test_t_stdin_pass) || echo echo_test_t_stdin_fail) || :
		echo | ( (test -t 1 && echo echo_test_t_stdout_pass) || echo echo_test_t_stdout_fail) || :
		echo | ( (test -t 2 && echo echo_test_t_stderr_pass) || echo echo_test_t_stderr_fail) || :

		echo | ( (test -c /dev/stdin && echo echo_test_c_stdin_pass) || echo echo_test_c_stdin_fail) || :
		echo | ( (test -c /dev/stdout && echo echo_test_c_stdout_pass) || echo echo_test_c_stdout_fail) || :
		echo | ( (test -c /dev/stderr && echo echo_test_c_stderr_pass) || echo echo_test_c_stderr_fail) || :
		echo | ( (test -c /dev/tty && echo echo_test_c_tty_pass) || echo echo_test_c_tty_fail) || :

		( (test -t 0 0<&- && echo close_test_t_stdin_pass) || echo close_test_t_stdin_fail) || :
		( (test -t 1 1<&- && echo close_test_t_stdout_pass) || echo close_test_t_stdout_fail) || :
		( (test -t 2 2<&- && echo close_test_t_stderr_pass) || echo close_test_t_stderr_fail) || :

		( (test -c /dev/stdin 0<&- && echo close_test_c_stdin_pass) || echo close_test_c_stdin_fail) || :
		( (test -c /dev/stdout 1<&- && echo close_test_c_stdout_pass) || echo close_test_c_stdout_fail) || :
		( (test -c /dev/stderr 2<&- && echo close_test_c_stderr_pass) || echo close_test_c_stderr_fail) || :

	}

	do_test

	local stdout stderr

	echo
	print_line '### --stdoutvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout -- do_test
	print_line 'stdout ='
	echo-lines --indent='    ' <<<"$stdout"
	print_line 'stderr ='
	echo-lines --indent='    ' <<<"$stderr"

	echo
	print_line '### --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stderrvar=stderr -- do_test
	print_line 'stdout ='
	echo-lines --indent='    ' <<<"$stdout"
	print_line 'stderr ='
	echo-lines --indent='    ' <<<"$stderr"

	echo
	print_line '### --stdoutvar --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout --stderrvar=stderr -- do_test
	print_line 'stdout ='
	echo-lines --indent='    ' <<<"$stdout"
	print_line 'stderr ='
	echo-lines --indent='    ' <<<"$stderr"

	echo-segment --g1="TEST: $0"
	return 0
)
function is_tty() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if the environment actually has a TTY available.
			This is important, as otherwise calls to [tty] will result in "not a tty" being output.

			USAGE:
			is-tty
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	# correctly and safely if TTY is writable
	(printf '' >/dev/tty) &>/dev/null
	return $?
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		is_tty_test
	else
		is_tty "$@"
	fi
fi
