#!/usr/bin/env bash

# https://deno.land/#installation
# https://github.com/denoland/deno_install

# https://github.com/denoland/deno/releases
# deno-aarch64-apple-darwin.zip
# deno-x86_64-apple-darwin.zip
# deno-x86_64-pc-windows-msvc.zip
# deno-x86_64-unknown-linux-gnu.zip

# https://github.com/LukeChannings/deno-arm64/releases
# deno-linux-arm64.zip

# arm64
# https://github.com/denoland/deno/issues/4862
# https://github.com/LukeChannings/deno-arm64

# https://repology.org/project/deno/versions

function setup_util_deno() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance
	if is-needle --quiet "$@" && ! is-needle --upgrade "$@" && ! is-needle --uninstall "$@" && command-exists deno; then
		return 0
	fi

	# setup
	local arch options=(
		--cli='deno'
		"$@"
		AUR='deno' # ARCH
		BREW='deno'
		CARGO='deno'
		CHOCO='deno'
		INSTALLER='https://deno.land/install.sh'
		PORT='deno'
		SCOOP='deno'
		SNAP='deno'
		WINGET='deno'
	)
	arch="$(get-arch)"
	function get_github_asset_url {
		github-download \
			--dry \
			--slug="${2:-"denoland/deno"}" \
			--release='latest' \
			--asset-filter="$(echo-escape-regex -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$@")"
			DOWNLOAD_UNZIP_FILTER='deno'
		)
	}
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option 'deno-aarch64-apple-darwin.zip'
		elif test "$arch" = 'x64'; then
			add_download_option 'deno-x86_64-apple-darwin.zip'
		fi
	elif is-wsl; then
		if test "$arch" = 'x64'; then
			add_download_option 'deno-x86_64-pc-windows-msvc.zip'
		fi
	else
		if test "$arch" = 'a64'; then
			add_download_option 'deno-linux-arm64.zip' 'LukeChannings/deno-arm64'
		elif test "$arch" = 'x64'; then
			add_download_option 'deno-x86_64-unknown-linux-gnu.zip'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_deno "$@"
fi
