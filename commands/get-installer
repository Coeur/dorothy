#!/usr/bin/env bash

# @todo add tests to verify installers actually exist

function get-installer() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'associative'

	# define aliases for everything that is not simply: setup-util-<name>
	declare -A aliases
	aliases['bandwich']='setup-util-bandwhich'
	aliases['bash-completion']='setup-util-bash'
	aliases['build-essential']='setup-util-devel'
	aliases['cargo']='setup-rust'
	aliases['clang']='setup-util-devel'
	aliases['cloudflare-warp']='setup-util-warp'
	aliases['cmake']='setup-util-devel'
	aliases['code']='setup-util-vscode'
	aliases['coreutils']='setup-util-devel'
	aliases['diff']='setup-util-git'
	aliases['docker']='setup-docker'
	aliases['errno']='setup-util-moreutils'
	aliases['gem']='setup-ruby'
	aliases['git-delta']='setup-util-delta'
	aliases['git-lfs']='setup-util-git'
	aliases['github-cli']='setup-util-gh'
	# trunk-ignore(trufflehog/Gitlab)
	aliases['gitlab-cli']='setup-util-glab'
	aliases['gnome-remote-desktop']='setup-util-vnc'
	aliases['gnu-sed']='setup-util-gsed'
	aliases['gnupg']='setup-util-git'
	aliases['gnupgp']='setup-util-git'
	aliases['go']='setup-go'
	aliases['gpg']='setup-util-git'
	aliases['greadlink']='setup-util-coreutils'
	aliases['gxps']='setup-util-ghostscript'
	aliases['hdparam']='setup-util-devices'
	aliases['hdparm']='setup-util-devices'
	aliases['ifdown']='setup-util-netscript'
	aliases['ifup']='setup-util-netscript'
	aliases['kr']='setup-util-krypton'
	aliases['krgpg']='setup-util-krypton'
	aliases['libssl-dev']='setup-util-devel'
	aliases['llvm']='setup-util-devel'
	aliases['lshw']='setup-util-devices'
	aliases['luajit']='setup-util-neovim'
	aliases['make']='setup-util-devel'
	aliases['meld']='setup-util-git'
	aliases['moreutils']='setup-util-devel'
	aliases['net-tools']='setup-util-netstat'
	aliases['node']='setup-node'
	aliases['npm']='setup-node'
	aliases['nvim']='setup-util-neovim'
	aliases['ohmyzsh']='setup-util-zsh'
	aliases['openssh']='setup-util-git'
	aliases['openssl']='setup-util-devel'
	aliases['pinentry']='setup-util-git'
	aliases['pip']='setup-python'
	aliases['pipx']='setup-python'
	aliases['pkg-config']='setup-util-devel'
	aliases['python2']='setup-util-python'
	aliases['python3']='setup-util-python'
	aliases['raspi-config']='setup-linux-raspi'
	aliases['readlink']='setup-util-coreutils'
	aliases['realpath']='setup-util-coreutils'
	aliases['resilio-sync']='setup-util-resilio'
	aliases['rpi-eeprom']='setup-linux-raspi'
	aliases['ruby']='setup-ruby'
	aliases['rust']='setup-rust'
	aliases['rustup']='setup-rust'
	aliases['sdparm']='setup-util-devices'
	aliases['sponge']='setup-util-devel'
	aliases['sshd']='setup-util-git'
	aliases['sshfs']='setup-util-git'
	aliases['tree-sitter']='setup-util-neovim'
	aliases['visual-studio-code']='setup-util-vscode'
	aliases['warp-cli']='setup-util-warp'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output the command(s) necessary to install the <utility>.

			USAGE:
			get-installer [...options] -- ...<utility>

			RETURNS:
			Success if all <utility> had an installer.
			Failure if any <utility> did not have an installer.

			OPTIONS:
			--invoke
			    Rather than output the installer, invoke it, such that installation occurs.

			--first-success
			    Exit on the first success, ignoring earlier failures.

			--first-failure
			    Exit on the first failure, skipping later utilities.

			--quiet
			    Do not output anything.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item option_utils=() option_quiet option_invoke='no' option_first_success='no' option_first_failure='no'
	option_quiet="$(echo-quiet -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-invoke'* | '--invoke'*)
			option_invoke="$(
				get-flag-value invoke --missing="$option_invoke" -- "$item" | echo-affirmative
			)"
			;;
		'--first-success'*) option_first_success='yes' ;;
		'--first-failure'*) option_first_failure='yes' ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--')
			option_utils+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_utils+=("$item") ;;
		esac
	done

	# check
	if test "${#option_utils[@]}" -eq 0; then
		help "No <items> were specified."
	fi

	# =====================================
	# Dependencies

	setup-util-sd --quiet

	# =====================================
	# Action

	# handle each utility
	local util installer any_failure='no'
	for util in "${option_utils[@]}"; do
		# trim version suffix
		# ruby@3 => ruby
		util="${util%%@*}"
		# trim tap prefix
		# clementtsang/bottom/bottom => bottom
		util="${util##*/}"
		# trim flags, and fix up superflous spaces at the start and end
		# --classic code --classic => code
		util="$(sd '(^| )[-][^ ]+' '' <<<"$util" | sd '^\s+|\s+$' '')"

		# find it
		installer="${aliases["$util"]-}"
		if test -z "$installer"; then
			installer="setup-util-$util"
		fi
		installer="$(echo-if-command-exists "$installer" || :)"

		# handle it
		if test -z "$installer"; then
			any_failure='yes'
			if test "$option_quiet" != 'yes'; then
				echo-style --warning='No installer found for:' ' ' --code="$util" >/dev/stderr
			fi
			if test "$option_first_failure" = 'yes'; then
				return 1
			fi
		elif test "$option_invoke" = 'no'; then
			if test "$option_quiet" != 'yes'; then
				echo "$installer"
			fi
			if test "$option_first_success" = 'yes'; then
				return 0
			fi
		elif "$installer" --quiet="$option_quiet"; then
			if test "$option_first_success" = 'yes'; then
				return 0
			fi
		else
			any_failure='yes'
			if test "$option_first_failure" = 'yes'; then
				return 1
			fi
		fi
	done

	# check for failures
	test "$any_failure" = 'no'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get-installer "$@"
fi
