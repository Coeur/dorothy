#!/usr/bin/env bash

function select_shell() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/environment.sh" # ensure new installations are detected

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Set your user's login shell to become the first available shell of your preferences.

			USAGE:
			select-shell [--] ...<preference>

			OPTIONS:
			If no preferences are provided,
			then [USER_SHELLS] from your [shell.bash] user configuration file will be used.

			QUIRKS:
			You can use a command name, such as [bash] to select the preferred variation of the shell.
			You can use a full path, such as [/bin/bash] to select a specific variation of the shell.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item shells=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			shells+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) shells+=("$item") ;;
		esac
	done

	# =====================================
	# Helpers

	function none_available {
		# no shell was selected, error
		echo-style --error="No preferred shell was currently installed, as such none were able to be selected." >/dev/stderr
		return 3 # ESRCH 3 No such process
	}
	function use_shell {
		# use this specific shell
		local shell="$1" path

		# if name, expand the name into a path
		# if path, validate the path exists
		path="$(command -v "$shell" || :)"
		if test -z "$path"; then
			echo-segment --error="Failed to verify that shell [$shell] exists and is executable." >/dev/stderr
			return 8 # ENOEXEC 8 Exec format error
		fi

		# log
		echo-segment --h1="Selected [$shell] at [$path]"

		# update system whitelist
		echo-segment --h2="Update system whitelist"
		if contains-line "$path" </etc/shells; then
			echo-segment --green="Already within the system whitelist [/etc/shells]"
		else
			echo-segment --h3="Add to system whitelist [/etc/shells]"
			echo "$path" | sudo-helper -- tee -a /etc/shells
			echo-segment --g3="Add to system whitelist [/etc/shells]"
		fi
		echo-segment --g2="Update system whitelist"

		# update system selection
		echo-segment --h2="Update login shell for [$USER]"
		if command-exists chpass; then
			echo-style --dim="You can ignore [chpass: no changes made] warnings."
			# mac
			chpass -s "$path" -u "$USER"
		elif command-exists chsh; then
			# ubuntu
			chsh -s "$path" "$USER"
		elif command-exists usermod; then
			# fedora
			sudo-helper -- usermod --shell "$path" "$USER"
		elif command-exists lchsh; then
			# fedora
			echo "$path" | sudo-helper -- lchsh "$USER" >/dev/null # output is confusing
		elif test -f '/etc/passwd'; then
			# dependencies
			setup-util-gsed --quiet

			# everything else, including alpine
			sudo-helper --inherit \
				-- gsed --in-place --regexp-extended \
				--expression="s#^($USER:.+:).+?\$#\1$path#" \
				/etc/passwd
		else
			# unknown fail
			echo-style --error="Dorothy doesn't know how to set the login shell on this Operating System." >/dev/stderr
			echo-segment --e2="Update login shell for [$USER]"
			return 19 # ENODEV 19 Operation not supported by device
		fi
		echo-segment --g2="Update login shell for [$USER]"

		# success case
		echo-segment --g1="Selected [$shell] at [$path]"
		echo-style --notice="Restart your terminal, or open a new one, for the change to take effect."
	}
	function use_first_available {
		# use the first available preference passed to us
		local shell ec
		for shell in "$@"; do
			if test -z "$shell"; then
				help "Invalid configuration was received, there was an empty item:" "$(echo-verbose "$@")"
			fi
			if command-exists "$shell"; then
				echo-style --success="Preference available on this system:" ' ' --code="$shell"
				eval_capture --statusvar=ec -- use_shell "$shell"
				if test "$ec" -eq 0; then
					return 0
				fi # else continue
			else
				echo-style --warning="Preference not yet installed on this system:" ' ' --code="$shell"
			fi
		done
		none_available
	}
	function use_selection {
		# prompt the user which available shell to use
		if test "$#" -eq 0; then
			none_available
		fi
		use_shell "$(
			choose-option --required \
				--question="Which shell to use as your login shell?" \
				-- "$@"
		)"
	}

	# =====================================
	# Action

	# trim the startup message (alpine)
	if test -f /etc/motd; then
		if confirm --negative --ppid=$$ -- "Would you like to remove the startup message?" "$(echo-style --code="$(cat /etc/motd)")"; then
			sudo-helper -- rm -v /etc/motd
		fi
	fi

	# arguments
	if test "${#shells[@]}" -ne 0; then
		use_first_available "${shells[@]}"
	else
		# configuration
		source "$DOROTHY/sources/config.sh"
		USER_SHELLS=()
		load_dorothy_config 'shells.bash'
		shells=("${USER_SHELLS[@]}")
		if test "${#shells[@]}" -ne 0; then
			echo-style --notice="No argument configuration found, using user configuration."
			use_first_available "${USER_SHELLS[@]}"
		else
			# invalid
			echo-error "No argument nor user configuration found."
			return 22 # EINVAL 22 Invalid argument
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	select_shell "$@"
fi
