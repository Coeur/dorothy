#!/usr/bin/env bash
# trunk-ignore-all(shellcheck/SC2162)

function get_terminal_theme() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get whether the terminal is light or dark.

			USAGE:
			get-terminal-theme [...options]

			OPTIONS:
			--fallback=<fallback>
			    If a theme cannot be determined, output this instead.
			    If no fallback, a failure (no output, failure status) will occur.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_fallback=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--fallback='*) option_fallback="${item#*--fallback=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) paths+=("$item") ;;
		esac
	done

	# =====================================
	# Action
	
	# on macos, one can do this:
	# osascript -e 'tell application "Terminal" to get the background color of the current settings of the selected tab of front window'
	# to get back:
	# 5310, 8279, 11815
	# however that prompts the user if they want to allow terminal to access system events

	# methods
	function get_theme_via_colorfgbg {
		if test -n "${COLORFGBG-}"; then
			# COLORFGBG contains segments of ANSI colors:
			# 12;8 — Foreground color code 12 and background color code 8.
			# 1;15;10 — Foreground color code 1, background color code 15, and alternate background color code 10.
			# 7;0 — Foreground color code 7 and background color code 0.
			# 15;default;0 — Foreground color code 15, background color code default, and alternate background color code 0.
			# default;default — Foreground color code default and background color code default.
			# ANSI colors are 0-15, in which 7 and 15 are light grey, and 9-15 are light colors.
			local bg="$COLORFGBG"
			if test -n "$bg"; then
				bg="${bg##*;}" # trim everything prior to the last ;
				if test "$bg" = 'default' || test "$bg" -le 6 -o "$bg" -eq 8; then
					print_line 'light'
				else
					print_line 'dark'
				fi
				return 0
			fi
		fi
		return 200 # ECUSTOM 200 Not applicable
	}
	function get_theme_via_ansi_query {
		# If the background color is `ba1a2b3c` the read will return `1a74/2b98/3cb6`
		local _ color='' r g b l
		# stdin+stderr must be readable+writable for the read to work, but we can't check silently, as failures are noisey, and silencing the failures causes them to close: https://gist.github.com/balupton/6eee015345c663d7d7baf83d8e20ce1f so just note in this comment
		# as terminal theme is really only important for TTY use cases, use is-tty, this also solves vscode unable to ssh session into a machine
		if is-tty; then
			IFS=: read -s -t "$(get_read_decimal_timeout 0.01)" -d $'\a' -p $'\e]11;?\a' _ color || :
		fi
		if test -n "$color"; then
			# Fetch the first two characters of [1a]74/[2b]98/[3c]b6 which is our color, and convert from hexadecimal to decimal
			# For what the latter two characters are, no one seems to know: https://unix.stackexchange.com/q/754952/50703
			r=$((16#${color:0:2}))  # 1a => 26
			g=$((16#${color:5:2}))  # 2b => 43
			b=$((16#${color:10:2})) # 3c => 60

			# Figure out the lightness from HSL
			max=$((r > g ? (r > b ? r : b) : (g > b ? g : b)))
			min=$((r < g ? (r < b ? r : b) : (g < b ? g : b)))
			l=$(((max + min) * 50 / 255))

			# Is the lightness dark or light?
			if ((l < 50)); then
				print_line 'dark'
			else
				print_line 'light'
			fi
			return 0
		fi
		return 200 # ECUSTOM 200 Not applicable
	}

	# run
	local status

	# workaround for ci <-- commented out as we now implemented fallback, and I want to see what happens on CI
	# if is-ci; then
	# 	print_line "$option_fallback"
	# 	return 0
	# fi

	# try via environment variable first, it is quickest and less prone to error, but rarely available
	eval_capture --statusvar=status -- get_theme_via_colorfgbg
	if test "$status" -eq 0; then
		return 0
	fi

	# this is usually available by most TTYs, but not available
	eval_capture --statusvar=status -- get_theme_via_ansi_query
	if test "$status" -eq 0; then
		return 0
	fi

	if test -n "$option_fallback"; then
		print_line "$option_fallback"
		return 0
	fi

	return 1
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_terminal_theme "$@"
fi
