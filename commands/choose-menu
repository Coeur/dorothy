#!/usr/bin/env bash

# NOTES:
# - [--required] do not make sense here, as those are for high-level handling, this is just menu navigation

# QUIRKS:
# - if there are more options than [$LINES - header], then this will fall apart

# TODOS:
# - [ ] limit the options output to [$LINES - header]
# - [ ] if one gets to $LINES, and there are truncated values, then "scroll" downwards
# - [ ] support $COLUMNS - if a menu item is larger than the column, then it will show all of it when active

function choose_menu() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/tty.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Display a menu that the user can navigate using the keyboard.

			USAGE:
			choose-menu [...options] -- ...<items>

			RETURNS:
			The index of the result

			OPTIONS:
			--question=<question>
			    Question to display as the prompt.

			--multi
			    Multiple menu items can be selected.

			--timeout=<timeout>
			    Custom timeout value in seconds.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item='' items=() option_question='' option_timeout='' option_multi='no' option_required='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--question='*) option_question="${item#*--question=}" ;;
		'--timeout='*) option_timeout="${item#*--timeout=}" ;;
		'--no-multi'* | '--multi'*) option_multi="$(
			get-flag-value multi --missing="$option_multi" -- "$item" | echo-affirmative
		)" ;;
		'--no-required'* | '--required'*) option_required="$(
			get-flag-value required --missing="$option_required" -- "$item" | echo-affirmative
		)" ;;
		'--')
			items+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# ensure we have items
	if test "${#items[@]}" -eq 0; then
		echo-style --error="No options were provided. See [$0 --help] for usage." >/dev/stderr
		return 22 # EINVAL 22 Invalid argument
	elif is-array-partial "${items[@]}"; then
		{
			echo-style --error="Empty options were provided. See [$0 --help] for usage."
			echo-verbose "${items[@]}"
		} >/dev/stderr
		return 22 # EINVAL 22 Invalid argument
	fi

	# prepare
	local count last selections=()
	count="${#items[@]}"
	last="$((count - 1))"
	mapfile -t selections < <(get-array "$count")

	# commence
	tty_auto
	local index choice='' ec cursor=0 action=''
	while test "$action" != 'done'; do
		# question
		if test -n "$option_question"; then
			echo_line "$option_question" >/dev/tty
		fi

		# show the menu
		for index in "${!items[@]}"; do
			if test "$index" -eq "$cursor"; then
				echo_string '>' >/dev/tty
			else
				echo_string ' ' >/dev/tty
			fi
			if test "${selections[index]-}" = 'yes'; then
				echo_string '*' >/dev/tty
			else
				echo_string ' ' >/dev/tty
			fi
			choice="${items[index]}"
			echo_line "$choice" >/dev/tty
		done

		# handle the response
		eval_capture --statusvar=ec --stdoutvar=action -- read-key --timeout="$option_timeout"
		if test "$ec" -eq 60; then
			echo_line "Input timed out [$ec]." >/dev/stderr
			sleep 5
			return "$ec"
		elif test "$ec" -ne 0; then
			echo_line "Input failed [$ec]." >/dev/stderr
			# some other failure
			sleep 5
			return "$ec"
		fi

		# handle special cases and remaps
		# such as numbers, wasd, and vim movers
		if is-digit "$action"; then
			# number jump
			if test "$action" -le 1; then
				cursor=0
			elif test "$action" -le "$count"; then
				cursor="$((action - 1))"
			else
				cursor="$last"
			fi
			action='space'
		elif test "$action" = "left" -o "$action" = "h" -o "$action" = "k" -o "$action" = "a" -o "$action" = "w"; then
			action='up'
		elif test "$action" = "right" -o "$action" = "l" -o "$action" = "j" -o "$action" = "d" -o "$action" = "s"; then
			action='down'
		fi

		# control key
		if test "$action" = "up"; then
			if test "$cursor" -ne 0; then
				cursor="$((cursor - 1))"
			fi
		elif test "$action" = "down"; then
			if test "$cursor" -ne "$last"; then
				cursor="$((cursor + 1))"
			fi
		elif test "$action" = "home"; then
			cursor=0
		elif test "$action" = "end"; then
			cursor="$last"
		elif test "$action" = "backspace"; then
			# unselect everything
			for index in "${!items[@]}"; do
				selections[index]=''
			done
		elif test "$action" = "all" -a "$option_multi" = 'yes'; then
			# select everything
			for index in "${!items[@]}"; do
				selections[index]='yes'
			done
		elif test "$action" = 'tab'; then
			# select and move to next line
			selections[cursor]='yes'
			if test "$cursor" -eq "$last"; then
				cursor=0
			elif test "$cursor" -lt "$last"; then
				cursor="$((cursor + 1))"
			fi
		elif test "$action" = 'space'; then
			# toggle single
			if test "${selections[cursor]}" = 'yes'; then
				selections[cursor]=''
			else
				selections[cursor]='yes'
				if test "$option_multi" != 'yes'; then
					break
				fi
			fi
		elif test "$action" = "enter"; then
			if test "$option_multi" != 'yes'; then
				selections[cursor]='yes'
			fi
			break
		elif test "$action" = "escape"; then
			# todo implement --required with --multi fallback properly here
			if test "$option_required" = 'no'; then
				break
			fi
		fi

		# no break, so repeat the menu
		tty_clear
	done

	# if break, then no clear occured, so clear it here
	tty_clear

	# if multi with no selection then ask for everything
	# todo implement --required properly here
	if is-array-empty "${selections[@]}" && test "$option_multi" = 'yes'; then
		if confirm --positive --ppid=$$ -- "You exited without selecting anything, do you wish to select all?" >/dev/tty; then
			for index in "${!items[@]}"; do
				selections[index]='yes'
			done
		fi
		tty_clear
	fi

	# output the custom selections
	local index selection
	for index in "${!selections[@]}"; do
		selection="${selections[index]}"
		if test "$selection" = 'yes'; then
			echo_line "$index"
		fi
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	choose_menu "$@"
fi
