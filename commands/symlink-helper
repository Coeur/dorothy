#!/usr/bin/env bash

# @todo currently this is only for creating, however we could make it also for listing/finding as well

function symlink-helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Create a symlink at a new location that points to an existing location.

			USAGE:
			symlink-helper [...options] --existing=<existing> --symlink=<symlink>

			OPTIONS:
			--relative
			    Save the symlink target as a relative path instead of absolute.

			--existing=<existing>
			    The target of the symlink.

			--symlink=<symlink>
			     The location of the symlink to modify.

			EXAMPLES:
			symlink-helper --existing="$HOME" --symlink=./my-home-folder-symlink
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item existing='' symlink='' relative='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--existing='*) existing="${item#*--existing=}" ;;
		'--symlink='*) symlink="${item#*--symlink=}" ;;
		'--no-relative'* | '--relative'*)
			relative="$(get-flag-value relative --missing="$relative" -- "$item" | echo-affirmative)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$item"; then
				help "Empty argument provided."
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	function help_missing {
		cat <<-EOF >/dev/stderr
			$(echo-style --error="FAILURE:")
			The path to be symlinked $(echo-style --code="$existing") doesn't actually exist.
			As such, we cannot create a symlink at $(echo-style --code="$symlink") pointing to it.
			Create the path at $(echo-style --code="$existing") first, then try again.
		EOF
		return 2 # ENOENT No such file or directory
	}
	if test -z "$existing"; then
		existing="$(
			ask --required \
				--question="What is the existing path that you want to symlink elsewhere?"
		)"
	fi
	if test -z "$symlink"; then
		symlink="$(
			ask --required \
				--question="What is the new path that you want to redirect?"
		)"
	fi

	# dependencies
	setup-util-coreutils --quiet

	# =====================================
	# Act

	# check the existance of the source, if it doesn't exist, there is no point
	if test ! -e "$existing"; then
		help_missing
	fi

	# if the symlink doesn't exist, ensure its parent path at least exists
	if test ! -e "$symlink"; then
		mkdir -p "$(fs-dirname -- "$symlink")"
	fi

	# ensure validity of existing path
	local original
	while true; do
		# ensure both paths are not relative paths, otherwise wierd things will happen
		existing="$(fs-absolute -- "$existing")"
		symlink="$(fs-absolute -- "$symlink")"

		# double check the existance of the source, if it doesn't exist, there is no point
		if test ! -e "$existing"; then
			help_missing
		fi

		# check if the existing path is a symlink
		# if it is, then use its target instead, and repeat the checks
		if test -L "$existing"; then
			original="$existing"
			existing="$(fs-realpath -- "$existing")"
			echo-style --bold="üíÅ‚Äç‚ôÄÔ∏è Target " --code="$original" --bold=" redirects to " --code="$existing" --bold=" üëâ using the redirection..." >/dev/stderr
			continue
		fi

		# all checks passed, break
		break
	done

	# check if the symlink path already exists
	if test -e "$symlink"; then
		if test -L "$symlink"; then
			echo-style --bold="üíÅ‚Äç‚ôÄÔ∏è Symlink already exists at " --code="$symlink" --bold=" üëâ recreating..." >/dev/stderr
			rm "$symlink"
		else
			fs-rm -- "$symlink"
		fi
	fi

	# create the symlink
	if test "$relative" = 'yes'; then
		existing="$(fs-realpath --relative-to="$(fs-dirname -- "$symlink")" -- "$existing")"
	fi
	ln -sfF "$existing" "$symlink"

	# log result to stderr
	echo-style --success="üëç Symlink created at " --code="$symlink" --bold=" targetting " --code="$existing"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	symlink-helper "$@"
fi
