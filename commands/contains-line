#!/usr/bin/env bash

function contains_line() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Returns [0] if any STDIN line matched <expected>, otherwise returns [1].

			USAGE:
			echo-lines ...<input> | contains-line <expected> [...options]

			OPTIONS:
			<expected>
			    The line to search STDIN for.

			$(stdinargs_options_help --stdin)

			USAGE:
			echo-lines -- 'one' 'two' 'three'  | contains-line 'two'    # success
			echo-lines -- 'one' 'two' 'three'  | contains-line 'three'  # success
			echo-lines -- 'one' 'two' 'three'  | contains-line 'w'      # failure
			echo-lines -- 'one' 'two' 'three'  | contains-line ''       # failure

			RETURNS:
			[0] if the line is contained in STDIN.
			[1] if the line is not contained in STDIN.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process <expected>
	local expected="$1"
	shift

	# =====================================
	# Action

	function on_arg {
		help 'Use STDIN.'
	}
	function on_line {
		if test "$1" = "$expected"; then
			# it was found, success case, exit immediately
			exit 0
		fi
		# not found, continue reading
	}
	function on_finish {
		# it was not found, failure case
		return 1
	}

	stdinargs --stdin "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	contains_line "$@"
fi
