#!/usr/bin/env bash

function contains_line() (
	source "$DOROTHY/sources/bash.bash"

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Returns [0] if a STDIN line matched <line>, otherwise returns [1].

			USAGE:
			contains-line <line>
			echo-lines <...input> | contains-line <line>

			USAGE:
			echo-lines 'one' 'two' 'three'  | contains-line 'two'    # success
			echo-lines 'one' 'two' 'three'  | contains-line 'three'  # success
			echo-lines 'one' 'two' 'three'  | contains-line 'w'      # failure
			echo-lines 'one' 'two' 'three'  | contains-line ''       # failure

			RETURNS:
			[0] if the line is contained in stdin.
			[1] if the line is not contained in stdin.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	local expected=''
	function on_arg {
		if test -z "$expected"; then
			expected="$1"
		else
			help "An unrecognised argument was provided: $1"
		fi
	}
	function on_line {
		if test "$1" = "$expected"; then
			# it was found, success case, exit immediately
			exit 0
		fi
		# not found, continue reading
	}
	function on_finish {
		# it was not found, failure case
		return 1
	}
	function on_no_args {
		help "Missing <line> argument."
	}
	function on_no_stdin {
		help "Missing STDIN to check the <line> against." || :
		return 96 # ENODATA 96 No message available on STREAM
	}

	local REQUIRE_STDIN='yes'
	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	contains_line "$@"
fi
