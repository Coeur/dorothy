#!/usr/bin/env bash

function setup_node() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile' 'empty'
	source "$(type -P eval-helper)"

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# environment.bash provides:
	# NVM_DIR
	# but in case it failed to:
	if test -z "${NVM_DIR-}"; then
		export NVM_DIR="$HOME/.nvm"
	fi

	# setup.bash provides:
	local NPM_INSTALL=()
	local NODE_INSTALL=() # deprecated, use NPM_INSTALL
	load_dorothy_config 'setup.bash'

	# deprecations
	if test "${#NODE_INSTALL[@]}" -ne 0; then
		NPM_INSTALL+=("${NODE_INSTALL[@]}")
		update_dorothy_user_config 'setup.bash' -- \
			--field='NODE_INSTALL' --replace= \
			--field='NPM_INSTALL' --array="$(echo-lines -- "${NPM_INSTALL[@]}" | sort --ignore-case | uniq)"
	fi

	# adjustments
	mapfile -t NPM_INSTALL < <(prepare_packages 'NPM_INSTALL' -- "${NPM_INSTALL[@]}")

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-node [--flags]

			FLAGS:
			--configure
			    Configuration guide.

			--optional
			    Only setup if it is needed by packages.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item reconfigure='no' optional=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-optional'* | '--optional'*)
			optional="$(get-flag-value optional --missing="$optional" -- "$item" | echo-affirmative || :)"
			;;
		'--no-configure'* | '--configure'*)
			reconfigure="$(get-flag-value configure --missing="$reconfigure" -- "$item" | echo-affirmative)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# check
	if test "$optional" = 'yes' -a "${#NPM_INSTALL[@]}" -eq 0 && ! confirm --negative --ppid=$$ -- 'Setup Node.js?'; then
		return 0
	fi

	# dependencies
	setup-util-sd --quiet

	# =====================================
	# Helpers

	function get_nvm_versions { # üëç /docs/bash/errors: disabled errexit
		source "$DOROTHY/sources/ripgrep.bash"
		nvm-env nvm ls --no-colors --no-alias | rg -o 'v([^\s]+)' --replace '$1' || :
	}

	function clean_nvm { # üëç /docs/bash/errors: disabled errexit
		# prepare
		local versions version
		# swap to system
		nvm-env nvm use system || :
		# fetch versions
		mapfile -t versions < <(get_nvm_versions)
		if test "${#versions[@]}" -eq 0; then
			# already clean
			return 0
		fi
		# clean versions
		for version in "${versions[@]}"; do
			nvm-env nvm uninstall "$version" | sd 'Uninstalled node ' 'Uninstalled: '
		done
		# confirm clean was successful
		mapfile -t versions < <(get_nvm_versions)
		test "${#versions[@]}" -eq 0
	}

	function wipe_nvm {
		fs-rm --no-confirm --quiet -- "$NVM_DIR"
	}

	function clean_otherwise_wipe_nvm {
		# clean only what is necessary
		echo-segment --h3='Clean Node.js versions and packages'
		if clean_nvm; then
			echo-segment --g3='Clean Node.js versions and packages'
		else
			# nvm buggered, clean it all
			echo-segment --e3='Clean Node.js versions and packages'
			echo-segment --h3='Clean Node.js Version Manager (NVM) instead'
			wipe_nvm
			echo-segment --g3='Clean Node.js Version Manager (NVM) instead'
		fi
	}

	function install_nvm {
		if test -d "$NVM_DIR"; then
			cd "$NVM_DIR"
		else
			mkdir -p "$NVM_DIR"
			cd "$NVM_DIR"
			git init
			git remote add origin 'https://github.com/nvm-sh/nvm.git'
		fi
		# ensure git remote is usable
		git-helper protocol-update origin https
		# fetch tags
		git fetch --tags origin
		# checkout latest stable tag
		git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
	}

	function install_nvm_node {
		# install
		nvm-env nvm install --no-progress node || return         # latest active
		nvm-env --2596 nvm install --no-progress --lts || return # latest LTS

		# set default node version
		if is-brew; then
			nvm-env nvm alias default system || return
		else
			# use latest lts
			nvm-env nvm alias default stable || return
			# use current lts: "$(nvm version-remote --lts)"
		fi
	}

	function install_system_node {
		setup-util --name='Node.js via System' --cli=node --force --quiet \
			APK='nodejs' APK='npm' \
			APT_KEY='https://deb.nodesource.com/gpgkey/nodesource.gpg.key' \
			APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://deb.nodesource.com/node_18.x {RELEASE} main' \
			APT='nodejs' \
			AUR='nodejs' AUR='npm' \
			BREW='node' \
			BSD='nodejs' \
			CHOCO='nodejs.install' \
			EMERGE='nodejs' \
			EOPKG='nodejs' \
			RPM='nodejs' \
			SCOOP='nodejs' \
			SNAP='node --classic' \
			WINGET='OpenJS.NodeJS' \
			XBPS='nodejs' \
			ZYPPER='nodejs' # SUSE
		print_line "Installed: $(node --version)"
	}

	function upgrade_system_or_nvm_npm {
		# ensure the cache is configured correctly
		# to avoid when say a /Users/... cache config is copied to a Linux machine
		local cache_dir
		cache_dir="$(nvm-env npm config get cache || :)"
		if test -n "$cache_dir" -a ! -d "$cache_dir"; then
			# try and make it
			mkdir -p "$cache_dir" || {
				echo-style --notice="Unconfiguring the invalid cache directory:" --code="$cache_dir"
				nvm-env npm config delete cache
			}
		fi

		# continue with the upgrade
		echo-style --dim="Before: $(nvm-env npm --version)"
		setup-util --name='npm' --upgrade --force --quiet \
			NPM='npm' || echo-style --notice='You can ignore the npm ugprade failure, this will resolve after nvm is used.'
		nvm-env npm cache clean --force
		print_line "After:  $(nvm-env npm --version)"
	}

	function configure_system_npm {
		echo-segment --h2='Configure npm'
		nvm-env npm config set init-author-name "$(
			ask --required --confirm \
				--question="What is the profile name that you want to configure npm with?" \
				--default="$(get-profile name -- npm ... || :)"
		)"
		nvm-env npm config set init-author-email "$(
			ask --required --confirm \
				--question="What is the profile email that you want to configure npm with?" \
				--default="$(get-profile email -- npm ... || :)"
		)"
		nvm-env npm config set init-author-url "$(
			ask --required --confirm \
				--question="What is the profile homepage that you want to configure npm with?" \
				--default="$(get-profile url -- npm ... || :)"
		)"
		nvm-env npm config set init-license "$(
			ask --required --confirm \
				--question="What license do you want to configure npm to default to?" \
				--default="$(npm config get init-license)"
		)"
		echo-segment --g2='Configure npm'
	}

	# =====================================
	# Start

	echo-segment --h1='Setup Node.js'

	# =====================================
	# Install Node via System

	# https://nodejs.org/en/download/package-manager/
	# @todo https://github.com/nodejs/unofficial-builds for riscv, but provides tars that include multiple directories
	echo-segment --h2='Install Node.js via System'
	install_system_node
	echo-segment --g2='Install Node.js via System'

	# =====================================
	# Clean NVM

	# clean NVM unless configured otherwise
	# the intent of this is to purge unused global Node.js versions and packages
	# we use a configuration variable to change this, as interuppting the flow and asking the user creates too much confusion
	# as such a question is only necessary to experienced users
	if test -d "$NVM_DIR"; then
		clean_otherwise_wipe_nvm
	fi

	# =====================================
	# Install NVM and Node via NVM

	# (arm) alpine does not support nvm, fails with:
	# > mode no such file or directory
	if ! is-alpine; then
		# install nvm
		echo-segment --h2='Install Node.js Version Manager (NVM)'
		echo-style --dim "NVM_DIR=$NVM_DIR"
		eval_helper --quiet --no-wrap \
			-- install_nvm
		echo-segment --g2='Install Node.js Version Manager (NVM)'

		# nvm node
		echo-segment --h2='Install Node.js via NVM'
		echo-style --dim='Installs active and LTS versions.'
		eval_helper --no-quiet --no-wrap \
			-- install_nvm_node
		mapfile -t versions < <(get_nvm_versions)
		for version in "${versions[@]}"; do
			print_line "Installed: v$version"
		done
		echo-segment --g2='Install Node.js via NVM'
	fi

	# =====================================
	# Upgrade npm

	echo-segment --h3='Upgrade npm'
	upgrade_system_or_nvm_npm
	echo-segment --g3='Upgrade npm'

	# =====================================
	# Reconfigure npm

	# check
	if
		is-empty-value "$(npm config get init-author-name)" ||
			is-empty-value "$(npm config get init-author-email)" ||
			is-empty-value "$(npm config get init-author-url)" ||
			is-empty-value "$(npm config get init-license)"
	then
		reconfigure='yes'
	fi

	# reconfigure
	if test "$reconfigure" = 'yes'; then
		configure_system_npm
	fi

	# =====================================
	# Packages via npm

	setup-util --installer="NODE" -- "${NPM_INSTALL[@]}"

	# =====================================
	# Finish

	echo-segment --g1='Setup Node.js'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_node "$@"
fi
