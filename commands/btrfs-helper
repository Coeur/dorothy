#!/usr/bin/env bash

function btrfs-helper() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Wrappers around btrfs to make things easier.

			USAGE:
			btrfs-helper <action>

			ACTIONS:
			<devices|drives>
			    Lists all btrfs formatted devices.

			<device|drive> -- <btrfs-filesystem-label>
			    Gets the primary device for a btrfs filesystem label.

			mounts
			    Lists all mount points of btrfs formatted devices.

			new
			    Formats a selected device to btrfs.

			add
			    Adds a selected device to an selected btrfs mount point.

			balance
			    Runs a btrfs raid1 balance on a selected btrfs mount point.

			verify -- <btrfs-filesystem-label> <expected-count-of-btrfs-filesystem-devices>
			    Verifies that the device count for a btrfs filesystem label is correct.

			mounted -- <btrfs-filesystem-label> <expected-mount-point>
			    Verifies that the btrfs filesystem label is mounted to the expected mount point.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item action='' args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# convert
	if test "$action" = 'drives'; then
		action='devices'
	elif test "$action" = 'drive'; then
		action='device'
	fi

	# ensure valid action
	local actions=(
		devices
		device
		mounts
		new
		add
		balance
		verify
		mounted
	)
	action="$(
		choose-option --required \
			--question='What action to perform?' \
			--filter="$action" -- "${actions[@]}"
	)"

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Helpers

	# Get all the mount points which btrfs devices are mounted to
	function get_btrfs_mounts {
		if is-mac; then
			df -T btrfs
		else
			df --type=btrfs
			# df -Th | awk '($2 == "btrfs") {print $7}'
			# lsblk -f | awk '($2 == "btrfs" && $7) {print $7}'
		fi
	}

	# Prompt for a specific btrfs mount point
	function get_btrfs_mount {
		local question="$1" mounts
		mapfile -t mounts < <(btrfs_mounts)
		choose-option --required \
			--question="$question" \
			-- "${mounts[@]}"
	}

	# Prompt for a specific device
	function get_any_device {
		local question="$1" devices=()
		mapfile -t devices < <(get-devices)
		choose-option --required \
			--question="$question" \
			-- "${devices[@]}"
	}

	# Get all the devices which are formatted to btrfs
	function get_btrfs_devices {
		lsblk -f | awk '/btrfs/ {print "/dev/"$1}'
	}

	# Prompt for a specific btrfs device
	function get_btrfs_device {
		local question="$1" devices=()
		mapfile -t devices < <(get_btrfs_devices)
		choose-option --required \
			--question="$question" \
			-- "${devices[@]}"
	}

	# Get the primary device of a btrfs filesystem label
	function get_btrfs_device_for_label {
		local label="$1"
		blkid -L "$label"
	}

	# Get the devices of a btrfs filesystem label
	function get_btrfs_devices_for_label {
		local label="$1"
		sudo-helper \
			-- btrfs filesystem show "$label" | rg -o 'path ([a-z0-9/]+)' --replace '$1'
	}

	# Count the devices of a btrfs filesystem label
	function get_btrfs_count_for_label {
		local label="$1"
		sudo-helper \
			-- btrfs filesystem show "$label" | rg -o 'Total devices ([0-9]+)' --replace '$1'
	}

	# =====================================
	# Actions

	function act_mounts {
		get_btrfs_mounts
	}

	function act_devices {
		get_btrfs_devices
	}

	function act_new {
		local device label
		device="$(
			get_any_device "Which device to erase and format as btrfs?"
		)"
		label="$(
			ask --required \
				--question="What label to use for the new btrfs filesystem that will be attached to the device [$device]?"
		)"
		eval-helper --no-quiet --wrap --confirm \
			-- sudo-helper \
			-- mkfs.btrfs -f -L "$label" "$device"
	}

	# Add a device to a btrfs cluster
	function act_add {
		local device mount
		echo 'You will now specify a mount point of an existing btrfs cluster, and a device that you wish to be erased and added to it.'
		mount="$(get_btrfs_mount "Which mount point is the btrfs cluster that will house the new device?")"
		device="$(get_any_device "Which device is the one to be erased then added into the btrfs cluster?")"

		# add the device to the mount point
		eval-helper --no-quiet --wrap --confirm \
			-- sudo-helper \
			-- btrfs device add -f "$device" "$mount"

		# balance the devices of the mount point
		eval-helper --no-quiet --wrap --confirm \
			-- sudo-helper \
			-- btrfs balance start --background -dconvert=raid1 -mconvert=raid1 "$mount"
	}

	# Resume a balance
	function act_balance {
		local mount
		mount="$(get_btrfs_mount "Which btrfs mount point should we resume/start a btrfs raid1 balance operation on?")"

		if eval-helper --no-quiet --wrap \
			-- sudo-helper \
			-- btrfs balance status -v "$mount"; then

			# finished
			eval-helper --no-quiet --wrap \
				-- sudo-helper \
				-- btrfs balance start --background -dconvert=raid1 -mconvert=raid1 "$mount"
		else
			# in progress
			eval-helper --no-quiet --wrap \
				-- sudo-helper \
				-- btrfs balance resume "$mount"
		fi
	}

	# Verify the amount of btrfs devices matches the expected ount
	function act_verify {
		local label="$1" expected="$2" actual
		actual="$(get_btrfs_count_for_label "$label")"
		if test "$actual" -ne "$expected"; then
			{
				echo-style --error="$actual out of $expected devices available"
				echo-style --warning="Try again when all devices are available."
			} >/dev/stderr
			return 1
		fi
	}

	function act_mounted {
		local label="$1" mount="$2" device
		device="$(get_btrfs_device_for_label "$label")"
		mount-helper --mounted --source="$device" --target="$mount"
	}

	function act_device {
		local label="${1-}"
		if test -n "$label"; then
			get_btrfs_device_for_label "$label"
		else
			get_btrfs_device 'Which btrfs device to select?'
		fi
	}

	# =====================================
	# Act

	if test "$(type -t "act_$action")" = 'function'; then
		"act_$action" "${args[@]}"
		return "$?"
	else
		echo-error "$0: Action not yet implemented: $action"
		return 78 # Function not implemented
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	btrfs-helper "$@"
fi
