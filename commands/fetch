#!/usr/bin/env bash

function fetch() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Fetch the URL, using whichever tool is available on your system.

			USAGE:
			fetch [...options] <url>

			OPTIONS:
			--[no-]status[=<yes|no>]
			    If truthy, output only the status code, rather than the entire contents of the fetch URL.

			--[no-]ok[=<yes|no>]
			    If truthy, skip fetching contents and only test if fetching the URL returned a success status code.
			    If falsey, skip fetching contents and only test if fetching the URL returned a non-successful status code.

			QUIRKS:
			If [curl] was required, but not found, it will be installed automatically.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_url='' option_status='no' option_ok=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-status'* | '--status'*)
			option_status="$(get-flag-value status --missing="$option_status" -- "$item" | echo-affirmative)"
			;;
		'--no-ok'* | '--ok'*)
			option_ok="$(get-flag-value ok --missing="$option_ok" -- "$item" | echo-affirmative)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$option_url"; then
				option_url="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test -z "$option_url"; then
		help "No URL was provided"
	fi

	# =====================================
	# Helpers

	function log_failure {
		local status="$?"
		echo-style --error="Failed to fetch the URL:" ' ' --code="$option_url" >/dev/stderr
		return "$status"
	}

	#  -I, --head                        Show document info only
	#  -m, --max-time <seconds>          Maximum time allowed for the transfer
	#  -o, --output <file>               Write to file instead of stdout
	#  -s, --silent                      Silent mode
	#  -A, --user-agent <name>           Send User-Agent <name> to server
	#  -w, --write-out <format>          Use output FORMAT after completion
	function fetch_status {
		local args=(
			--head
			--max-time 3
			--output /dev/null
			--silent
			--write-out '%{http_code}'
		)
		setup-util-curl --quiet
		curl "${args[@]}" --location "$option_url" || log_failure
	}

	function fetch_ok {
		local status
		status="$(fetch_status "$option_url")"
		test "$status" -ge 200 -a "$status" -le 300
	}

	function fetch_contents {
		if command-exists curl; then
			# use echo-wait to fix [curl: (23) Failure writing output to destination] when piping to ripgrep
			curl -fsSL "$option_url" | echo-wait || log_failure
		elif command-exists wget; then
			wget "$option_url" -O - || log_failure
		else
			get-installer --first-success --invoke --quiet -- curl wget
			fetch_contents
		fi
	}

	# =====================================
	# Action

	# perform appropriate action
	if test "$option_status" = 'yes'; then
		fetch_status
	elif test "$option_ok" = 'yes'; then
		fetch_ok
	elif test "$option_ok" = 'no'; then
		local ok_status
		eval_capture --statusvar=ok_status -- fetch_ok
		test "$ok_status" -ne 0
	else
		fetch_contents
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	fetch "$@"
fi
