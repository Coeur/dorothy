#!/usr/bin/env bash

function echo_lines_after_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	eval-tester --name='using arguments' --stdout=$'c\nd' \
		-- echo-lines-after '' -- a b '' c d

	{
		echo-lines -- a b '' c d
	} | eval-tester --name='using stdin' --stdout=$'c\nd' \
		-- echo-lines-after ''

	{
		echo-lines -- a b '' c d
	} | eval-tester --name='using --stdin' --stdout=$'c\nd' \
		-- echo-lines-after '' --stdin

	{
		echo-lines -- a b '' c d
	} | eval-tester --name='using -' --stdout=$'c\nd' \
		-- echo-lines-after '' -

	eval-tester --name='using <<<' --stdout=$'c\nd' \
		-- echo-lines-after '' - <<<"$(echo-lines -- a b '' c d)"

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_lines_after() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get everything after the first recurrence of <line>.

			USAGE:
			echo-lines-after <needle> [...options] [--] ...<input>
			echo-lines ...<input> | echo-lines-after <needle> [...options]

			OPTIONS:
			<needle>
			    Only output the <input> that is after this line.

			$(stdinargs_options_help --)

			EXAMPLE:

			echo-lines-after '' -- a b '' '' c d

			    c
			    d
			    # exit status: 0

			echo-lines -- a b '' '' c d | echo-lines-after '' --stdin

			    c
			    d
			    # exit status: 0

			echo-lines-after '' --stdin <<< "\$(echo-lines -- a b '' c d)"

			    c
			    d
			    # exit status: 0
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process <needle>
	local option_needle="$1"
	shift

	# =====================================
	# Action

	local found='no'
	function on_input {
		if test "$1" = "$option_needle"; then
			found='yes'
		elif test "$found" = 'yes'; then
			print_line "$1"
		fi
	}

	stdinargs "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_lines_after_test
	else
		echo_lines_after "$@"
	fi
fi
