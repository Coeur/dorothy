#!/usr/bin/env bash

function echo_wait_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-segment --h1="TEST: $0"

	# dependencies
	setup-util-moreutils --quiet --optional # sponge

	# prepare
	function broken_pipe {
		# the curl will fail because of the progress bar
		print_line 'before broken pipe'
		curl --fail-early --head --write-out '%{http_code}' --location 'https://www.google.com' | "$@" | tail -n 1
		print_line 'after broken pipe'
	}
	function broken_pipe_to_control {
		broken_pipe 'echo'
	}
	function broken_pipe_to_sponge {
		broken_pipe 'sponge'
	}
	function broken_pipe_to_echo_wait {
		broken_pipe echo-wait "$@"
	}

	# broken pipe tests
	eval_tester --name='broken pipe is broken' --status=23 --stdout=$'before broken pipe' --ignore-stderr \
		-- broken_pipe_to_control

	if command-exists sponge; then # on fresh macos ci, it won't exist
		eval_tester --name='broken pipe to sponge' --stdout=$'before broken pipe\n200after broken pipe' --ignore-stderr \
			-- broken_pipe_to_sponge
	fi

	eval_tester --name='broken pipe to echo-wait --no-sponge' --stdout=$'before broken pipe\n200after broken pipe' --ignore-stderr \
		-- broken_pipe_to_echo_wait --no-sponge

	if command-exists sponge; then # on fresh macos ci, it won't exist
		eval_tester --name='broken pipe to echo-wait --sponge' --stdout=$'before broken pipe\n200after broken pipe' --ignore-stderr \
			-- broken_pipe_to_echo_wait --sponge
	fi

	eval_tester --name='broken pipe to echo-wait' --stdout=$'before broken pipe\n200after broken pipe' --ignore-stderr \
		-- broken_pipe_to_echo_wait

	# write to file tests
	local file
	file="$(fs-temp --file --extension='txt')"

	# ensure whitespace padding to ensure we aren't accidentally trimming it
	eval_tester --name='write to file with sponge' \
		-- echo-wait --sponge "$file" <<<' write test 1 '
	eval_tester --name='write to file with sponge: assertion' --stdout=' write test 1 ' \
		-- cat "$file"

	eval_tester --name='write to file without sponge' \
		-- echo-wait --no-sponge "$file" <<<' write test 2 '
	eval_tester --name='write to file without sponge: assertion' --stdout=' write test 2 ' \
		-- cat "$file"

	eval_tester --name='write to file with sudo and sponge' \
		-- echo-wait --sudo --sponge "$file" <<<' write test 3 '
	eval_tester --name='write to file with sudo and sponge: assertion' --stdout=' write test 3 ' \
		-- sudo-helper -- cat "$file"

	eval_tester --name='write to file with sudo and without sponge' \
		-- echo-wait --sudo --no-sponge "$file" <<<' write test 4 '
	eval_tester --name='write to file with sudo and without sponge: assertion' --stdout=' write test 4 ' \
		-- sudo-helper -- cat "$file"

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_wait() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Prompt the user for an input value in a clean and robust way.

			USAGE:
			curl -I -fail https://www.google.com | echo-wait [...options] [--] [...<file>] | echo

			OPTIONS:
			--sponge
			    Enforce usage of sponge for output buffering.

			--no-sponge
			    Disable usage of sponge for output buffering.

			--sudo
			    Use sudo to write to the <file>.

			[...<file>]
			    A file to write to.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_sponge='' option_sudo='no' option_files=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-sponge'* | '--sponge'*)
			option_sponge="$(get-flag-value sponge --missing="$option_sponge" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value sudo --missing="$option_sudo" -- "$item" | echo-affirmative --stdin)"
			;;
		'--')
			option_files+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_files+=("$item") ;;
		esac
	done

	# install sponge if needed
	if test "$option_sponge" = 'yes'; then
		setup-util-moreutils --quiet # sponge
	fi
	if test "$option_sponge" != 'no' && command-exists sponge; then
		option_sponge='yes'
	else
		option_sponge='no'
	fi

	# check sudo
	if test "$option_sudo" = 'yes' -a "${#option_files[@]}" -eq 0; then
		help "<sudo> requires <file>s"
	fi

	# adapt commands for sudo and files, and check sudo
	local sponge_output_command=() tee_output_command=()
	if test "${#option_files[@]}" -ne 0; then
		if test "$option_sudo" = 'yes'; then
			sponge_output_command+=(
				sudo-helper
				--reason="Your sudo/root/login password is required to update the files: ${option_files[*]}"
				--
			)
			tee_output_command+=(
				sudo-helper
				--reason="Your sudo/root/login password is required to update the files: ${option_files[*]}"
				--
			)
		fi
		if test "$option_sponge" = 'yes'; then
			sponge_output_command+=(
				"$(type -P sponge)"
				"${option_files[@]}"
			)
		else
			tee_output_command+=(
				"$(type -P tee)"
				"${option_files[@]}"
			)
		fi
	fi

	# =====================================
	# Action

	if test "$option_sponge" = 'yes'; then
		if test "${#option_files[@]}" -ne 0; then # bash v3 compat
			"${sponge_output_command[@]}" </dev/stdin
		else
			sponge </dev/stdin
		fi
	else
		local entire_read_contents=''
		# IFS='' to not trim whitespace lines (e.g. ' ' would otherwise become '')
		while IFS='' read -r item; do
			entire_read_contents+="$item"$'\n'
		done </dev/stdin
		if test -n "$item"; then
			entire_read_contents+="$item"
		fi
		if test "${#option_files[@]}" -ne 0; then # bash v3 compat
			printf '%s' "$entire_read_contents" | "${tee_output_command[@]}" >/dev/null
			# ^ /dev/null to be consistent with sponge
		else
			printf '%s' "$entire_read_contents"
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_wait_test
	else
		echo_wait "$@"
	fi
fi
