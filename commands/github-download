#!/usr/bin/env bash

function github_download() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Download a file from a GitHub repository.

			USAGE:
			github-download [...options]

			OPTIONS:
			--slug=<org>/<repo>
			    E.g. 'bevry/dorothy'

			--ref=<branch,commit,tag>
			    E.g. 'master'
			    If omitted attempts 'master' then attempts 'main'.

			--pathname=<pathname>
			    E.g. 'commands/github-download'
			    Can be used with [--ref] to specify which directory and file within the reference to download.
			    If [--ref] is provided, but this omitted, the entire reference will be downloaded,
			        and can be combined with [--unzip-filter].

			--release=<release,tag>
			    E.g. 'latest'
			    Can be used to download from a release, instead of a reference.

			--asset-filter=<regexp>
			    Can be used with [--release] to select which release asset to download.

			--unzip-format=<format>
			    If downloading a zip file, use this to enforce an extraction <format>.
			    This option is handled by the [unziptar] command.

			--unzip-filter=<filter>
			    If downloading a zip file, use this to only extract files that match the glob pattern <filter>.
			    This option is handled by the [unziptar] command.

			--directory=<directory>
			    Place downloaded file(s) inside <directory>.
			    If ommitted, the current working directory will be used.

			--file=<file>
			    If only a single file was downloaded, rename it to <file>.
			    If multiple files were downloaded, then fail.

			--path=<directory>/<file>
			    If only a single file was downloaded, rename it to <file>, and place it inside <directory>.
			    If multiple files were downloaded, then fail.

			--[no-]quiet
			    Whether or not output should be simplified, defaults to enabled.

			--[no-]dry
			    Whether or not to only output the resolved URL and do nothing else.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item slug='' reference='' pathname='' release='' asset_filter='' unzip_format='' unzip_filter='' directory='' file='' path='' quiet='yes' dry='no'
	quiet="$(echo-quiet "$quiet" -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--slug='*) slug="${item#*--slug=}" ;;
		'--ref='*) reference="${item#*--ref=}" ;;
		'--reference='*) reference="${item#*--reference=}" ;;
		'--pathname='*) pathname="${item#*--pathname=}" ;;
		'--release='*) release="${item#*--release=}" ;;
		'--asset-filter='*) asset_filter="${item#*--asset-filter=}" ;;
		'--unzip-format='*) unzip_format="${item#*--unzip-format=}" ;;
		'--unzip-filter='*) unzip_filter="${item#*--unzip-filter=}" ;;
		'--directory='*) directory="${item#*--directory=}" ;;
		'--file='*) file="${item#*--file=}" ;;
		'--path='*) path="${item#*--path=}" ;;
		'--no-dry'* | '--dry'*)
			dry="$(get-flag-value dry --missing="$dry" -- "$item" | echo-affirmative)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# confirm expectations
	if test -n "$reference" -a -n "$release"; then
		help "[--ref] and [--release] are mutually exclusive"
	fi
	if test -n "$pathname" -a -n "$release"; then
		help "[--pathname] and [--release] are mutually exclusive"
	fi
	if test -n "$asset_filter" -a -z "$release"; then
		help "[--asset-filter] requires [--release]"
	fi

	# ensure directory, filename, path
	if test -n "$path"; then
		# path is a directory file combination
		path="$(fs-absolute -- "$path")"
		directory="$(dirname "$path")"
		file="$(basename "$path")"
	elif test -n "$directory" -a -n "$file"; then
		# directory + file
		path="$(fs-absolute -- "$directory/$file")"
		directory="$(dirname "$path")"
		file="$(basename "$path")"
	elif test -z "$directory" -a -n "$file"; then
		# file, without directory
		path="$(pwd)/$file"
		directory="$(dirname "$path")"
		file="$(basename "$path")"
	elif test -n "$directory" -a -z "$file"; then
		# directory, without file
		directory="$(fs-absolute -- "$directory")"
		path='' # it is for dir+file combos only
	else
		directory="$(pwd)"
		path='' # it is for dir+file combos only
	fi
	mkdir -p "$directory"

	# in case they gave a URL
	# if test -n "$slug"; then
	# 	slug="${slug/https\:\/\/github.com/}"
	# 	slug="${slug/.git//}"
	# fi
	if test -z "$slug"; then
		help "A GitHub repository slug is required."
	fi

	# GITHUB_API_URL
	if test -z "${GITHUB_API_URL-}"; then
		# https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
		GITHUB_API_URL='https://bevry.me/api/github'
		# encounters rate limits 'https://api.github.com'
	fi

	# =====================================
	# Action

	# release helpers
	function get_release_ref {
		# output the reference for the release
		local url="$GITHUB_API_URL/repos/$slug/releases/$release"
		if command-missing jq; then
			# don't use jq, rg, or sd to accomplish this, as none of them would be installed
			# sed fixes minified json such as `},{` and `","`
			fetch "$url" | sed -E $'s/,/,\\\n/g' | grep --fixed-strings --regexp='"tag_name":' | sed -E 's/.+: *"(.+)".*/\1/'
		else
			fetch "$url" | jq -r '.tag_name'
		fi
	}
	function get_release_assets_raw {
		# output the assets [name, url] for the release
		local url="$GITHUB_API_URL/repos/$slug/releases/$release"
		if command-missing jq; then
			# don't use jq, rg, or sd to accomplish this, as none of them would be installed
			# [tail -n+2] excludes the first line, which is the name of the repo
			# this is fragile as if the order of arguments change, it is all over
			# sed fixes minified json such as `},{` and `","`
			fetch "$url" | sed -E $'s/,/,\\\n/g' | grep --extended-regexp --regexp='"(name|browser_download_url)":' | tail -n+2 | sed -E 's/.+: *"(.+)".*/\1/'
		else
			fetch "$url" | jq -r ".assets[] | (.name, .browser_download_url)"
		fi
	}
	function get_release_assets {
		# get the assets [name, url] for the release
		local assets=()
		mapfile -t assets < <(get_release_assets_raw)
		if test "${#assets[@]}" -eq 0; then
			echo-style --error='No release assets were found.'
			return 1
		fi

		# now that we have them all, filter them
		local index name url matches=()
		for ((index = 0; index < ${#assets[@]}; index = index + 2)); do
			name="${assets[index]}"
			url="${assets[index + 1]}"
			# neovim: .sha256sum, .zsync
			# tealdeer: .sha
			# gocryptfs: .asc
			# vsh: .sbom
			if grep --quiet --extended-regexp --regexp='[.](asc|mini|sbom|sha256sum|sha256|sha|sig|zsync)$' <<<"$name"; then
				# ignore signature assets
				continue
			elif test -z "$asset_filter"; then
				# no asset filter, add them all
				matches+=("$url")
			elif test "$asset_filter" = "$name"; then
				# exact match, use only that
				matches=("$url")
				break
			elif grep --quiet --extended-regexp --regexp="$asset_filter" <<<"$name"; then
				# regexp match, make note
				matches+=("$url")
			fi # no match, ignore
		done

		# assert filter worked
		if test "${#matches[@]}" -eq 0; then
			{
				echo-style --error='No assets matched the filter:' ' ' --code="$asset_filter"
				echo-verbose "${assets[@]}"
			} >/dev/stderr
			return 1
		fi

		# output the matches
		echo-lines "${matches[@]}"
	}

	# reference helpers
	function get_ref_pathname_url {
		# determine branch
		if test -z "$reference"; then
			if fetch --ok "https://raw.githubusercontent.com/$slug/master/$pathname"; then
				reference='master'
			elif fetch --ok "https://raw.githubusercontent.com/$slug/main/$pathname"; then
				reference='main'
			else
				help "Unable to determine the [--ref] automatically, you must specify it manually."
			fi
		fi

		# download
		echo "https://raw.githubusercontent.com/$slug/$reference/$pathname"
	}

	# release/reference helpers
	function download_ref {
		local url ref="$reference" filter
		url="https://github.com/$slug/archive/$ref.tar.gz"
		filter="*-$ref/${unzip_filter:-"*"}"
		if test "$dry" = 'yes'; then
			echo "$url"
			return 0
		fi
		down "$url" \
			--quiet="$quiet" \
			--unzip-format="$unzip_format" \
			--unzip-filter="$filter" \
			--directory="$directory" \
			--file="$file" \
			--path="$path"
	}
	function download_release {
		local url ref filter
		ref="$(get_release_ref)"
		url="https://github.com/$slug/archive/$ref.tar.gz"
		filter="*-$reference/${unzip_filter:-"*"}"
		if test "$dry" = 'yes'; then
			echo "$url"
			return 0
		fi
		down "$url" \
			--quiet="$quiet" \
			--unzip-format="$unzip_format" \
			--unzip-filter="$filter" \
			--directory="$directory" \
			--file="$file" \
			--path="$path"
	}
	function download_asset {
		local asset assets
		mapfile -t assets < <(get_release_assets)
		if test "${#assets[@]}" -eq 0; then
			echo-style --error='No download assets were found.'
			return 1
		fi
		for asset in "${assets[@]}"; do
			if test "$dry" = 'yes'; then
				echo "$asset"
				continue
			fi
			down "$asset" \
				--quiet="$quiet" \
				--unzip-format="$unzip_format" \
				--unzip-filter="$unzip_filter" \
				--directory="$directory" \
				--file="$file" \
				--path="$path"
		done
	}
	function download_pathname {
		local url
		url="$(get_ref_pathname_url)"
		if test "$dry" = 'yes'; then
			echo "$url"
			return 0
		fi
		down "$url" \
			--quiet="$quiet" \
			--unzip-format="$unzip_format" \
			--unzip-filter="$unzip_filter" \
			--directory="$directory" \
			--file="$file" \
			--path="$path"
	}

	# =====================================
	# Act

	if test -n "$asset_filter"; then
		download_asset
	elif test -n "$pathname"; then
		download_pathname
	elif test -n "$release"; then
		download_release
	elif test -n "$reference"; then
		download_ref
	else
		help "Invalid combination of options."
	fi

	# # download a github release file
	# relase download --slug="$slug" --unzip-filter="$filter" | while read -r url; do
	# 	if test -z "$url"; then
	# 		stderr echo "failed to determine the release file for $*"
	# 		return 1
	# 	fi

	# 	if rg -q '.(tar|gz|zip)' <<<"$url"; then
	# 		# may include arguments for subfile and destination
	# 		down "$url" --unzip-filter="$extract" --destination="$destination" --inside="$inside"
	# 	else
	# 		# may include argument for destination
	# 		down "$url" --destination="$destination"
	# 	fi
	# done

	# function get_reference_clone {
	# 	# then shallow clone it to the [--inside] directory
	# 	git clone --quiet --depth 1 --branch "$reference" 'https://github.com/rfjakob/gocryptfs.git' "$inside"
	# }
	# function get_release_clone {
	# 	# get the reference for the release
	# 	local reference="$(get_release_ref)"

	# 	# then shallow clone it to the [--inside] directory
	# 	git clone --quiet --depth 1 --branch "$reference" 'https://github.com/rfjakob/gocryptfs.git' "$inside"
	# }
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	github_download "$@"
fi
