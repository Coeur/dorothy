#!/usr/bin/env bash

function command-working() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Returns success exit code if all <command>s are available and working.
			Working check is done via [<command> --help] and [<command> --version] checks.

			USAGE:
			command-working [--] ...<command>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item commands=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			commands+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) commands+=("$item") ;;
		esac
	done

	# check
	if test "${#commands[@]}" -eq 0; then
		echo-style --error="No <command> was provided. See [$0 --help] for usage."
		return 22 # EINVAL 22 Invalid argument
	fi

	# =====================================
	# Helpers

	# https://github.com/greymd/teip/issues/29
	# https://trunkcommunity.slack.com/archives/C0205B6KK8X/p1661601215325159
	local exceptions=(
		ssh-askpass
		sshd
		teip
		trunk
	)
	function check_status {
		local ec=0 cmd=()
		# ensure sbin commands work
		if [[ $* == *sbin* ]]; then
			cmd+=(
				'sudo-helper'
				'--'
			)
		fi
		# continue with the comand
		cmd+=("$@")
		# run the command
		("${cmd[@]}") &>/dev/null || ec="$?"
		# check for correct failure codes
		if test "$ec" -eq 22; then
			return 0
		else
			# otherwise return success or failure code
			return "$ec"
		fi
	}
	function check_working {
		# check it exists first
		local cmd
		cmd="$(type -P "$1")"

		# check if presence is enough for this cmd
		local exception
		for exception in "${exceptions[@]}"; do
			if [[ $cmd == */"$exception" ]]; then
				return 0
			fi
		done

		# it does exist, now check its return code
		check_status "$cmd" --version ||
			check_status "$cmd" version ||
			check_status "$cmd" --help ||
			check_status "$cmd" -h
	}

	# =====================================
	# Action

	local command
	for command in "${commands[@]}"; do
		if check_working "$command"; then
			continue
		else
			return 1 # command not working
		fi
	done
	return 0 # all commands are working
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	command-working "$@"
fi
