#!/usr/bin/env bash

function unziptar() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Extract the files from a zip/tar/dmg/etc file.

			USAGE:
			unziptar <archive-file> [...options]

			OPTIONS:
			--prune
			    If enabled, delete the archive after extraction.

			--format=<format>
			    Enforce <format> as the extraction format.
			    If omitted, or "auto", auto-dection will be attempted.

			--filter=<filter>
			    Only extract files that match the glob pattern <filter>.
			    If omitted, all files will be extracted.

			--directory=<directory>
			    Place extracted files inside <path>.
			    If ommitted, the current working directory will be used.

			--file=<file>
			    If only a single file was extracted, rename it to <file>.
			    If multiple files were extracted, then fail.

			--path=<directory>/<file>
			    If only a single file was extracted, rename it to <file>, and place it inside <directory>.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item archive='' format='' filter='' directory='' file='' path='' prune='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--format='*) format="${item#*--format=}" ;;
		'--filter='*) filter="${item#*--filter=}" ;;
		'--directory='*) directory="${item#*--directory=}" ;;
		'--file='*) file="${item#*--file=}" ;;
		'--path='*) path="${item#*--path=}" ;;
		'--no-prune'* | '--prune'*) prune="$(
			get-flag-value prune --missing="$prune" -- "$item" | echo-affirmative
		)" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$archive"; then
				archive="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure directory, filename, path
	if test -n "$path"; then
		# path is a directory file combination
		path="$(fs-absolute -- "$path")"
		directory="$(dirname "$path")"
		file="$(basename "$path")"
	elif test -n "$directory" -a -n "$file"; then
		# directory + file
		path="$(fs-absolute -- "$directory/$file")"
		directory="$(dirname "$path")"
		file="$(basename "$path")"
	elif test -z "$directory" -a -n "$file"; then
		# file, without directory
		path="$(pwd)/$file"
		directory="$(dirname "$path")"
		file="$(basename "$path")"
	elif test -n "$directory" -a -z "$file"; then
		# directory, without file
		directory="$(fs-absolute -- "$directory")"
		path='' # it is for dir+file combos only
	else
		directory="$(pwd)"
		path='' # it is for dir+file combos only
	fi
	mkdir -p "$directory"

	# ensure archive exists
	if test -z "$archive"; then
		help "No <archive-file> was provided."
	elif test ! -e "$archive"; then
		help "The <archive-file> does not exist: " --code="$archive"
	fi

	# ensure archive are absolute
	archive="$(fs-absolute -- "$archive")"

	# ensure format
	if test -z "$format" -o "$format" = 'auto'; then
		if [[ $archive == *".dmg" ]]; then
			format='dmg'
		elif [[ $archive == *".zip" ]]; then
			format='zip'
		else
			format='tar'
		fi
	fi

	# ensure filter
	if test -z "$filter"; then
		filter='*'
	fi

	# =====================================
	# Action

	# extract into temporary directory
	local archive_directory
	archive_directory="$(
		fs-temp \
			--directory='unziptar' \
			--directory="$(echo-checksum "$archive")"
	)"
	mkdir -p "$archive_directory"

	# enter the temporary directory
	pushd "$archive_directory" >/dev/null

	# unzip to that temporary directory
	local dmg_device=''
	function relocate {
		mv -fv "$@"
	}
	function dmg_unmount {
		# unmount the DMG device if it exists
		if test -n "$dmg_device"; then
			hdiutil detach "$dmg_device"
			dmg_device=''
		fi
	}
	if test "$format" = 'dmg'; then
		if test "$0" != "${BASH_SOURCE[0]}"; then
			echo-error 'unziptar: requires being run as a command, not a function, such that DMG cleanup always occurs, even on failures.'
			return 1 # EPERM 1 Operation not permitted
		fi
		trap dmg_unmount EXIT
		# install what is necessary for identifying the DMG volume
		setup-util-ripgrep --quiet
		setup-util-moreutils --quiet # sponge
		# attach the DMG to a volume
		dmg_device="$(hdiutil attach -readonly -nobrowse -mountroot "$archive_directory" "$archive" | sponge | rg --max-count=1 --only-matching --regexp='(/dev/.+?)\s' --replace='$1')"
		function relocate {
			cp -Rfv "$@"
		}
	elif test "$format" = 'zip'; then
		setup-util-unzip --quiet
		unzip -u "$archive"
	elif test "$format" = 'tar'; then
		tar -xvf "$archive"
		# don't use -z flag, as that enforces gzip (tar.xy) which is not valid for (.tar.xz)
		# without -z, auto-detection is used
	else
		help "Unrecognised format: $format"
	fi

	# match extracted paths against filter
	local filtered_paths=() filtered_path
	mapfile -t filtered_paths < <(
		expand-path "$archive_directory/$filter"
	)

	# relocate extracted files
	if test "${#filtered_paths[@]}" -eq 0; then
		echo-error "$0: No files were extracted."
		return 1
	elif test "${#filtered_paths[@]}" -eq 1; then
		# relocate the single path
		for filtered_path in "${filtered_paths[@]}"; do
			if test -n "$file"; then
				if test -d "$filtered_path" -a -d "$directory/$file"; then
					# the path is a directory, and its destination exists
					# as the path is intended to be a file, this means we want to behave as a file, which is to replace the directory, not to place the directory inside the directory
					# e.g. OBS.app should not go to /Applications/OBS.app/OBS.app if /Applications/OBS.app already existed
					rm -rfv "$directory/${file:?}"
				fi
				relocate "$filtered_path" "$directory/$file"
			else
				relocate "$filtered_path" "$directory"
			fi
		done
	else
		# was only one intended?
		if test -n "$file"; then
			{
				echo-error "$0: <file> was not possible, multiple files would have been relocated:"
				echo-verbose "${filtered_paths[@]}"
				echo_line "directory=[$directory]"
				echo_line "file=[$file]"
				echo_line "path=[$path]"
			} >/dev/stderr
			return 1
		fi
		# relocate multiple files
		for filtered_path in "${filtered_paths[@]}"; do
			relocate "$filtered_path" "$directory"
		done
	fi

	# exit the temporary directory then remove it
	popd >/dev/null
	dmg_unmount
	rm -rf "$archive_directory"

	# prune archive if desired
	if test "$prune" = 'yes'; then
		rm -f "$archive"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	unziptar "$@"
fi
