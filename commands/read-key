#!/usr/bin/env bash
# trunk-ignore-all(shellcheck/SC2162)

function read_key() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Read the pressed character and output what it was, such as [a], [left], [backspace], [enter], etc.

			USAGE:
			read-key [--timeout=600]
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item timeout=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--timeout='*) timeout="${item#*--timeout=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# todo this failed on a new setup
	# perhaps old bash
	# or perhaps only doing 1 item causes it to fail
	# error occured on each of the read statements below
	# read: error setting terminal attributes: Input/output error
	# read: read error: 0: Input/output error

	# for term in vt100 linux screen xterm; do
	# 	print_line "$term:"
	# 	infocmp -L1 $term | grep --extended-regexp --regexp='key_(left|right|up|down|home|end)'
	# done

	# timeout
	if ! is-number "$timeout"; then
		timeout=600 # ten minutes
	fi

	# helper
	function read_key_bash_v4 {
		local k0='' k1='' k2='' k3=''
		read -sN1 -t "$timeout" k0 || return
		read -sN1 -t 0.0001 k1 || :
		read -sN1 -t 0.0001 k2 || :
		read -sN1 -t 0.0001 k3 || :
		print_line "${k0}${k1}${k2}${k3}"
	}
	function read_key_bash_v3 {
		local k0='' k1='' k2=''
		# IFS= is necessary to separate space from enter
		IFS= read -sn1 -t "$timeout" k0 || return
		# printf 'k0 = %q \n' "$k0" >/dev/stderr
		if test "$k0" = $'\e'; then
			IFS= read -sn1 -t1 k1 || :
			# printf 'k1 = %q \n' "$k1" >/dev/stderr
			if test "$k1" = '['; then
				IFS= read -sn1 -t1 k2 || :
				# printf 'k2 = %q \n' "$k2" >/dev/stderr
			elif test "$k1" = $'\e'; then
				k1='' # duplicate escape press
			fi
		fi
		print_line "${k0}${k1}${k2}"
	}
	function read_key_bash_compat {
		local status=0
		if test "$BASH_VERSION_MAJOR" -ge '4'; then
			read_key_bash_v4 || status=$? # üëç /docs/bash/errors: robust exit status
		else
			read_key_bash_v3 || status=$? # üëç /docs/bash/errors: robust exit status
		fi
		if test "$status" -eq 142; then
			return 60 # ETIMEDOUT 60 Operation timed out
		elif test "$status" -ne 0; then
			return "$status" # some other issue, let the caller figure it out
		fi
	}

	# expand
	local key
	key="$(read_key_bash_compat)"
	case "$key" in
	# vt100
	$'\eOB') print_line 'down' ;;
	$'\eOD') print_line 'left' ;;
	$'\eOC') print_line 'right' ;;
	$'\eOA') print_line 'up' ;;

		# linux
	$'\e[B') print_line 'down' ;;
	$'\e[4~') print_line 'end' ;;
	$'\e[1~') print_line 'home' ;;
	$'\e[D') print_line 'left' ;;
	$'\e[C') print_line 'right' ;;
	$'\e[A') print_line 'up' ;;

		# screen
	$'\eOB') print_line 'down' ;;
	$'\e[4~') print_line 'end' ;;
	$'\e[1~') print_line 'home' ;;
	$'\eOD') print_line 'left' ;;
	$'\eOC') print_line 'right' ;;
	$'\eOA') print_line 'up' ;;

		# xterm
	$'\eOB') print_line 'down' ;;
	$'\eOF') print_line 'end' ;;
	$'\eOH') print_line 'home' ;;
	$'\eOD') print_line 'left' ;;
	$'\eOC') print_line 'right' ;;
	$'\eOA') print_line 'up' ;;

		# special
	$'\x7f') print_line 'backspace' ;;
	$'\x01') print_line 'all' ;;    # what type of key is this?
	$'\x1b') print_line 'escape' ;; # same as $'\e'
	$'\x0a') print_line 'enter' ;;  # same as $'\n'
	'') print_line 'enter' ;;       # bash v3 compat
	$'\t') print_line 'tab' ;;
	' ') print_line 'space' ;;

		# other
	$'\eOH') print_line 'home' ;;
	$'\e[H') print_line 'home' ;;
	$'\eOF') print_line 'end' ;;
	$'\eOF') print_line 'end' ;;
	*) print_line "$key" ;;
	esac
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	read_key "$@"
fi
