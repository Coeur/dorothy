#!/usr/bin/env bash

function fs-dirname() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the expanded parent path of a path.

			USAGE:
			fs-dirname [--] ...<path>

			COMPARISON:
			cd "$HOME"

			[dirname .]               outputs   [.]
			[fs-dirname -- .]         outputs   [/Users]

			[dirname ..]              outputs   [.]
			[fs-dirname -- ..]        outputs   [/]


			[dirname "$HOME"]         outputs   [/Users]
			[fs-dirname -- "$HOME"]   outputs   [/Users]

			symlink-helper --existing="$HOME" --symlink=./symlinked-directory
			[dirname ./symlinked-directory]     outputs [.]
			[fs-dirname -- ./symlinked-directory]   outputs [/Users]
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item paths=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) paths+=("$item") ;;
		esac
	done

	# check
	if test "${#paths[@]}" -eq 0; then
		help "No <paths> were provided."
	fi

	# =====================================
	# Action

	# use () (...)  as we modify the pwd
	function do_dirname() (
		local path="$1"
		if test -z "$path" -o "$path" = '.'; then
			# handles [fs-dirname] and [fs-dirname .]
			cd ..
			pwd
		elif test -d "$path"; then
			# handles [fs-dirname ..] and [fs-dirname ./..]
			cd "$path"
			cd ..
			pwd
		elif test -e "$(dirname "$path")"; then
			# handles files, in which case we just want the directory that contains the file
			# not the directory that contains the directory that contains the file
			cd "$(dirname "$path")"
			pwd
		else
			# the path doesn't exist, so just infer it by trimming the basename
			local basename dirname
			basename="$(basename "$path")"
			dirname="${path%"/$basename"}"
			if test "$dirname" != "$path"; then
				echo "$dirname"
			else
				cat <<-EOF >/dev/stderr
					$(echo-style --error="ERROR:")
					Unable to determine the dirname directory for the non-existent path: $(echo-style --code="$path")
				EOF
				return 1
			fi
		fi
	)

	local path
	for path in "${paths[@]}"; do
		do_dirname "$path"
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	fs-dirname "$@"
fi
