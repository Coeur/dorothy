#!/usr/bin/env bash

function setup_util_plex() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Sets up a Plex Media Server.

			USAGE:
			setup-util-plex [...options]

			OPTIONS:
			...
			    All other options are forwarded to $(echo-style --code='setup-util').
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='install' util=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--install') action='install' ;;
		'--uninstall') action='uninstall' ;;
		'--action='*) action="${item#*--action=}" ;;
		*) util+=("$item") ;;
		esac
	done

	# ensure action inside util
	util+=("--action=$action")

	# =====================================
	# Preparation

	local service_title='Plex Media Server'
	local service_ids=(
		'plexmediaserver'
	)
	local service_uninstall_paths=(
		# user config and data
		'/var/lib/plexmediaserver/'

		# app data
		'/usr/lib/plexmediaserver/'
	)

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Setup Utility

	# https://forums.plex.tv/t/809529?u=balupton
	# fetch 'https://plex.tv/pms/downloads/1.json?channel=plexpass' | jq -r '.computer | (.Windows, .MacOS, .Linux) | .releases[].url'

	function get_json {
		fetch 'https://plex.tv/pms/downloads/1.json?channel=plexpass'
	}
	function get_platform_urls {
		if is-mac; then
			get_json | jq -r '.computer.MacOS.releases[].url'
		elif is-linux; then
			get_json | jq -r '.computer.Linux.releases[].url'
		elif is-windows; then
			get_json | jq -r '.computer.Windows.releases[].url'
		else
			get_json | jq -r '.computer | (.Windows, .MacOS, .Linux) | .releases[].url'
		fi
	}

	# determine utility options
	local arch
	arch="$(get-arch)"
	util+=(
		--app='Plex Media Server' # cross-of compatible
	)
	if is-mac; then
		# -e is essential, as without it the '-' is confused as ripgrep flag argument
		util+=(
			CASK='plex-media-server'
			DOWNLOAD="$(get_platform_urls | rg -e '-universal.zip$')"
			DOWNLOAD_FILENAME='Plex Media Server.app' # maco
			DOWNLOAD_UNZIP_FORMAT='zip'
		)
	elif is-ubuntu; then
		if test "$arch" = 'x64'; then
			util+=("DEB=$(get_platform_urls | rg -e '_amd64.deb$')")
		elif test "$arch" = 'x32'; then
			util+=("DEB=$(get_platform_urls | rg -e '_i386.deb$')")
		elif test "$arch" = 'a64'; then
			util+=("DEB=$(get_platform_urls | rg -e '_arm64.deb$')")
		elif test "$arch" = 'a32'; then
			util+=("DEB=$(get_platform_urls | rg -e '_armhf.deb$')")
		fi
	elif command-exists rpm; then
		if test "$arch" = 'x64'; then
			util+=("RPM=$(get_platform_urls | rg -e '.x86_64.rpm$')")
		elif test "$arch" = 'x32'; then
			util+=("RPM=$(get_platform_urls | rg -e '.i686.rpm$')")
		fi
	fi

	# apt doesn't seem to work correctly
	# APT_KEY='https://downloads.plex.tv/plex-keys/PlexSign.key' \
	# APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://downloads.plex.tv/repo/deb public main' \
	# APT='plexmediaserver' \

	# install utility with forwarded+custom arguments
	setup-util "${util[@]}"

	# stop at uninstall?
	if test "$action" = 'uninstall'; then
		# remove services
		service-helper --remove -- \
			-- "${service_ids[@]}"
		# remove paths
		fs-rm --sudo --confirm \
			-- "${service_uninstall_paths[@]}"
		# remove user
		if is-user plex; then
			sudo-helper -- userdel plex
		fi
		# remove group
		if is-group plex; then
			sudo-helper -- groupdel --force plex
		fi
		# all done for uninstall
		return 0
	fi

	# =====================================
	# Setup Service

	# only manage the service if it is supported
	if service-helper --supported; then
		# verify the service was initialised
		if service-helper --exists -- "${service_ids[@]}"; then
			# disable autostart
			service-helper --disable --stop \
				-- "${service_ids[@]}"
		else
			# headful/headless, no service
			echo-error "$0: $service_title was installed, however the service was not."
			return 1
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_plex "$@"
fi
