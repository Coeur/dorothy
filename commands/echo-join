#!/usr/bin/env bash

function echo_join() (
	source "$DOROTHY/sources/stdinargs.bash"

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Concatenate the inputs with the <separator> between them.

			USAGE:
			echo-join <separator> [...options] [--] ...<input>
			echo-lines ...<input> | echo-join <separator> [...options]

			OPTIONS:
			<separator>
			    The separator to put between each <input>. If not provided, a space is used.

			$(stdinargs_options_help --)

			EXAMPLES:

			echo-join -- a b

			    a b
			    # exit status: 0

			echo-join '' -- a b

			    ab
			    # exit status: 0

			echo-join ', ' -- a b

			    a, b
			    # exit status: 0

			echo-lines -- a b | echo-join ', ' --stdin

			    a, b
			    # exit status: 0

			QUIRKS:
			There will be no newline at the end, in case you your input or separator contains newlines, we do not wish to mangle your intention.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local undefined
	undefined="$(get-random-number)"
	local item sep="$undefined" args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			args+=("$item" "$@")
			shift $#
			break
			;;
		'--'*) args+=("$item") ;;
		*)
			if test "$sep" = "$undefined"; then
				sep="$item"
			else
				help "You must provide only one <separator>. If you were intending to pass inputs, use: -- ...<input>"
			fi
			;;
		esac
	done

	# default to empty space
	if test "$sep" = "$undefined"; then
		sep=' '
	fi

	# =================================
	# Action

	# act
	local items=()
	function on_input {
		items+=("$1")
	}
	function on_finish {
		local index
		for index in "${!items[@]}"; do
			if test "$index" -eq 0; then
				printf '%s' "${items[index]}"
			else
				printf '%s%s' "$sep" "${items[index]}"
			fi
		done
	}

	stdinargs "${args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_join "$@"
fi
