#!/usr/bin/env bash
export DOROTHY
if test -z "${DOROTHY-}"; then
	self="${BASH_SOURCE:-"$0"}"
	DOROTHY="${self%/commands/setup-environment-commands*}"
fi

source "$DOROTHY/sources/bash.bash"
require_array 'mapfile'

# =====================================
# Notes

# This is an internal command, no need for help handling.

# Don't use `is-admin` here, as sudo does not necessarily load this
# so sudo should inherit standard config.

# Right to left is the prefernece for paths.

# Always use terminal editor for prompts as GUI editors are too slow.

# =====================================
# Helpers

function rubygems {
	local gem="$1" gemdirs gemdir
	export GEM_HOME="$HOME/.gem"
	if test -x "$gem"; then
		mapfile -t gemdirs < <("$gem" environment gempath | tr ':' '\n')
		for gemdir in "${gemdirs[@]}"; do
			PATH="$gemdir/bin:$PATH"
		done
	fi
}

# =====================================
# Configuration

source "$DOROTHY/sources/config.bash"

# arguments provides:
export shell="${1-}"

# testing
if [[ "$*" = *'--refresh'* ]]; then
	env -i DOROTHY="$DOROTHY" "$DOROTHY/commands/setup-environment-commands" "$shell"
	exit $?
fi

# environment provides:
# DOROTHY

# environment.bash provides:
# NVM_DIR, HOMEBREW_ARCH, PYENV_VERSION, RUBY_VERSION
# and other overrides

# load env.bash now, so that
# any exported variables changed from now on are echo'd at finish
source "$DOROTHY/sources/env.bash"

# =====================================
# Prepare

# reset editor
export LANG LC_CTYPE EDITOR

# Essentials, required for these environments
# crontab
# env -i "$(command -v bash)" -l -- $(command -v "dorothy-command")
# Fresh install of Dorothy on Ubuntu 21.04 on a Raspberry Pi 400
if test -z "${USER-}"; then
	export USER
	USER="$(whoami 2>/dev/null || users 2>/dev/null || echo 'unknown')"
fi
if test -z "${HOME-}"; then
	export HOME
	# should coincide with sudo-helper
	if test -d /Users; then
		HOME="/Users/$USER"
	elif test -d "/home/$USER"; then
		HOME="/home/$USER"
	elif test -d "/$USER"; then
		HOME="/$USER"
	else
		HOME="$(mktemp -d)"
	fi
fi

# XDG
# https://wiki.archlinux.org/title/XDG_Base_Directory
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
# XDG_RUNTIME_DIR is a special directory and variable created by the system
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"$HOME/.config"}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-"$HOME/.cache"}"
export XDG_BIN_HOME="${XDG_BIN_HOME:-"$HOME/.local/bin"}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-"$HOME/.local/share"}"
export XDG_STATE_HOME="${XDG_STATE_HOME:-"$HOME/.local/state"}"
# ^ if these are already defined, not to worry, `env.bash` will tidy up duplicates
mkdir -p "$XDG_CONFIG_HOME" "$XDG_CACHE_HOME" "$XDG_BIN_HOME" "$XDG_DATA_HOME" "$XDG_STATE_HOME"

# Appimage
export APPIMAGE_HOME="${APPIMAGE_HOME:-"$HOME/Applications"}"

# reset paths and flags
export PATH="$DOROTHY/commands:$XDG_BIN_HOME:/usr/sbin:/usr/bin:/sbin:/bin"
export MANPATH='/usr/share/man' INFOPATH='/usr/share/info' CLASSPATH='' LDFLAGS='' CPPFLAGS='' PKG_CONFIG_PATH=''

# local vars
p=''

# =====================================
# Configuration

# prepare hooks, and load user ovverrides
function before_dorothy_paths {
	return 0
}
function after_dorothy_paths {
	return 0
}
function after_everything {
	return 0
}
load_dorothy_config 'environment.bash'

# =====================================
# Environment

# XDG compiled properties
export XDG_DATA_DIRS="${XDG_DATA_DIRS:-"$XDG_DATA_HOME:/usr/local/share:/usr/share"}"
export XDG_CONFIG_DIRS="${XDG_CONFIG_DIRS:-"$XDG_CONFIG_HOME:/etc/xdg"}"

# Flatpak adjustments
if test -d '/var/lib/flatpak/exports/share'; then
	XDG_DATA_DIRS="/var/lib/flatpak/exports/share:$XDG_DATA_DIRS"
fi
if test -d "$XDG_DATA_HOME/flatpak/exports/share"; then
	XDG_DATA_DIRS="$XDG_DATA_HOME/flatpak/exports/share:$XDG_DATA_DIRS"
fi

# Should we prefer XDG?
export PREFER_XDG
if test "$DOROTHY" = "$HOME/.dorothy"; then
	PREFER_XDG='no'
else
	PREFER_XDG='yes'
fi

# GnuPG
export GNUPGHOME
if test -z "${GNUPGHOME-}"; then
	# check for existing
	if test -d "$XDG_DATA_HOME/gnupg"; then
		GNUPGHOME="$XDG_DATA_HOME/gnupg"
	elif test -d "$HOME/.gnupg"; then
		GNUPGHOME="$HOME/.gnupg"
	else
		# no existing, create from preference
		if test "$PREFER_XDG" = 'yes'; then
			GNUPGHOME="$XDG_DATA_HOME/gnupg"
		else
			GNUPGHOME="$HOME/.gnupg"
		fi
	fi
fi

# Xcode
if test -d "/Applications/Xcode.app/Contents/Developer/usr/bin"; then
	PATH="/Applications/Xcode.app/Contents/Developer/usr/bin:$PATH"
fi

# Snap
if test -d "/snap/bin"; then
	PATH="/snap/bin:$PATH"
fi

# Windows WSL
if is-wsl; then
	mapfile -t wsldirs < <(expand-path '/mnt/*/Program Files/*/bin')
	for wsldir in "${wsldirs[@]}"; do
		PATH="$(echo-escape-spaces "$wsldir"):$PATH"
	done
fi

# Homebrew, UNIX
if test -d "/usr/local/bin"; then
	PATH="/usr/local/bin:$PATH"
fi
if test -d "/usr/local/sbin"; then
	PATH="/usr/local/sbin:$PATH"
fi
if test -d "/usr/local/man"; then
	MANPATH="/usr/local/man:$MANPATH"
fi

# Homebrew
if is-mac; then
	export HOMEBREW_ARCH HOMEBREW_PREFIX HOMEBREW_CELLAR HOMEBREW_REPOSITORY HOMEBREW_SHELLENV_PREFIX
	if test -z "${HOMEBREW_ARCH-}"; then
		if test "$(uname -p)" = 'arm' -o "$(uname -m)" = 'arm64'; then
			HOMEBREW_ARCH='arm64e'
		else
			HOMEBREW_ARCH='x86_64'
		fi
	fi
	if test -z "${HOMEBREW_PREFIX-}"; then
		if test "$HOMEBREW_ARCH" = 'arm64e'; then
			HOMEBREW_PREFIX='/opt/homebrew'
		else
			HOMEBREW_PREFIX='/usr/local'
		fi
	fi
	if test -z "${HOMEBREW_CELLAR-}"; then
		if test -x "${HOMEBREW_PREFIX}/bin/brew"; then
			HOMEBREW_CELLAR="$("${HOMEBREW_PREFIX}/bin/brew" --cellar)"
		else
			HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
		fi
	fi
	if test -z "${HOMEBREW_REPOSITORY-}"; then
		if test -x "${HOMEBREW_PREFIX}/bin/brew"; then
			HOMEBREW_REPOSITORY="$("${HOMEBREW_PREFIX}/bin/brew" --repo)"
		else
			HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX"
		fi
	fi
	if test -z "${HOMEBREW_SHELLENV_PREFIX-}"; then
		HOMEBREW_SHELLENV_PREFIX="$HOMEBREW_PREFIX"
	fi
fi

# if homebrew is installed, then add its paths
if test -x "${HOMEBREW_PREFIX-}/bin/brew"; then
	# linux
	export HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-"/usr/local"}"

	# /usr/local already added to PATH, so only add these if different
	if test "$HOMEBREW_PREFIX" != '/usr/local'; then
		if test -d "$HOMEBREW_PREFIX/bin"; then
			PATH="$HOMEBREW_PREFIX/bin:$PATH"
		fi
		if test -d "$HOMEBREW_PREFIX/sbin"; then
			PATH="$HOMEBREW_PREFIX/sbin:$PATH"
		fi
	fi

	# add the rest
	if test -d "$HOMEBREW_PREFIX/share/man"; then
		MANPATH="$HOMEBREW_PREFIX/share/man:$MANPATH"
	fi
	if test -d "$HOMEBREW_PREFIX/share/info"; then
		INFOPATH="$HOMEBREW_PREFIX/share/info:$INFOPATH"
	fi

	# for compilers to find homebrew
	if test -d "$HOMEBREW_PREFIX/lib"; then
		LDFLAGS="-L$HOMEBREW_PREFIX/lib $LDFLAGS"
	fi
	if test -d "$HOMEBREW_PREFIX/include"; then
		CPPFLAGS="-I$HOMEBREW_PREFIX/include $CPPFLAGS"
	fi
	if test -d "$HOMEBREW_PREFIX/lib/pkgconfig"; then
		PKG_CONFIG_PATH="$HOMEBREW_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
	fi

	# llvm
	if test -d "$HOMEBREW_PREFIX/opt/llvm/bin"; then
		p="$HOMEBREW_PREFIX/opt/llvm"
		PATH="$p/bin:$PATH"
		# for compilers to find llvm
		if test -d "$p/lib"; then
			LDFLAGS="-L$p/lib $LDFLAGS"
		fi
		if test -d "$p/include"; then
			CPPFLAGS="-I$p/include $CPPFLAGS"
		fi
	fi

	# SQLite (dependency of python)
	if test -d "$HOMEBREW_PREFIX/opt/sqlite/bin"; then
		p="$HOMEBREW_PREFIX/opt/sqlite"
		PATH="$p/bin:$PATH"
		# for compilers to find sqlite
		if test -d "$p/lib"; then
			LDFLAGS="-L$p/lib $LDFLAGS"
		fi
		if test -d "$p/include"; then
			CPPFLAGS="-I$p/include $CPPFLAGS"
		fi
		# for pkg-config to find sqlite
		if test -d "$p/lib/pkgconfig"; then
			PKG_CONFIG_PATH="$p/lib/pkgconfig $PKG_CONFIG_PATH"
		fi
	fi

	# guile (dependency of something)
	if test -d "$HOMEBREW_PREFIX/share/guile"; then
		export GUILE_LOAD_PATH="$HOMEBREW_PREFIX/share/guile/site/3.0"
		export GUILE_LOAD_COMPILED_PATH="$HOMEBREW_PREFIX/lib/guile/3.0/site-ccache"
		export GUILE_SYSTEM_EXTENSIONS_PATH="$HOMEBREW_PREFIX/lib/guile/3.0/extensions"
	fi

	# icu4c (dependency of heroku)
	if test -d "$HOMEBREW_PREFIX/opt/icu4c/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/icu4c/bin:$PATH"
	fi
	if test -d "$HOMEBREW_PREFIX/opt/icu4c/sbin"; then
		PATH="$HOMEBREW_PREFIX/opt/icu4c/sbin:$PATH"
	fi

	# Sphinx (dependency of ruby)
	if test -d "$HOMEBREW_PREFIX/opt/sphinx-doc/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/sphinx-doc/bin:$PATH"
	fi

	# GetText (dependency of gpg)
	if test -d "$HOMEBREW_PREFIX/opt/gettext/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/gettext/bin:$PATH"
	fi

	# Ruby
	if test -n "${HOMEBREW_RUBY_VERSION-}"; then
		p=''
		if test "$HOMEBREW_RUBY_VERSION" = 'default'; then
			p="$HOMEBREW_PREFIX/opt/ruby"
		else
			p="$HOMEBREW_PREFIX/opt/ruby@$HOMEBREW_RUBY_VERSION"
		fi
		if test ! -d "$p/bin"; then
			echo "# specified HOMEBREW_RUBY_VERSION was not found at $p" >/dev/stderr
		else
			PATH="$p/bin:$PATH"
			rubygems "$p/bin/gem"
			# for compilers to find ruby
			if test -d "$p/lib"; then
				LDFLAGS="-L$p/lib $LDFLAGS"
			fi
			if test -d "$p/include"; then
				CPPFLAGS="-I$p/include $CPPFLAGS"
			fi
			# for pkg-config to find ruby
			if test -d "$p/lib/pkgconfig"; then
				PKG_CONFIG_PATH="$p/lib/pkgconfig:$PKG_CONFIG_PATH"
			fi
		fi
	else
		# add them all, exlcuding special paths
		mapfile -t rubydirs < <(expand-path "$HOMEBREW_PREFIX/opt/ruby*/bin")
		for rubydir in "${rubydirs[@]}"; do
			PATH="$rubydir:$PATH"
			rubygems "$rubydir/gem"
		done
	fi

	# Node
	mapfile -t nodedirs < <(expand-path "$HOMEBREW_CELLAR/node/*/bin")
	for nodedir in "${nodedirs[@]}"; do
		PATH="$nodedir:$PATH"
	done

	# Python
	# https://docs.brew.sh/Homebrew-and-Python
	if test -d "$HOMEBREW_PREFIX/opt/python/libexec/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/python/libexec/bin:$PATH"
	fi

	# Python: Pip
	mapfile -t pipdirs < <(expand-path "$HOME/Library/Python/*/bin")
	for pipdir in "${pipdirs[@]}"; do
		PATH="$pipdir:$PATH"
	done

	# OpenSSL (dependency of python, gpg, and node)
	# openssl is a symlink to whatever directory has the latest version
	if test -d "$HOMEBREW_PREFIX/opt/openssl/bin"; then
		p="$HOMEBREW_PREFIX/opt/openssl"
		PATH="$p/bin:$PATH"
		if test -d "$p/lib"; then
			LDFLAGS="-L$p/lib $LDFLAGS"
		fi
		if test -d "$p/include"; then
			CPPFLAGS="-I$p/include $CPPFLAGS"
		fi
		if test -d "$p/lib/pkgconfig"; then
			PKG_CONFIG_PATH="$p/lib/pkgconfig:$PKG_CONFIG_PATH"
		fi
		# ^^ setup-util-gocryptfs needs this on macos big sur
		# ```
		# Package libcrypto was not found in the pkg-config search path.
		# Perhaps you should add the directory containing `libcrypto.pc'
		# to the PKG_CONFIG_PATH environment variable
		# No package 'libcrypto' found
		# pkg-config: exit status 1
		# ```
		# and
		# ```
		# ld: library not found for -lcrypto
		# clang: error: linker command failed with exit code 1 (use -v to see invocation)
		# ````
	fi

	# NSS
	if test -d "$HOMEBREW_PREFIX/opt/nss/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/nss/bin:$PATH"
	fi

	# Anaconda
	if test -d "$HOMEBREW_PREFIX/anaconda3/bin"; then
		PATH="$HOMEBREW_PREFIX/anaconda3/bin:$PATH"
	fi

	# Heroku
	if test -d "$HOMEBREW_PREFIX/heroku/bin"; then
		PATH="$HOMEBREW_PREFIX/heroku/bin:$PATH"
	fi

	# Package Config
	# This was not recommended anywhere, but it seems logical as a way to have pkg-config bootstrapped with its default paths, of which it includes a lot more available configs than manually doing everything as we have done above
	if test -x "$HOMEBREW_PREFIX/bin/pkg-config"; then
		PKG_CONFIG_PATH="$(pkg-config --variable pc_path pkg-config):$PKG_CONFIG_PATH"
	fi
else

	# linux
	# don't use [which] as we haven't finished setting up paths
	# and [which] writes its errors to stdout!

	# Ruby
	rubygems /usr/bin/gem
fi

# NVM
if test -z "${NVM_DIR-}" -a -d "$HOME/.nvm"; then
	export NVM_DIR="$HOME/.nvm"
fi

# Python: pyenv
if test -z "${PYENV_ROOT-}" -a -d "$HOME/.pyenv"; then
	export PYENV_ROOT="$HOME/.pyenv"
fi
if test -n "${PYENV_ROOT-}"; then
	PATH="$PYENV_ROOT/bin:$PATH"
	PATH="$PYENV_ROOT/shims:$PATH"
fi

# Rust: rustup
if test -z "${RUSTUP_HOME-}" -a -d "$HOME/.rustup"; then
	export RUSTUP_HOME="$HOME/.rustup"
fi

# Rust: cargo
if test -z "${CARGO_HOME-}" -a -d "$HOME/.cargo"; then
	export CARGO_HOME="$HOME/.cargo"
fi
if test -n "${CARGO_HOME-}"; then
	mkdir -p "$CARGO_HOME"
	PATH="$CARGO_HOME/bin:$PATH"

	# Rust: cargo target
	# workaround for ubuntu server, which /tmp may often be read-only
	# https://doc.rust-lang.org/stable/cargo/guide/build-cache.html
	export CARGO_TARGET_DIR
	mkdir -p "${CARGO_TARGET_DIR:="$CARGO_HOME/target"}"
fi

# Go
# https://pkg.go.dev/cmd/go#hdr-Environment_variables
# only define GOPATH, defining GOROOT and GOBIN cause too many errors on linux
# such as incorrect "is not in GOROOT" errors
# NOTE that go path is not where go is located, but where go packages will be installed
if command-exists go; then
	export GOPATH
	# detect GOPATH if not defined
	if test -z "${GOPATH-}"; then
		# fetch the go bin paths
		if test -n "${HOMEBREW_CELLAR-}"; then
			# mac
			mapfile -t gopaths < <(expand-path "$HOMEBREW_CELLAR/go/*")
			for gopath in "${gopaths[@]}"; do
				GOPATH="$gopath"
				break # only do the first
			done
		elif test "$PREFER_XDG" = 'yes'; then
			# linux
			# prefer xdg, but support not xdg if it is there
			if test -d "$XDG_DATA_HOME/go"; then
				GOPATH="$XDG_DATA_HOME/go"
			elif test -d "$HOME/go"; then
				GOPATH="$HOME/go"
			else
				GOPATH="$XDG_DATA_HOME/go"
			fi
		else
			# linux
			# prefer not xdg, but support xdg if it is there
			if test -d "$HOME/go"; then
				GOPATH="$HOME/go"
			elif test -d "$XDG_DATA_HOME/go"; then
				GOPATH="$XDG_DATA_HOME/go"
			else
				GOPATH="$HOME/go"
			fi
		fi
	fi
	# if we were able to find one
	if test -n "${GOPATH-}"; then
		# then create its parts and add it to PATH
		mkdir -p "$GOPATH/bin"
		mkdir -p "$GOPATH/libexec"
		PATH="$GOPATH/bin:$PATH"
	fi
fi

# Clojurescript
if test -d "$HOME/.clojure/clojure-1.8"; then
	PATH="$HOME/.clojure/clojure-1.8.0:$PATH"
	CLASSPATH="$HOME/.clojure/clojure-1.8.0:$CLASSPATH"
fi

# Yarn
if command-exists yarn; then
	# on CI, yarn exists, yet this can return nothing
	p="$(yarn global bin 2>/dev/null)"
	if test -n "$p"; then
		PATH="$p:$PATH"
	fi
fi

# Flossbank
if test -d "$HOME/.flossbank/bin"; then
	PATH="$HOME/.flossbank/bin:$PATH"
fi

# 1Password, exposes op-ssh-sign
if test -d "/Applications/1Password.app/Contents/MacOS/"; then
	PATH="/Applications/1Password.app/Contents/MacOS/:$PATH"
fi

# Generics: Java
CLASSPATH=".:$CLASSPATH"

# Generics: pip, pipx
# python get-pip.py --user
# even though this is the same as non-custom XDG_BIN_HOME,
# add it anyway in the case it is different,
# `env.bash` will remove any duplicates anyway
if test -d "$HOME/.local/bin"; then
	PATH="$HOME/.local/bin:$PATH"
fi

# Generics: XDG, always add, even if not existent, in case it is created later
PATH="$XDG_BIN_HOME:$PATH"

# Theme
if test -z "${THEME-}"; then
	export THEME
	THEME="$(get-os-theme)"
fi

# Scripts
before_dorothy_paths
PATH="$DOROTHY/commands:$PATH"
PATH="$DOROTHY/user/commands:$PATH"
PATH="$DOROTHY/user/commands.local:$PATH"
after_dorothy_paths

# Generics: manual local commands
# Note that XDG_BIN_HOME should be preferred in your code
if test -d "$HOME/.bin"; then
	PATH="$HOME/.bin:$PATH"
fi
if test -d "$HOME/bin"; then
	PATH="$HOME/bin:$PATH"
fi

# =====================================
# Finish

# Load the last user hook, to complete the environment configuration
after_everything

# =====================================
# Editor

# Now that the environment is configured, we can now configure the editor, as it is possible to be detected now that paths are setup.

# LANG, LC_CTYPE
if test -z "${LANG-}"; then
	LANG='en_US.UTF-8'
fi
if test -z "${LC_CTYPE-}"; then
	LC_CTYPE="$LANG"
fi

# EDITOR, SUDO_EDITOR doesn't do anything so ignore
if test -z "${EDITOR-}"; then
	EDITOR="$(edit --dry --no-prompt --terminal || :)"
fi

# =====================================
# Finale

# trunk-ignore(shellcheck/SC2034)
DOROTHY_ENVIRONMENT='yes'
