#!/usr/bin/env bash

function select_hosts() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Adapt your system's hosts configuration to the desired values.

			USAGE:
			select-hosts
			# ^ use your prior configuration, or if there is none, prompt for configuration

			select-hosts --configure
			# ^ force reconfiguration
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item reconfigure='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--configure') reconfigure='yes' ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Dependencies

	setup-util-gsed --quiet

	# =====================================
	# Start

	echo-segment --h1="Setup Hosts file"

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# hosts.bash provides:
	local OPTIONS=() CHOICE='' NOFAP='' # yes/no/maybe
	load_dorothy_config 'hosts.bash'

	# adjustments
	if test -z "$CHOICE" -o "$reconfigure" = 'yes'; then
		if test "${#OPTIONS[@]}" -eq 0; then
			echo-segment --error="Invalid configuration, there must be valid OPTIONS."
		fi
		CHOICE="$(
			choose-option \
				--question='Which host file do you wish to use?' \
				--label=first -- "${OPTIONS[@]}"
		)"
		# as this is a new selection, recalculate nofap compliance
		if [[ $CHOICE == *'porn'* ]]; then
			# if it has porn in it, then it means it blocks porn
			NOFAP='yes'
		else
			NOFAP='no'
		fi
	fi
	# else, it is a manual selection, so let the user determine NoFap compliance

	# =====================================
	# Action

	# prepare
	local hosts_file='/etc/hosts'

	# helper
	function hosts {
		# prepare
		local url custom_file content_file combined_file hostname
		url="$1"
		custom_file="$(
			fs-temp \
				--directory='select-hosts' \
				--file='custom_file' --touch
		)"
		content_file="$(
			fs-temp \
				--directory='select-hosts' \
				--file='content_file' --touch
		)"
		combined_file="$(
			fs-temp \
				--directory='select-hosts' \
				--file='combined_file' --touch
		)"
		hostname="$(get-hostname)"

		# prepare defaults in case of failure
		cat <<-EOF >"$content_file"
			127.0.0.1 localhost

			# The following lines are desirable for IPv6 capable hosts
			::1 ip6-localhost ip6-loopback
			fe00::0 ip6-localnet
			ff00::0 ip6-mcastprefix
			ff02::1 ip6-allnodes
			ff02::2 ip6-allrouters
			ff02::3 ip6-allhosts
		EOF

		# grab the custom content, and save it temporarily
		# @todo test this if there was no match
		function save_custom_segment { # üëç /docs/bash/errors: robust exit status
			gsed -n '/<custom>/,/<\/custom>/p' <"$hosts_file" >"$custom_file"
		}
		if ! save_custom_segment; then
			cat <<-EOF >"$custom_file"
				# <custom>
				# </custom>
			EOF
		fi

		# if we have a new file
		if test -n "$url"; then
			echo-style --dim="Upgrading existing file with data from: $url"

			# download the new file to a temporary location
			down "$url" --path="$content_file" || :

			# combine the parts
			cat "$custom_file" "$content_file" >"$combined_file"
		else
			echo-style --dim="Upgrading existing file by removing undesired remote data."

			# combine the parts
			cat "$custom_file" "$content_file" >"$combined_file"
		fi

		# ensure the hostname exists
		gsed --null-data --in-place --regexp-extended \
			--expression="s#(\s+)localhost\n#\1localhost\n127.0.0.1\1$hostname\n#" \
			"$combined_file"

		# combine the custom content with the new content, and save it to the destination
		echo-style --notice="You may now be prompted for your sudo password to write the changes to the hosts file."
		eval-helper -- sudo-helper -- mv -f "$combined_file" "$hosts_file"

		# fix permissions, otherwise `sudo systemctl status systemd-resolved` could fail with:
		# Failed to open /etc/hosts: Permission denied
		fs-own --permissions=644 --admin \
			-- /etc/hosts
	}

	# apply
	eval-helper --quiet --no-wrap \
		--pending="$(echo-style --bold="Downloading [$CHOICE] to [$hosts_file]...")" \
		--success="$(echo-style --success="Downloaded [$CHOICE] to [$hosts_file].")" \
		-- hosts "$CHOICE"

	# =====================================
	# NoFap

	source "$DOROTHY/sources/nofap.bash"
	nofap "$NOFAP" 'hosts file' "$CHOICE"

	# =====================================
	# Reconfigure

	# update configuration
	update_dorothy_user_config --prefer=local 'hosts.bash' -- \
		--field='NOFAP' --value="$NOFAP" \
		--field='CHOICE' --value="$CHOICE"

	# =====================================
	# Finish

	echo-segment --g1="Setup Hosts file"

	# finally, flush dns
	flush-dns
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	select_hosts "$@"
fi
