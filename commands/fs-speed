#!/usr/bin/env bash

# NOTES:
# use /dev/random as on macos /dev/zero is instant
# |& is because dd writes to something other than stdout

function fs_speed() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Calculate the speed at a directory path.

			USAGE:
			fs-speed [--] ...<path>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if test "${#option_paths[@]}" -eq 0; then
		help 'No <path>s provided.'
	fi

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Action

	# prepare
	local bs megabytes_in_gigabyte=1024
	if is-mac; then
		bs="1m" # mac only
	else
		bs="1M" # linux only
	fi

	local scratchpad log bytes path
	for path in "${option_paths[@]}"; do
		# start
		echo-segment --h1="Speed Test: $path"

		# prepare a temporary file in the path we wish to speed test
		scratchpad="$(fs-temp --root="$path" --file)"

		# prepare a temporary file in our temp directory, to store the output
		# which we use for the speed analysis
		log="$(fs-temp --directory='fs-speed' --file="$(basename "$scratchpad").log")"

		# ensure they are empty
		fs-rm --quiet --no-confirm -- "$scratchpad" "$log"

		# @todo add some type of DEBUG=yes flag to avoid helpers, so we can still see block and time per block calculations

		# write performance
		eval-helper --quiet \
			--pending="$(echo-style --bold="Calculating write performance...")" \
			--success="$(echo-style --success="Calculated write performance.")" \
			--failure="$(echo-style --error="Failed calculate write.")" \
			-- dd if=/dev/random of="$scratchpad" bs="$bs" count="$megabytes_in_gigabyte" |& tee "$log"
		bytes="$(rg --only-matching --regexp='(\d+) bytes/sec' --replace='$1' <"$log" || :)"
		if test -n "$bytes"; then
			echo-style "Writes at " --bold="$((bytes / 1024 / 1024)) megabytes" " a second."
		fi

		# read performance
		eval-helper --quiet \
			--pending="$(echo-style --bold="Calculating read performance...")" \
			--success="$(echo-style --success="Calculated read performance.")" \
			--failure="$(echo-style --error="Failed calculate read.")" \
			-- dd if="$scratchpad" of=/dev/null bs="$bs" |& tee "$log"
		bytes="$(rg --only-matching --regexp='(\d+) bytes/sec' --replace='$1' <"$log" || :)"
		if test -n "$bytes"; then
			echo-style "Reads at " --bold="$((bytes / 1024 / 1024)) megabytes" " a second."
		fi

		# cleanup
		fs-rm --quiet --no-confirm -- "$scratchpad" "$log"

		# done
		echo-segment --g1="Speed Test: $path"
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	fs_speed "$@"
fi
