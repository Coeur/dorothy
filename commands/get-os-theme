#!/usr/bin/env bash

function get-os-theme() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output $(echo-style --code="light") or $(echo-style --code="dark") based on the theme of the Operating System.

			USAGE:
			get-os-theme
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	function get_os_theme_unsupported {
		# don't use echo-style here, as echo-style uses this
		echo "Unable to determine the Operating System theme." >/dev/stderr
		return 19 # ENODEV 19 Operation not supported by device
	}

	local result
	if is-mac; then
		result="$(osascript -e 'tell application "System Events" to tell appearance preferences to get dark mode' || :)"
		if test "$result" = 'true'; then
			echo 'dark'
		elif test "$result" = 'false'; then
			echo 'light'
		else
			# don't use echo-style here, as echo-style uses this
			echo "macOS returned an unexpected result when querying for Dark Mode preference." >/dev/stderr
			return 5 # EIO 5 Input/output error
		fi
	elif command-exists gsettings; then
		result="$(gsettings get org.gnome.desktop.interface gtk-theme || :)"
		case "$result" in
		"'Yaru'") echo 'light' ;;
		"'Yaru-dark'") echo 'dark' ;;
		*) get_os_theme_unsupported ;;
		esac
	else
		get_os_theme_unsupported
	fi

)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get-os-theme "$@"
fi
