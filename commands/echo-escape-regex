#!/usr/bin/env bash

function echo_escape_regex() (
	source "$DOROTHY/sources/bash.bash"

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			For each input, escape regex control characters by prepending backslashes.

			USAGE:
			echo-escape-regex <...input>
			echo-lines <...input> | echo-escape-regex

			EXAMPLE:

			echo-escape-regex '[a-z](?:test)/a/.*.+?'

			    \[a-z\]\(\?:test\)/a/\.\*\.\+\?
			    # exit status: 0

			echo-lines '[a-z](?:test)/a/.*.+?' | echo-escape-regex

			    \[a-z\]\(\?:test\)/a/\.\*\.\+\?
			    # exit status: 0

		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# this was provided by chatgpt, with printf modifications
	function on_input {
		local input="$1" i char
		for ((i = 0; i < ${#input}; i++)); do
			char="${input:i:1}"
			case "$char" in
			# trunk-ignore(shellcheck/SC1001)
			\\ | \[ | \] | \{ | \} | \^ | \$ | \. | \* | \+ | \? | \| | \( | \))
				printf '%s' "\\$char"
				;;
			*)
				printf '%s' "$char"
				;;
			esac
		done
		printf '\n'
	}

	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_escape_regex "$@"
fi
