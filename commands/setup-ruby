#!/usr/bin/env bash

function setup_ruby() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile' 'empty'

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# environment provides:
	# GEM_HOME

	# environment.bash provides:
	# HOMEBREW_RUBY_VERSION

	# setup.bash provides:
	local GEM_INSTALL=()
	local RUBY_INSTALL=() # deprecated, use GEM_INSTALL
	load_dorothy_config 'setup.bash'

	# deprecations
	if test "${#RUBY_INSTALL[@]}" -ne 0; then
		GEM_INSTALL+=("${RUBY_INSTALL[@]}")
		update_dorothy_user_config 'setup.bash' -- \
			--field='RUBY_INSTALL' --replace= \
			--field='GEM_INSTALL' --array="$(echo-lines -- "${GEM_INSTALL[@]}" | sort --ignore-case | uniq)"
	fi

	# adjustments
	mapfile -t GEM_INSTALL < <(prepare_packages 'GEM_INSTALL' -- "${GEM_INSTALL[@]}")

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-ruby [--flags]

			FLAGS:
			--optional
			    Only setup if it is needed by packages.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item optional=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-optional'* | '--optional'*)
			optional="$(get-flag-value optional --missing="$optional" -- "$item" | echo-affirmative || :)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# check
	if test "$optional" = 'yes' -a "${#GEM_INSTALL[@]}" -eq 0 && ! confirm --negative --ppid=$$ -- 'Setup Ruby?'; then
		return 0
	fi

	# =====================================
	# Start

	echo-segment --h1="Setup Ruby"

	# =====================================
	# Install

	# install a specific ruby version via homebrew if supported
	local brew_ruby='ruby'
	if test -n "${HOMEBREW_RUBY_VERSION-}" -a "${HOMEBREW_RUBY_VERSION-}" != 'default'; then
		brew_ruby="ruby@${HOMEBREW_RUBY_VERSION}"
	fi

	# perform the installation
	setup-util --cli='ruby' \
		APK='ruby-full' \
		APT='ruby-full' \
		AUR='ruby' \
		BREW="$brew_ruby" \
		RPM='ruby-devel' \
		ZYPPER='ruby-devel' # 'ruby' is also available

	# =====================================
	# Selection

	# Use only a single ruby version
	local __version_options __bin_directory __executable __directory __directory_version __full_version __version_options
	if test -n "${HOMEBREW_PREFIX-}"; then
		if test -z "${HOMEBREW_RUBY_VERSION-}" -o ! -d "$HOMEBREW_PREFIX/opt/ruby@${HOMEBREW_RUBY_VERSION-}"; then
			# discover
			__version_options=()
			mapfile -t rubyBinDirectories < <(expand-path "$HOMEBREW_PREFIX/opt/ruby*/bin")
			for __bin_directory in "${rubyBinDirectories[@]}"; do
				__executable="$__bin_directory/ruby"
				__directory="$(basename "$(fs-dirname -- "$__bin_directory")")"
				__directory_version="${__directory#*@}"
				__full_version="$("$__executable" --version)"
				if test "$__directory_version" = "$__directory"; then
					__directory_version='default'
				fi
				__version_options+=(
					"$__directory_version"
					"$(
						echo-style \
							--bold="$__directory_version" \
							$'\n  ' --dim="$__full_version" \
							$'\n  ' --dim="$__executable"
					)"
				)
			done

			# select
			HOMEBREW_RUBY_VERSION="$(
				choose-option \
					--question='There are multiple homebrew ruby versions installed, which version do you wish to prefer?' \
					--label -- "${__version_options[@]}"
			)"

			# apply
			config-helper --file="$DOROTHY/user/config/environment.bash" -- \
				--field='HOMEBREW_RUBY_VERSION' --value="$HOMEBREW_RUBY_VERSION"
		fi

		echo-style --dim="Homebrew Ruby Version: $HOMEBREW_RUBY_VERSION"
	fi

	# =====================================
	# Caches

	# Clear caches that can conflict with paths and old installs
	# Use only the intended one, which is GEM_HOME

	echo-segment --h2="Pruning cache"
	if test -d "$HOME/.gem"; then
		echo-style --dim="Pruning:       $HOME/.gem"
		rm -Rf "$HOME/.gem"
	fi
	if test -d "$HOME/.ruby"; then
		echo-style --dim="Pruning:       $HOME/.ruby"
		rm -Rf "$HOME/.ruby"
	fi
	if test -n "${GEM_HOME-}"; then
		if test -d "$GEM_HOME"; then
			echo-style --dim="Pruning:       $GEM_HOME"
			rm -Rf "$GEM_HOME"
		fi
		mkdir -p "$GEM_HOME"
	fi
	echo-segment --g2="Pruning cache"

	# =====================================
	# Reload

	# reload
	echo-style --h2="Reload paths to help changes be detected..."
	source "$DOROTHY/sources/environment.sh"

	# check
	if ! command-exists gem; then
		echo-style --e2='Unable to find [gem] executable, so cannot proceed... ❌' >/dev/stderr
		return 1
	fi
	echo-style \
		--dim="Ruby Path:      $(type -P ruby)" $'\n' \
		--dim="Ruby Version:   $(ruby --version)" $'\n' \
		--dim="Gem Path:       $(type -P gem)" $'\n' \
		--dim="Gem Version:    $(gem --version)"

	# =====================================
	# Update

	# As we wipe gems each time, this is no longer needed
	# also, it causes the following error on apt systems
	# ERROR:  Your RubyGems was installed trough APT, and upgrading it through RubyGems
	# 	itself is unsupported. If you really need the latest version of RubyGems (tip:
	# 	you usually don't), then you need to install RubyGems (and Ruby) manually,
	# 	maybe using tools like ruby-install, rvm, etc.
	# echo
	# print_line 'Updating ruby gems...'
	# gem update --system

	# =====================================
	# Packages

	setup-util --installer="GEM" -- "${GEM_INSTALL[@]}"

	# =====================================
	# Finish

	echo-segment --g1="Setup Ruby"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_ruby "$@"
fi
