#!/usr/bin/env bash

# https://unix.stackexchange.com/a/364496/50703
# https://unix.stackexchange.com/a/364458/50703
# https://en.wikipedia.org/wiki/Smartmontools
# https://help.ubuntu.com/community/Smartmontools

# These support UASP:
# Seagate Expansion Desktop Drive (STEB4000300)

# These do not support UASP:
# Western Digital My Book 12TB (WDBBGB0120HBK-NA,WDBBGB0120HBK-NB)

# What is UASP
# https://youtu.be/t0kYcM1E5fY
# https://www.startech.com/en-us/blog/all-you-need-to-know-about-uasp
# Despite what Pluggable states: https://support.plugable.com/t/6491/2?u=balupton
# UASP supported is needed by the USB Hubs for UASP boost, as stated by StarTech in a support chat:
# > All hubs support the use of UASP enabled devices, but hubs that do not have the feature built in will not operate at the boosted speed that UASP devices can function at. If you require the UASP boosted speed, then look for a hub that has it built in. If the speed is not crucial and the standard 5Gbps that USB 3.0 offers will suffice, it won't matter the hub you use as long as its a USB 3.0 hub.

# Other useful commands that we didn't use:
# df -T "$filesystem" # macos
# df --type="$filesystem" # linux
# blkid -L "$label"
# lsblk -f | awk "/$filesystem/" {print "/dev/"$1}'

function get_devices() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get devices and their information.

			USAGE:
			get-devices [...options] [-- ...<node>]

			OPTIONS:
			--result=<detail>
			    What to output as the result. If CSV values provided, they will be tabbed separated.

			--details=<detail>
			    What to output as the label (accepts CSV values).
			    Defaults to all details.

			--select=<question>
			    If provided, prompts the user to select one of the matched devices with the <question>.
			    Defaults <result> to <node>.

			--missing=<missing>
			    If provided, and no results were found, then output this <missing> message instead of the default one.

			--debug
			    Output debug information.

			FILTERS:
			--node=<node>
			    Filter devices, only returning those of <node>.

			--uuid=<uuid>
			    Filter devices, only returning those of <uuid>.

			--label=<label>
			    Filter devices, only returning those of <label>.

			--filesystem=<filesystem>
			    Filter devices, only returning those of <filesystem>.

			--mount=<mount>
			    Filter devices, only returning those mounted to <mount>.

			--mounted
			    Filter devices, only returning those that are mounted.

			--count=<count>
			    Filter devices, only returning those of <count>.
			    Currently only supports btrfs.

			DETAILS:
			node
			    Get device node, e.g. [/dev/sda]

			size
			    Get device size, e.g. [10.91 TiB]

			label
			    Get device label, e.g. [TANKER]

			filesystem
			    Get device filesystem/type, e.g. [btrfs|ext4]

			mount
			    Get device mount point, e.g. [/boot/firmware]

			count
				Get how many devices are attached to the filesystem (btrfs only), e.g. [1]

			vendor
			    Get device vendor, e.g. [Seagate]

			model
			    Get device model, e.g. [My Book 25EE]

			product
			    Get device product, e.g. [Expansion Desk]

			revision
			    Get device revision, e.g. [0915]

			serial
			    Get device serial number, e.g. [1AA1AA11] coerced from [Serial Number '1AA1AA11        ']

			uuid
			    Get device uuid, e.g. [1aa1aa11-1aa1-aa11-1aa1-aa1aa1aa1aa1]

			block
			    Get device block size, e.g. [4096]
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_results=() option_select='' option_missing='' option_debug='no'
	local option_has_node='' option_node=''
	local option_has_label='' option_label=''
	local option_has_filesystem='' option_filesystem=''
	local option_has_mount='' option_mount=''
	local option_has_count='' option_count=''
	local option_has_uuid='' option_uuid=''
	local option_details=(
		node
		size
		label
		filesystem
		mount
		count
		vendor
		model
		product
		revision
		serial
		uuid
		block
	)
	local filters=(
		node
		label
		filesystem
		mount
		count
		uuid
	)
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;

		'--result='*)
			mapfile -t option_results < <(echo-split ',' -- "${item#*--result=}")
			;;
		'--detail='*)
			mapfile -t option_details < <(echo-split ',' -- "${item#*--detail=}")
			;;
		'--select='*) option_select="${item#*--select=}" ;;
		'--missing='*) option_missing="${item#*--missing=}" ;;
		'--no-debug'* | '--debug'*)
			option_debug="$(get-flag-value debug --missing="$option_debug" -- "$item" | echo-affirmative --stdin)"
			;;

		'--node='*) option_node="${item#*--node=}" ;;
		'--no-node' | '--node')
			option_has_node="$(get-flag-value node --missing="$option_has_node" -- "$item" | echo-affirmative --stdin)"
			;;

		'--label='*) option_label="${item#*--label=}" ;;
		'--no-label' | '--label')
			option_has_label="$(get-flag-value label --missing="$option_has_label" -- "$item" | echo-affirmative --stdin)"
			;;

		'--filesystem='*) option_filesystem="${item#*--filesystem=}" ;;
		'--no-filesystem' | '--filesystem')
			option_has_filesystem="$(get-flag-value filesystem --missing="$option_has_filesystem" -- "$item" | echo-affirmative --stdin)"
			;;

		'--mount='*) option_mount="${item#*--mount=}" ;;
		'--no-mount' | '--mount')
			option_has_mount="$(get-flag-value mount --missing="$option_has_mount" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-mounted'* | '--mounted'*)
			option_has_mount="$(get-flag-value mounted --missing="$option_has_mount" -- "$item" | echo-affirmative --stdin)"
			;;

		'--count='*) option_count="${item#*--count=}" ;;
		'--no-count' | '--count')
			option_has_count="$(get-flag-value count --missing="$option_has_count" -- "$item" | echo-affirmative --stdin)"
			;;

		'--uuid='*) option_uuid="${item#*--uuid=}" ;;
		'--no-uuid' | '--uuid')
			option_has_uuid="$(get-flag-value uuid --missing="$option_has_uuid" -- "$item" | echo-affirmative --stdin)"
			;;

		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# if select is provided, yet no results are provided, then default to node
	if test -n "$option_select" -a "${#option_results[@]}" -eq 0; then
		option_results=('node')
	fi

	# if no select is provided, yet results are provided, then ignore display
	if test -z "$option_select" -a "${#option_results[@]}" -ne 0; then
		option_details=()
	fi

	# if no missing, default to a generic message
	if test -z "$option_missing"; then
		option_missing='No matching devices found.'
	fi

	# =====================================
	# Action

	# dependencies
	source "$DOROTHY/sources/ripgrep.bash"
	setup-util-devices --quiet

	# helpers
	function get_key {
		rg -o "$1=\"([^\"]+)" --replace '$1' || :
	}
	function get_property {
		rg -o "$1[: '\"]+([^'\"]+)" --replace '$1' | echo-trim-each-line --stdin || :
	}
	function check_exclude {
		local name="$1" value="$2"
		local option="option_$name"
		option="${!option}"
		local has="option_has_$name"
		has="${!has}"
		if test -n "$option" -a "$option" != "$value"; then
			return 0
		fi
		if test -n "$has"; then
			if test "$has" = 'yes' -a -z "$value" || test "$has" = 'no' -a -n "$value"; then
				return 0
			fi
		fi
		return 1
	}

	# debug
	if test "$option_debug" = 'yes'; then
		{
			if test -n "$option_node"; then
				# model, serial, uuid, filesystem, size, block, label
				eval-helper --no-quiet \
					-- sudo-helper \
					-- diskutil info "$option_node" || :

				# label, uuid, block, filesystem
				eval-helper --no-quiet \
					-- sudo-helper \
					-- blkid "$option_node" || :

				# serial, vendor, product, revision
				eval-helper --no-quiet \
					-- sudo-helper \
					-- sginfo -a "$option_node" || :

				eval-helper --no-quiet \
					-- sudo-helper \
					-- hdparm -I "$option_node" || :

				eval-helper --no-quiet \
					-- sudo-helper \
					-- sdparm -i "$option_node" || :

				# -i: model, serial, firmware, pci id, ieee id, controller id, nvme version, etc.
				# -a: same as -i, but includes SMART specific details that we don't care for
				# eval-helper --no-quiet \
				# 	-- sudo-helper \
				# 	-- smartctl -a "$option_node" ''

				#  btrfs filesystem show [options] [<path>|<uuid>|<device>|label]
				eval-helper --no-quiet \
					-- sudo-helper \
					-- btrfs filesystem show "$option_node"
			else
				if is-linux; then
					# macos doesn't support fdisk for listing
					eval-helper --no-quiet \
						-- sudo-helper \
						-- fdisk -l || :

					# Gets all the details for the drives, including the vendor, model, serial, driver capabilities, etc.
					# UASP unsupported: configuration: driver=usb-storage
					# UASP supported: configuration: driver=uas maxpower=... speed=...
					eval-helper --no-quiet \
						-- sudo-helper \
						-- lshw -class disk -class storage || :

					# Fetch filesystems and mounts for all drives
					eval-helper --no-quiet \
						-- sudo-helper \
						-- lsblk -f || :
				else
					eval-helper --no-quiet \
						-- sudo-helper \
						-- diskutil list || :
				fi

				#  btrfs filesystem show [options]
				eval-helper --no-quiet \
					-- sudo-helper \
					-- btrfs filesystem show

				# trail
				print_line
			fi
		} >/dev/stderr
	fi

	# action
	local mount_haystack mount_raid results=()
	mount_haystack="$(mount)"
	if is-mac; then
		mount_raid="$(sudo-helper -- diskutil appleRAID list)"
	fi
	function get_one {
		# trunk-ignore-all(shellcheck/SC2034)
		local exclude_status temp node="$1" size="${2-}" model="${3-}" label='' uuid='' block='' filesystem='' mount='' count='' serial='' vendor='' product='' revision=''

		# check node quickly
		eval_capture --statusvar=exclude_status -- check_exclude 'node' "$node"
		if test "$exclude_status" -eq 0; then
			return 0
		fi

		# trim trailing whitespace from model
		if test -n "$model"; then
			model="$(echo-trim-each-line --stdin <<<"$model")"
		fi

		# fetch properties
		if is-mac; then
			# macos doesn't seem to provide a way to find out if a node is actually mountable

			# fetch diskutil properties
			temp="$(sudo-helper -- diskutil info "$node")"
			uuid="$(get_property 'Disk [/] Partition UUID' <<<"$temp")"
			model="$(get_property 'Device [/] Media Name' <<<"$temp")"
			serial="$(get_property 'Disk [/] Partition UUID' <<<"$temp")" # IOContent is the type of device, not a uuid
			size="$(get_property 'Disk Size' <<<"$temp")"                 # 5.0 TB (5034252828672 Bytes) (exactly 9832525056 512-Byte-Units)
			if test -n "$size"; then
				size="${size%% (*}" # 5.0 TB
			fi
			block="$(get_property 'Device Block Size' <<<"$temp")" # 512 Byte

			# fetch label last, as it is complicated, and overwrites temp
			label="$(get_property 'Volume Name' <<<"$temp")" # volume device
			if test -n "$label" -a "$label" != 'Not applicable (no file system)'; then
				# if volume device, also has a filesystem
				filesystem="$(get_property 'Type [(]Bundle[)]' <<<"$temp")"
			elif test "$(get_property 'Content [(]IOContent[)]' <<<"$temp")" = 'GUID_partition_scheme'; then
				# child raid device
				serial=''
				label=''
				temp="${node##*/}" # /dev/disk7 => disk7
				temp="$(rg -o "${temp}s\d+" <<<"$mount_raid" || :)"
				if test -n "$temp"; then
					temp="$(sudo-helper -- diskutil info "$temp")"
					uuid="$(get_property 'Parent RAID Set UUID' <<<"$temp")"
					label="$(get_property 'Parent Set Name' <<<"$temp")"
					serial="$(get_property 'Disk [/] Partition UUID' <<<"$temp")"
					# count="$(rg --multiline --multiline-dotall --regexp='DevNode.+---+.+?disk7s2.+?====+' <<<"$mount_raid" | rg --regexp='^\d' | echo-count-lines --stdin)"
				fi
			else
				# root device of volume
				label="$(get_property 'Set Name' <<<"$temp")"
				if test -z "$label"; then
					# probably child device of label
					temp="$(get_property 'APFS Physical Store' <<<"$temp")"
					if test -n "$temp"; then
						temp="$(sudo-helper -- diskutil info "$temp")"
						uuid="$(get_property 'Disk [/] Partition UUID' <<<"$temp")"
						label="$(get_property 'Set Name' <<<"$temp")"
						filesystem="$(get_property 'Type [(]Bundle[)]' <<<"$temp")"
					fi
				else
					# raid device
					filesystem="$(get_property 'Type [(]Bundle[)]' <<<"$temp")"
				fi
			fi

			# uuid
			if test -n "$label" -a -n "$uuid"; then
				count="$(rg --multiline --multiline-dotall --regexp="$uuid.+?====+" <<<"$mount_raid" | rg --regexp='^\d' | echo-count-lines --stdin || :)"
			fi

			# fetch mount
			mount="$(rg -o "$node on (.+?) \($filesystem" --replace '$1' <<<"$mount_haystack" || :)"
			if test -n "$filesystem" -a -z "$mount"; then
				mount="$(rg -o "${node}s1 on (.+?) \($filesystem" --replace '$1' <<<"$mount_haystack" || :)"
			fi
		else
			# fetch blkid properties
			temp="$(sudo-helper -- blkid "$node" || :)" # can fail if recently removed from a btrfs cluster
			if test -n "$temp"; then
				filesystem="$(get_key 'TYPE' <<<"$temp")"
				label="$(get_key 'LABEL' <<<"$temp")"
				uuid="$(get_key 'UUID' <<<"$temp")"
				block="$(get_key 'BLOCK_SIZE' <<<"$temp")"
			fi

			# fetch sginfo properties
			temp="$(sudo-helper -- sginfo -a "$node")"
			serial="$(get_property 'Serial Number' <<<"$temp")"
			vendor="$(get_property 'Vendor' <<<"$temp")"
			product="$(get_property 'Product' <<<"$temp")"
			revision="$(get_property 'Revision level' <<<"$temp")"

			# fetch mount
			mount="$(rg -o "$node on (.+?) type $filesystem" --replace '$1' <<<"$mount_haystack" || :)"
		fi

		# fetch count
		if test "$filesystem" = 'btrfs'; then
			count="$(sudo-helper -- btrfs filesystem show "$node" | rg -o 'Total devices ([0-9]+)' --replace '$1' || :)"
		fi

		# check filters
		local filter
		for filter in "${filters[@]}"; do
			eval_capture --statusvar=exclude_status -- check_exclude "$filter" "${!filter}"
			if test "$exclude_status" -eq 0; then
				return 0
			fi
		done

		# output
		local result
		if test "${#option_results[@]}" -ne 0; then
			if test "${#option_results[@]}" -eq 1; then
				printf '%s' "${!option_results[0]}"
			else
				for temp in "${option_results[@]}"; do
					printf '%s\t' "${!temp}"
				done
			fi
			printf '\n'
		fi
		if test "${#option_details[@]}" -ne 0; then
			if test "${#option_details[@]}" -eq 1; then
				printf '%s=[%s]' "${option_details[0]}" "${!option_details[0]}"
			else
				for temp in "${option_details[@]}"; do
					printf '%s=[%s] ' "$temp" "${!temp}"
				done
			fi
			printf '\n'
		fi
	}
	function get_all {
		if is-mac; then
			sudo-helper -- diskutil list | rg -o '/dev/[^ ]+'
		else
			sudo-helper -- fdisk -l | rg -Uo 'Disk (/dev/.+): (.+?),.+\nDisk model: (.+)' --replace $'$1\t$2\t$3'
		fi
	}
	function action {
		local node size='' model='' result
		while IFS=$'\t' read -rd $'\n' node size model; do
			get_one "$node" "$size" "$model"
		done < <(get_all)
	}

	# act
	local results
	mapfile -t results < <(action)
	if test "${#results[@]}" -eq 0; then
		echo-style --error="$option_missing" >/dev/stderr
		return 19 # ENODEV 19 Operation not supported by device
	fi
	if test -n "$option_select"; then
		choose-option --required --confirm --label \
			--question="$option_select" \
			-- "${results[@]}"
	else
		echo-lines -- "${results[@]}"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_devices "$@"
fi
