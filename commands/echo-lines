#!/usr/bin/env bash

function echo_lines_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	eval-tester --name='simple arguments' --stdout=$'a\nb' \
		-- echo-lines a b

	{
		print_line a
		print_line b
	} | eval-tester --name='simple stdin' --stdout=$'a\nb' \
		-- echo-lines

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args' --stdout=$'a\nb\nc\nd' \
		-- echo-lines a b c d

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args quoted' --stdout=$'\'a\'\n\'b\'\n\'c\'\n\'d\'' \
		-- echo-lines --quoted -- a b c d

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args indented' --stdout=$'xa\nxb\nxc\nxd' \
		-- echo-lines --indent=x -- a b c d

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args columns' --stdout=$'a\tb\nc\td' \
		-- echo-lines --columns=2 -- a b c d

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_lines() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs each input on a separate line.

			USAGE:
			echo-lines [...options] [--] ...<input>

			OPTIONS:
			--columns=<columns>
			    output as many arguments per line as there are specified columns

			--indent=<indent>
			    prefix each line with the indentation

			--quoted=<yes/no>
			    if yes, the arguments will be quoted if necessary
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item ARGS=() columns=1 indent='' quoted='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--columns='*) columns="${item#*--columns=}" ;;
		'--indent='*) indent="${item#*--indent=}" ;;
		'--no-quoted'* | '--quoted'*) quoted="$(get-flag-value quoted --missing="$quoted" -- "$item" | echo-affirmative)" ;;
		'--')
			ARGS+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) ARGS+=("$item") ;;
		esac
	done

	# =====================================
	# Act

	# prepare the format
	local format='%s\n'
	for ((i = 1; i < "$columns"; i++)); do
		format="%s\t$format"
	done
	if test -n "$indent"; then
		format="$indent$format"
	fi

	# quote the arguments if desired
	local lines=()
	if test "$quoted" = 'yes'; then
		function on_input {
			lines+=("$(echo-quote "$1")")
		}
	else
		function on_input {
			lines+=("$1")
		}
	fi
	function on_finish {
		# trunk-ignore(shellcheck/SC2059)
		printf "$format" "${lines[@]}"
	}
	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_lines_test
	else
		echo_lines "$@"
	fi
fi
