#!/usr/bin/env bash

function print_lines() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs each input on a separate line.

			USAGE:
			echo-lines [...options] [--] ...<input>

			OPTIONS:
			--columns=<columns>
			    output as many arguments per line as there are specified columns

			--indent=<indent>
			    prefix each line with the indentation

			--quoted=<yes/no>
			    if yes, the arguments will be quoted if necessary
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item ARGS=() columns=1 indent='' quoted='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--columns='*) columns="${item#*--columns=}" ;;
		'--indent='*) indent="${item#*--indent=}" ;;
		'--no-quoted'* | '--quoted'*) quoted="$(get-flag-value quoted --missing="$quoted" -- "$item" | echo-affirmative)" ;;
		'--')
			ARGS+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) ARGS+=("$item") ;;
		esac
	done

	# =====================================
	# Act

	# prepare the format
	local format='%s\n'
	for ((i = 1; i < "$columns"; i++)); do
		format="%s\t$format"
	done
	if test -n "$indent"; then
		format="$indent$format"
	fi

	# quote the arguments if desired
	if test "$quoted" = 'yes'; then
		function on_input {
			# trunk-ignore(shellcheck/SC2059)
			printf "$format" "$(echo-quote "$1")"
		}
	else
		function on_input {
			# trunk-ignore(shellcheck/SC2059)
			printf "$format" "$1"
		}
	fi
	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	print_lines "$@"
fi
