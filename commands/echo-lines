#!/usr/bin/env bash

function echo_lines_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	eval-tester --name='simple arguments' --stdout=$'a\nb' \
		-- echo-lines -- a b

	{
		print_line a
		print_line b
	} | eval-tester --name='simple stdin' --stdout=$'a\nb' \
		-- echo-lines

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args' --stdout=$'a\nb\nc\nd' \
		-- echo-lines -- a b c d

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args quoted' --stdout=$'\'a\'\n\'b\'\n\'c\'\n\'d\'' \
		-- echo-lines --quoted -- a b c d

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args indented' --stdout=$'xa\nxb\nxc\nxd' \
		-- echo-lines --indent=x -- a b c d

	{
		print_line c
		print_line d
	} | eval-tester --name='simple stdin and args columns' --stdout=$'a\tb\nc\td' \
		-- echo-lines --columns=2 -- a b c d

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_lines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs each input on a separate line.

			USAGE:
			echo-lines [...options] [--] ...<input>

			OPTIONS:
			--columns=<columns>
			    output as many arguments per line as there are specified columns

			--indent=<indent>
			    prefix each line with the indentation

			--quoted=<yes/no>
			    if yes, the arguments will be quoted if necessary

			$(stdinargs_options_help --)
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_columns=1 option_indent='' option_quoted='no' args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--columns='*) option_columns="${item#*--columns=}" ;;
		'--indent='*) option_indent="${item#*--indent=}" ;;
		'--no-quoted'* | '--quoted'*)
			option_quoted="$(get-flag-value quoted --missing="$option_quoted" -- "$item" | echo-affirmative --stdin)"
			;;
		'--')
			args+=("$item" "$@")
			shift $#
			break
			;;
		*) args+=("$item") ;;
		esac
	done

	# =====================================
	# Act

	# prepare the format
	local column format='%s\n'
	for ((column = 1; column < "$option_columns"; column++)); do
		format="%s\t$format"
	done
	if test -n "$option_indent"; then
		format="$option_indent$format"
	fi

	# quote the arguments if desired
	local lines=()
	if test "$option_quoted" = 'yes'; then
		function on_input {
			lines+=("$(echo-quote -- "$1")")
		}
	else
		function on_input {
			lines+=("$1")
		}
	fi
	function on_finish {
		if test "${#lines[@]}" -ne 0; then
			# trunk-ignore(shellcheck/SC2059)
			printf "$format" "${lines[@]}"
		fi
	}

	stdinargs "${args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_lines_test
	else
		echo_lines "$@"
	fi
fi
