#!/usr/bin/env bash

function echo_lines_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	eval-tester --name='args' --stdout=$'a\nb' \
		-- echo-lines -- a b

	{
		print_line a
		print_line b
	} | eval-tester --name='stdin' --stdout=$'a\nb' \
		-- echo-lines --stdin

	{
		print_line e1
		print_line f1
	} | eval-tester --name='args, ignoring stdin' --stdout=$'a\nb\nc\nd' \
		-- echo-lines -- a b c d

	{
		print_line e2
		print_line f2
	} | eval-tester --name='args, with stdin' --stdout=$'a\nb\nc\nd\ne2\nf2' \
		-- echo-lines --stdin -- a b c d

	{
		print_line e3
		print_line f3
	} | eval-tester --name='args quoted, ignoring stdin' --stdout=$'\'a\'\n\'b\'\n\'c\'\n\'d\'' \
		-- echo-lines --quoted -- a b c d

	{
		print_line e4
		print_line f4
	} | eval-tester --name='args quoted, with stdin' --stdout=$'\'a\'\n\'b\'\n\'c\'\n\'d\'\n\'e4\'\n\'f4\'' \
		-- echo-lines --stdin --quoted -- a b c d

	{
		print_line e5
		print_line f5
	} | eval-tester --name='args indent, ignoring stdin' --stdout=$'xa\nxb\nxc\nxd' \
		-- echo-lines --indent=x -- a b c d

	{
		print_line e6
		print_line f6
	} | eval-tester --name='args indent, with stdin' --stdout=$'xa\nxb\nxc\nxd\nxe6\nxf6' \
		-- echo-lines --stdin --indent=x -- a b c d

	{
		print_line e7
		print_line f7
	} | eval-tester --name='args prefix, ignoring stdin' --stdout=$'--flag=a\n--flag=b\n--flag=c\n--flag=d' \
		-- echo-lines --prefix='--flag=' -- a b c d

	{
		print_line e8
		print_line f8
	} | eval-tester --name='args prefix, with stdin' --stdout=$'--flag=a\n--flag=b\n--flag=c\n--flag=d\n--flag=e8\n--flag=f8' \
		-- echo-lines --stdin --prefix='--flag=' -- a b c d

	{
		print_line e9
		print_line f9
	} | eval-tester --name='args columns, ignoring stdin' --stdout=$'a\tb\nc\td' \
		-- echo-lines --columns=2 -- a b c d

	{
		print_line e10
		print_line f10
	} | eval-tester --name='args columns, with stdin' --stdout=$'a\tb\nc\td\ne10\tf10' \
		-- echo-lines --stdin --columns=2 -- a b c d

	{
		print_line e11
		print_line f11
	} | eval-tester --name='args columns, indent, prefix, suffix, ignoring stdin' --stdout=$'x[a]\t[b]\nx[c]\t[d]' \
		-- echo-lines --columns=2 --indent='x' --prefix='[' --suffix=']' -- a b c d

	{
		print_line e12
		print_line f12
	} | eval-tester --name='args columns, indent, prefix, suffix, with stdin' --stdout=$'x[a]\t[b]\nx[c]\t[d]\nx[e12]\t[f12]' \
		-- echo-lines --stdin --columns=2 --indent='x' --prefix='[' --suffix=']' -- a b c d

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_lines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs each input on a separate line.

			USAGE:
			echo-lines [...options] [--] ...<input>

			OPTIONS:
			--columns=<columns>
			    output as many arguments per line as there are specified columns

			--indent=<indent>
			    prefix each line with this, useful for indentation

			--prefix=<prefix>
			    prefix each input with this

			--suffix=<suffix>
			    suffix each input with this

			--quoted=<yes/no>
			    if yes, the arguments will be quoted if necessary

			$(stdinargs_options_help --)
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_columns=1 option_indent='' option_prefix='' option_suffix='' option_quoted='no' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--columns='*) option_columns="${item#*=}" ;;
		'--prefix='*) option_prefix="${item#*=}" ;;
		'--indent='*) option_indent="${item#*=}" ;;
		'--suffix='*) option_suffix="${item#*=}" ;;
		'--no-quoted'* | '--quoted'*)
			option_quoted="$(get-flag-value --affirmative --fallback="$option_quoted" -- "$item")"
			;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# =====================================
	# Action

	# prepare the format
	local column format='%s\n'
	for ((column = 1; column < "$option_columns"; column++)); do
		format="%s\t$format"
	done
	if test -n "$option_indent"; then
		format="$option_indent$format"
	fi

	# quote the arguments if desired
	local lines=()
	if test "$option_quoted" = 'yes'; then
		function on_input {
			lines+=("$option_prefix$(echo-quote -- "$1")$option_suffix")
		}
	else
		function on_input {
			lines+=("$option_prefix$1$option_suffix")
		}
	fi
	function on_finish {
		if test "${#lines[@]}" -ne 0; then
			# trunk-ignore(shellcheck/SC2059)
			printf "$format" "${lines[@]}"
		fi
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_lines_test
	else
		echo_lines "$@"
	fi
fi
