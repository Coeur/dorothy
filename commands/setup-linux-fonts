#!/usr/bin/env bash

function setup_linux_fonts() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-helper)"

	# assert compatibility
	if ! is-linux; then
		echo-style --notice="[$0] is only intended to be run on Linux systems, skipping." >/dev/stderr
		return 0
	fi
	if is-headless; then
		echo-style --notice="[$0] is only intended to be run on desktop Linux systems, skipping." >/dev/stderr
		return 0
	fi
	if command-missing fc-cache; then
		echo-style --notice='fc-cache is not installed, skipping font installation.' >/dev/stderr
		return 45 # ENOTSUP 45 Operation not supported
	fi

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Configure Linux with your desired fonts.

			USAGE:
			setup-linux-fonts
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	# enforce xdg fonts directory as flatpak can detect it
	local fonts="$XDG_DATA_HOME/fonts"
	if test -d "$HOME/.fonts" -a ! -d "$fonts"; then
		mv "$HOME/.fonts" "$fonts"
	else
		mkdir -p "$fonts"
	fi

	# helpers
	function __has_font {
		if test -f "$fonts/$2"; then
			if confirm --negative --ppid=$$ -- "Upgrade $1?"; then
				return 1
			else
				return 0
			fi
		fi
		return 1
	}
	function get_monoid {
		down 'https://cdn.rawgit.com/larsenwork/monoid/2db2d289f4e61010dd3f44e09918d9bb32fb96fd/Monoid.zip' \
			--archive-glob='*.ttf' \
			--directory="$fonts"
	}
	function get_scp {
		# http://askubuntu.com/a/193073/22776
		# https://github.com/adobe-fonts/source-code-pro
		github-download \
			--slug='adobe-fonts/source-code-pro' \
			--latest \
			--asset-regexp='^[OT]TF-' \
			--archive-glob='**/*.{otf,ttf}' \
			--directory="$fonts"
	}
	function get_monaco {
		# https://github.com/showcases/fonts
		# https://github.com/todylu/monaco.ttf
		github-download \
			--slug='todylu/monaco.ttf' \
			--head \
			--pathname='monaco.ttf' \
			--directory="$fonts"
	}
	function get_nerd {
		# https://www.nerdfonts.com/font-downloads
		# https://github.com/ryanoasis/nerd-fonts/releases/tag/v2.1.0
		github-download \
			--slug='ryanoasis/nerd-fonts' \
			--latest \
			--asset-regexp='.' \
			--archive-glob='*.{otf,ttf}' \
			--directory="$fonts"
	}
	function get_fonts {
		echo-segment --h1='Install Fonts'

		if ! __has_font 'Monoid' 'Monoid-Regular.ttf'; then
			eval_helper --no-wrap --quiet \
				--pending="$(echo-style --bold="Installing Monoid...")" \
				--success="$(echo-style --success="Installed Monoid.")" \
				--failure="$(echo-style --error="Failed to install Monoid.")" \
				-- get_monoid
		fi

		if ! __has_font 'Source Code Pro' 'SourceCodePro-Regular.otf'; then
			eval_helper --no-wrap --quiet \
				--pending="$(echo-style --bold="Installing Source Code Pro...")" \
				--success="$(echo-style --success="Installed Source Code Pro.")" \
				--failure="$(echo-style --error="Failed to install Source Code Pro.")" \
				-- get_scp
		fi

		if ! __has_font 'Monaco' 'monaco.ttf'; then
			eval_helper --no-wrap --quiet \
				--pending="$(echo-style --bold="Installing Monaco...")" \
				--success="$(echo-style --success="Installed Monaco.")" \
				--failure="$(echo-style --error="Failed to install Monaco.")" \
				-- get_monaco
		fi

		if ! __has_font 'Nerd Fonts' 'Victor Mono SemiBold Nerd Font Complete.ttf'; then
			# this one has multiple, so we want to see details for each one
			eval_helper --no-wrap --no-quiet \
				--pending="$(echo-style --bold="Installing Nerd Fonts...")" \
				--success="$(echo-style --success="Installed Nerd Fonts.")" \
				--failure="$(echo-style --error="Failed to install Nerd Fonts.")" \
				-- get_nerd
		fi

		eval_helper --no-wrap --quiet \
			--pending="$(echo-style --bold="Refreshing font cache...")" \
			--success="$(echo-style --success="Refreshed font cache.")" \
			--failure="$(echo-style --error="Failed to refresh font cache.")" \
			-- fc-cache -f -v

		echo-segment --g1='Install Fonts'
	}

	# act
	get_fonts
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_linux_fonts "$@"
fi
