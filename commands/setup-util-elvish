#!/usr/bin/env bash

# https://elv.sh/get/

# https://repology.org/project/elvish/versions

function setup_util_elvish() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance
	if is-needle --quiet "$@" && ! is-needle --upgrade "$@" && ! is-needle --uninstall "$@" && command-exists elvish; then
		return 0
	fi

	# setup
	local arch options=(
		--cli='elvish'
		"$@"
		AUR='elvish'
		# DEB='elvish' -- outdated
		BREW='elvish'
		PORT='elvish'
		SCOOP='elvish'
		PKG='elvish'
		PKGIN='elvish'
		PKGADD='elvish'
		# NIX='elvish' -- outdated
	)
	function add_download_option {
		local release url platform="$1"
		release="$(get-github-release elves/elvish)" # v0.19.2
		url="https://dl.elv.sh/$platform/elvish-$release.tar.gz"
		options+=(
			DOWNLOAD="$url"
			DOWNLOAD_UNZIP_FORMAT='auto'
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option 'darwin-arm64'
		elif test "$arch" = 'x64'; then
			add_download_option 'darwin-amd64'
		fi
	elif is-wsl; then
		if test "$arch" = 'x64'; then
			add_download_option 'windows-amd64'
		elif test "$arch" = 'x32'; then
			add_download_option 'windows-386'
		fi
	else
		if test "$arch" = 'a64'; then
			add_download_option 'linux-arm64'
		elif test "$arch" = 'x64'; then
			add_download_option 'linux-amd64'
		elif test "$arch" = 'x32'; then
			add_download_option 'linux-386'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_elvish "$@"
fi
