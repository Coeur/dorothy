#!/usr/bin/env bash

function echo-html-encode() (
	source "$DOROTHY/sources/bash.bash"

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			For each input, encode it's HTML entities.

			USAGE:
			echo-html-encode <...input>
			echo-lines <...input> | echo-html-encode

			EXAMPLE:

			echo-html-encode 'Jack & Jill'

			    Jack &amp; Jill
			    # exit status: 0

			echo-lines 'Jack & Jill' | echo-html-encode

			    Jack &amp; Jill
			    # exit status: 0

		EOF
		return 22 # Invalid argument
	}

	function on_input {
		# textutil not possible
		if command-exists recode; then
			recode ascii..html <<<"$1"
		elif command-exists xmlstarlet; then
			# https://xmlstar.sourceforge.net/docs.php
			xmlstarlet esc "$1"
		elif command-exists deno; then
			# https://github.com/matschik/deno_html_entities
			deno eval --quiet \
				"import { Html5Entities } from 'https://deno.land/x/html_entities@v1.0/mod.js'; console.log(Html5Entities.encode(Deno.args[0]))" \
				"$1"
		elif command-exists php; then
			# https://www.php.net/manual/en/function.htmlentities.php
			# trunk-ignore(shellcheck/SC2016)
			php -R 'echo htmlentities($argv[0])' "$1"
		elif command-exists python3; then
			# https://docs.python.org/3/library/html.html
			python3 -c "import html; print(html.escape('''$1'''))"
		else
			get-installer --first-success --invoke --quiet -- recode xmlstarlet deno php python3
			on_input "$@"
		fi
	}

	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo-html-encode "$@"
fi
