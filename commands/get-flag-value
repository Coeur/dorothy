#!/usr/bin/env bash

function get_flag_value() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			get-flag-value <flag> [--multi] [--yes=...] [--no=...] [--missing=...] -- <--flag=value> <--flag> <--no-flag> ...

			FLAGS:
			Provide [--multi] to output the value for each occurence of the flag, instead of just the first.
			Provide [--yes=...] to customise the value for when the flag is provided without any value.
			Provide [--missing=...] to customise the value for when the flag is missing.

			QUIRKS:
			It does not support [--flag value], only [--[no-]flag=[value]].

			EXAMPLES:

			get-flag-value var --
			^ outputs nothing

			get-flag-value var -- --var
			^ outputs: yes

			get-flag-value var -- --no-var
			^ outputs: no

			get-flag-value var -- --var=value
			^ outputs: value

			get-flag-value var -- --var=
			^ outputs an empty line

			get-flag-value var --yes=yup --no=nada --missing=gone -- --var
			^ outputs: yup

			get-flag-value var --yes=yup --no=nada --missing=gone -- --var=yes
			^ outputs: yes

			get-flag-value var --yes=yup --no=nada --missing=gone -- --no-var
			^ outputs: nada

			get-flag-value var --yes=yup --no=nada --missing=gone -- --var=no
			^ outputs: no

			get-flag-value var --yes=yup --no=nada --missing=gone --
			^ outputs: gone
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item name='' yes='yes' no='no' missing='' multi='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--yes='*) yes="${item#*--yes=}" ;;
		'--no='*) no="${item#*--no=}" ;;
		'--missing='*) missing="${item#*--missing=}" ;;
		'--multi') multi="yes" ;;
		'--') break ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$name"; then
				name="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# =====================================
	# Action

	local found='no' inverted index value
	for item in "$@"; do
		# prepare
		inverted='no'
		index=0

		# check flag status
		if test "${item:0:2}" != '--'; then
			# not a flag
			continue
		fi
		index=2

		# check inversion
		if test "${item:index:3}" == 'no-'; then
			# is inverted
			inverted='yes'
			index=5
		fi

		# check is our flag
		if test "${item:index:${#name}}" != "$name"; then
			# not our flag
			continue
		fi
		found='yes'

		# get the value
		value="${item:index+${#name}}"
		if test -z "$value"; then
			value="$yes"
		elif test "${value:0:1}" = '='; then
			# is a proper value, trim =
			value="${value:1}"
		fi

		# perform inversion
		if test "$inverted" = 'yes'; then
			if test "$value" = "$yes"; then
				value="$no"
			elif test "$value" = "$no"; then
				value="$yes"
			fi
		fi

		# echo
		echo_line "$value"

		# if single, one result is all we want
		if test "$multi" = 'no'; then
			break
		fi
	done

	# handle missing case
	if test "$found" = 'no' -a -n "$missing"; then
		echo_line "$missing"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_flag_value "$@"
fi
