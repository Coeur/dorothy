#!/usr/bin/env bash
# we can assume [HOMEBREW_ARCH, HOMEBREW_PREFIX] have already been provided on brew supported systems

# This is an internal command, no need for help handling.

# Without this command, using HOMEBREW_ARCH=x86_64 on Apple Silicon will fail with:
# ```
# Error: Cannot install in Homebrew on ARM processor in Intel default prefix (/usr/local)!
# Please create a new installation in /opt/homebrew using one of the
# "Alternative Installs" from:
#   https://docs.brew.sh/Installation
# You can migrate your previously installed formula list with:
#   brew bundle dump
# brew on desired architecture
# ```

function brew_() (
	source "$DOROTHY/sources/bash.bash"

	# get the homebrew binary
	local bin="${HOMEBREW_PREFIX-}/bin/brew"
	if test ! -x "$bin"; then
		echo-style --error='Homebrew is not installed.' ' ' --notice='Install it with:' ' ' --code='setup-mac-brew' >/dev/stderr
		# ^ don't use get-installer, as bash v5 may not exist yet
		return 74 # EPROGUNAVAIL 74 RPC prog. not avail
	fi

	# help
	function help {
		cat <<-EOF >/dev/stderr
			$($bin --help || :)

			Dorothy extends the [brew] command to:
			- enforce the correct prefix via [HOMEBREW_PREFIX = $HOMEBREW_PREFIX]
			- enforce the appropriate architecture via [HOMEBREW_ARCH = $HOMEBREW_ARCH]
			- disable auto updates, as Dorothy handles that better via [setup-mac-brew]
			- disable brew environment hints, as Dorothy handles that better via [setup-environment-commands]
		EOF
		return 22 # EINVAL 22 Invalid argument
	}
	if test "$*" = '--help'; then
		help
	fi

	# disable brew auto updates, as Dorothy handles that better
	# disable brew hints, as Dorothy handles that better
	env HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_ENV_HINTS=1 \
		arch "-${HOMEBREW_ARCH}" "$bin" "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	brew_ "$@"
fi
