#!/usr/bin/env bash

function echo_count_lines() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output how many lines in the input.

			USAGE:
			echo-count-lines [...options] [--] <...input>
			echo-lines <...input> | echo-count-lines [--] [...options]

			OPTIONS:
			--inline
			    Whether to count inline arguments or not.

			EXAMPLE:

			echo-count-lines 'a' 'b' $'c\nd'

				1
				1
				2
				# exit status: 0

			echo-lines 'a' 'b'  $'c\nd' | echo-count-lines

				4
				# exit status: 0
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inline='yes' ARGS=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-inline'* | '--inline'*)
			option_inline="$(get-flag-value inline --missing="$option_inline" -- "$item" | echo-affirmative)"
			;;
		'--')
			ARGS+=("$@")
			shift "$#"
			break
			;;
		*)
			ARGS+=("$item" "$@")
			shift "$#"
			break
			;;
		esac
	done

	# =====================================
	# Action

	local index=0
	function on_arg {
		# force stdin
		echo_count_lines --inline="$option_inline" <<<"$1"
	}
	function on_line {
		index="$((index + 1))"
	}
	function on_inline {
		if test "$option_inline" = 'yes'; then
			index="$((index + 1))"
		fi
	}
	function on_finish {
		if test "$HAD_STDIN" = 'yes'; then
			print_line "$index"
		fi
	}
	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_count_lines "$@"
fi
