#!/usr/bin/env bash

function echo_count_lines_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	eval-tester --name='args, one line, is inline: default' --stdout='1' \
		-- echo-count-lines -- 'a'

	eval-tester --name='args, one line, is inline: --no-inline' --stdout='0' \
		-- echo-count-lines --no-inline -- 'a'

	eval-tester --name='args, one line, not inline: default' --stdout='1' \
		-- echo-count-lines -- $'a\n'

	eval-tester --name='args, one line, not inline: --no-inline' --stdout='1' \
		-- echo-count-lines --no-inline -- $'a\n'

	eval-tester --name='args, two lines, last is inline: default' --stdout='2' \
		-- echo-count-lines -- $'a\nb'

	eval-tester --name='args, two lines, last is inline: --no-inline' --stdout='1' \
		-- echo-count-lines --no-inline -- $'a\nb'

	eval-tester --name='multi args, one line, is inline: default' --stdout='1' \
		-- echo-count-lines -- 'a' ''

	eval-tester --name='multi args, one line, is inline: --no-inline' --stdout='0' \
		-- echo-count-lines --no-inline -- 'a' ''

	eval-tester --name='multi args, one line, not inline: default' --stdout='1' \
		-- echo-count-lines -- 'a' $'\n'

	eval-tester --name='multi args, one line, not inline: --no-inline' --stdout='1' \
		-- echo-count-lines --no-inline -- 'a' $'\n'

	eval-tester --name='multi args, two lines, last is inline: default' --stdout='2' \
		-- echo-count-lines -- 'a' $'\n' 'b'

	eval-tester --name='multi args, two lines, last is inline: --no-inline' --stdout='1' \
		-- echo-count-lines --no-inline -- 'a' $'\n' 'b'

	{
		printf '%s' 'a'
	} | eval-tester --name='stdin, one line, is inline: default' --stdout='1' \
		-- echo-count-lines --stdin

	{
		printf '%s' 'a'
	} | eval-tester --name='stdin, one line, is inline: --no-inline' --stdout='0' \
		-- echo-count-lines --stdin --no-inline

	{
		printf '%s' $'a\n'
	} | eval-tester --name='stdin, one line, not inline: default' --stdout='1' \
		-- echo-count-lines --stdin

	{
		printf '%s' $'a\n'
	} | eval-tester --name='stdin, one line, not inline: --no-inline' --stdout='1' \
		-- echo-count-lines --stdin --no-inline

	{
		printf '%s' $'a\nb'
	} | eval-tester --name='stdin, two lines, last is inline: default' --stdout='2' \
		-- echo-count-lines --stdin

	{
		printf '%s' $'a\nb'
	} | eval-tester --name='stdin, two lines, last is inline: --no-inline' --stdout='1' \
		-- echo-count-lines --stdin --no-inline

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_count_lines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output how many lines in the input.

			USAGE:
			echo-count-lines [...options] [--] ...<input>
			echo-lines ...<input> | echo-count-lines [...options]

			OPTIONS:
			$(stdinargs_options_help --)

			EXAMPLE:

			echo-count-lines -- $'1\n23\n4'
			echo-count-lines -- $'1\n2' $'3\n4' ''

			    3
			    # exit status: 0

			echo-count-lines --no-inline -- $'1\n23\n4'
			echo-count-lines --no-inline -- $'1\n2' $'3\n4' ''

			    2
			    # exit status: 0

			printf '%s' $'1\n2' | echo-count-lines --stdin

			    2
			    # exit status: 0

			printf '%s' $'1\n2' | echo-count-lines --stdin  --no-inline

			    1
			    # exit status: 0

			echo-lines -- 1 2 | echo-count-lines --stdin

			    2
			    # exit status: 0

		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inline='yes' args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--no-inline' | '--inline=no')
			option_inline='no'
			;;
		'--inline' | '--inline=yes')
			option_inline='yes'
			;;
		*)
			args+=("$item")
			;;
		esac
	done

	# =====================================
	# Action

	local arg_inputs=''
	local stdin_line_count=0
	function on_arg {
		arg_inputs+="$1"
	}
	function on_input {
		stdin_line_count="$((stdin_line_count + 1))"
	}
	function on_finish {
		local arg_line_count=0 total_line_count
		if test -n "$arg_inputs"; then
			arg_line_count="$(printf '%s' "$arg_inputs" | echo-count-lines --stdin --inline="$option_inline")"
		fi
		total_line_count="$((stdin_line_count + arg_line_count))"
		print_line "$total_line_count"
	}
	stdinargs --inline="$option_inline" "${args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_count_lines_test
	else
		echo_count_lines "$@"
	fi
fi
