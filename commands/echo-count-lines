#!/usr/bin/env bash

function echo_count_lines_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	{
		printf '%s' 'a'
	} | eval-tester --name='stdin, one line, is inline: default' --stdout='1' \
		-- echo-count-lines

	{
		printf '%s' 'a'
	} | eval-tester --name='stdin, one line, is inline: --no-inline' --stdout='0' \
		-- echo-count-lines --no-inline

	{
		printf '%s' $'a\n'
	} | eval-tester --name='stdin, one line, not inline: default' --stdout='1' \
		-- echo-count-lines

	{
		printf '%s' $'a\n'
	} | eval-tester --name='stdin, one line, not inline: --no-inline' --stdout='1' \
		-- echo-count-lines --no-inline

	{
		printf '%s' $'a\nb'
	} | eval-tester --name='stdin, two lines, last is inline: default' --stdout='2' \
		-- echo-count-lines

	{
		printf '%s' $'a\nb'
	} | eval-tester --name='stdin, two lines, last is inline: --no-inline' --stdout='1' \
		-- echo-count-lines --no-inline

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_count_lines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output how many lines in the input.

			USAGE:
			echo-lines ...<input> | echo-count-lines [...options]

			OPTIONS:
			$(stdinargs_options_help --stdin)
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Action

	local input_line_count=0
	function on_arg {
		help 'Use STDIN.'
	}
	function on_input {
		input_line_count="$((input_line_count + 1))"
	}
	function on_finish {
		print_line "$input_line_count"
	}
	stdinargs --stdin "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_count_lines_test
	else
		echo_count_lines "$@"
	fi
fi
