#!/usr/bin/env bash

function setup-go() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# setup.bash provides:
	local GO_INSTALL=()
	local GO_LINTING_INSTALL='' # '', 'yes', 'no'
	load_dorothy_config 'setup.bash'

	# adjustments
	mapfile -t GO_INSTALL < <(prepare_packages 'GO_INSTALL' -- "${GO_INSTALL[@]}")

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-go [--flags]

			FLAGS:
			--configure
			    Configuration guide.

			--optional
			    Only setup if it is needed by packages.

			--linting
			    Install linting tools.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item configure='no' optional=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-optional'* | '--optional'*)
			optional="$(get-flag-value optional --missing="$optional" -- "$item" | echo-affirmative || :)"
			;;
		'--no-linting'* | '--linting'*)
			GO_LINTING_INSTALL="$(get-flag-value linting --missing="$GO_LINTING_INSTALL" -- "$item" | echo-affirmative || :)"
			;;
		'--no-configure'* | '--configure'*)
			configure="$(get-flag-value configure --missing="$configure" -- "$item" | echo-affirmative)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# check
	if test "$optional" = 'yes' -a "${#GO_INSTALL[@]}" -eq 0 && ! confirm --negative --ppid=$$ -- 'Setup Go?'; then
		return 0
	fi

	# =====================================
	# Start

	echo-segment --h1='Setup Go'

	# =====================================
	# Install

	setup-util-go
	source "$DOROTHY/sources/environment.sh"

	# =====================================
	# Adjustments

	# determine full value for GO_LINTING_INSTALL
	if test -z "$GO_LINTING_INSTALL" -o "$configure" = 'yes'; then
		configure='yes'
		if confirm --negative --ppid=$$ -- "Do you also want to install go linting packages? This is desired if you plan to code with go."; then
			GO_LINTING_INSTALL='yes'
		else
			GO_LINTING_INSTALL='no'
		fi
	fi

	# if yes, then install the linting tools
	if test "$GO_LINTING_INSTALL" = 'yes'; then
		# https://github.com/golang/vscode-go/blob/master/docs/tools.md
		# https://github.com/golang/tools/blob/master/gopls/README.md
		GO_INSTALL+=(
			golang.org/x/tools/gopls
			github.com/go-delve/delve/cmd/dlv
			# github.com/uudashr/gopkgs/cmd/gopkgs
			github.com/ramya-rao-a/go-outline
			# github.com/haya14busa/goplay/cmd/goplay
			github.com/fatih/gomodifytags
			github.com/josharian/impl
			github.com/cweill/gotests/...
		)
	fi

	# =====================================
	# Packages

	setup-util --installer="GO" -- "${GO_INSTALL[@]}"

	# =====================================
	# Extras

	# If gometalinter exists, complete its installation.
	if command-exists gometalinter; then
		echo-segment --h2="[gometalinter] dependencies"
		eval-helper --quiet -- gometalinter --install || :
		echo-segment --g2="[gometalinter] dependencies"
	fi

	# =====================================
	# Configure

	if test "$configure" = 'yes'; then
		update_dorothy_user_config 'setup.bash' -- \
			--field='GO_LINTING_INSTALL' --value="$GO_LINTING_INSTALL"
	fi

	# =====================================
	# Finish

	echo-segment --g1='Setup Go'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup-go "$@"
fi
