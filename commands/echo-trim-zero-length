#!/usr/bin/env bash

function echo_trim_zero_length_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-segment --h1="TEST: $0"

	local inputs=('a' '' 'b' ' ' 'c' 'null' 'd' 'false')
	local expected=$'a\nb\n \nc\nnull\nd\nfalse'

	eval_tester --name='trimming arguments' --stdout="$expected" \
		-- echo-trim-zero-length "${inputs[@]}"

	function trim_stdin {
		echo-lines "${inputs[@]}" | echo-trim-zero-length
	}
	eval_tester --name='trimming arguments' --stdout="$expected" \
		-- trim_stdin

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_trim_zero_length() (
	source "$DOROTHY/sources/bash.bash"

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Trim inputs that are zero-length.

			USAGE:
			echo-trim-zero-length <...input>
			echo-lines <...input> | echo-trim-zero-length

			EXAMPLE:

			echo-trim-zero-length 'a' '' 'b' ' ' 'c' 'null' 'd' 'false'

			    a
			    b

			    c
			    null
			    d
			    false

			echo-lines 'a' '' 'b' ' ' 'c' 'null' 'd' 'false' | echo-trim-zero-length

			    a
			    b

			    c
			    null
			    d
			    false

		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	function on_input {
		if test -n "$1"; then
			print_line "$1"
		fi
	}

	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_trim_zero_length_test
	else
		echo_trim_zero_length "$@"
	fi
fi
