#!/usr/bin/env bash

# https://github.com/cli/cli
# https://github.com/cli/cli/blob/trunk/docs/install_linux.md

# https://github.com/cli/cli/releases
# GitHub CLI 2.32.1 linux 386 deb
# GitHub CLI 2.32.1 linux 386 RPM
# GitHub CLI 2.32.1 linux 386
# GitHub CLI 2.32.1 linux amd64 deb
# GitHub CLI 2.32.1 linux amd64 RPM
# GitHub CLI 2.32.1 linux amd64
# GitHub CLI 2.32.1 linux arm64 deb
# GitHub CLI 2.32.1 linux arm64 RPM
# GitHub CLI 2.32.1 linux arm64
# GitHub CLI 2.32.1 linux armv6 deb
# GitHub CLI 2.32.1 linux armv6 RPM
# GitHub CLI 2.32.1 linux armv6
# GitHub CLI 2.32.1 macOS amd64
# GitHub CLI 2.32.1 macOS arm64
# GitHub CLI 2.32.1 windows 386 installer
# GitHub CLI 2.32.1 windows 386
# GitHub CLI 2.32.1 windows amd64 installer
# GitHub CLI 2.32.1 windows amd64
# GitHub CLI 2.32.1 windows arm64

function setup_util_gh() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance
	if test "$*" = '--quiet' && command-exists gh; then
		return 0
	fi

	# gh via snap cannot access and authenticate without sudo, so ensure gh via snap is uninstalled
	if is-snap; then
		setup-util --quiet --uninstall --cli=gh \
			SNAP='gh'
	fi

	# no apk
	local arch options=(
		--name='GitHub CLI'
		--cli=gh
		"$@"
		APT_KEY='https://cli.github.com/packages/githubcli-archive-keyring.gpg'
		APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://cli.github.com/packages stable main'
		APT='gh'         # UBUNTU
		AUR='github-cli' # ARCH
		BREW='gh'
		DNF_REPO='https://cli.github.com/packages/rpm/gh-cli.repo'
		DNF='gh' # FEDORA
		ZYPPER_REPO='https://cli.github.com/packages/rpm/gh-cli.repo'
		ZYPPER='gh' # SUSE
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='cli/cli' \
			--release='latest' \
			--asset-filter="$(echo-escape-regex "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
		)
	}
	function add_deb_option {
		options+=(
			DEB="$(get_github_asset_url "$1")"
		)
	}
	function add_rpm_option {
		options+=(
			RPM="$(get_github_asset_url "$1")"
		)
	}
	function add_installer_option {
		options+=(
			INSTALLER="$(get_github_asset_url "$1")"
			INSTALLER_OPEN=yes
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '_macOS_arm64.zip'
		elif test "$arch" = 'x64'; then
			add_download_option '_macOS_amd64.zip'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_download_option '_windows_arm64.zip'
		elif test "$arch" = 'x64'; then
			add_download_option '_windows_amd64.zip'
			add_installer_option '_windows_amd64.msi'
		elif test "$arch" = 'x32'; then
			add_download_option '_windows_386.zip'
			add_installer_option '_windows_386.msi'
		fi
	else
		if test "$arch" = 'a64'; then
			add_deb_option '_linux_arm64.deb'
			add_rpm_option '_linux_arm64.rpm'
			add_download_option '_linux_arm64.tar.gz'
		elif test "$arch" = 'a32'; then
			add_deb_option '_linux_armv6.deb'
			add_rpm_option '_linux_armv6.rpm'
			add_download_option '_linux_armv6.tar.gz'
		elif test "$arch" = 'x64'; then
			add_deb_option '_linux_amd64.deb'
			add_rpm_option '_linux_amd64.rpm'
			add_download_option '_linux_amd64.tar.gz'
		elif test "$arch" = 'x32'; then
			add_deb_option '_linux_386.deb'
			add_rpm_option '_linux_386.rpm'
			add_download_option '_linux_386.tar.gz'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_gh "$@"
fi
